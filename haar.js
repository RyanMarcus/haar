var Module = {"ENVIRONMENT": "NODE"};

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 536870912;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 19712;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_haar_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([32,41,0,0,172,46,0,0,1,0,0,0,24,0,0,0,60,41,0,0,210,46,0,0,0,0,0,0,1,0,0,0,48,0,0,0,0,0,0,0,60,41,0,0,246,46,0,0,0,0,0,0,1,0,0,0,72,0,0,0,0,0,0,0,100,40,0,0,34,47,0,0,32,41,0,0,71,47,0,0,0,0,0,0,24,0,0,0,32,41,0,0,108,47,0,0,1,0,0,0,112,0,0,0,60,41,0,0,146,47,0,0,0,0,0,0,1,0,0,0,136,0,0,0,0,0,0,0,60,41,0,0,182,47,0,0,0,0,0,0,1,0,0,0,72,0,0,0,0,0,0,0,32,41,0,0,226,47,0,0,0,0,0,0,112,0,0,0,100,40,0,0,123,48,0,0,100,40,0,0,181,55,0,0,100,40,0,0,212,55,0,0,100,40,0,0,243,55,0,0,100,40,0,0,18,56,0,0,100,40,0,0,49,56,0,0,100,40,0,0,80,56,0,0,100,40,0,0,111,56,0,0,100,40,0,0,142,56,0,0,100,40,0,0,173,56,0,0,100,40,0,0,204,56,0,0,100,40,0,0,235,56,0,0,100,40,0,0,10,57,0,0,60,41,0,0,41,57,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,100,40,0,0,104,57,0,0,60,41,0,0,142,57,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,60,41,0,0,205,57,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,100,40,0,0,30,68,0,0,140,40,0,0,126,68,0,0,128,1,0,0,0,0,0,0,140,40,0,0,43,68,0,0,144,1,0,0,0,0,0,0,100,40,0,0,76,68,0,0,140,40,0,0,89,68,0,0,112,1,0,0,0,0,0,0,140,40,0,0,161,69,0,0,104,1,0,0,0,0,0,0,140,40,0,0,174,69,0,0,104,1,0,0,0,0,0,0,140,40,0,0,190,69,0,0,104,1,0,0,0,0,0,0,140,40,0,0,208,69,0,0,184,1,0,0,0,0,0,0,140,40,0,0,5,70,0,0,128,1,0,0,0,0,0,0,140,40,0,0,225,69,0,0,232,1,0,0,0,0,0,0,140,40,0,0,39,70,0,0,128,1,0,0,0,0,0,0,4,41,0,0,79,70,0,0,4,41,0,0,81,70,0,0,4,41,0,0,84,70,0,0,4,41,0,0,86,70,0,0,4,41,0,0,88,70,0,0,4,41,0,0,90,70,0,0,4,41,0,0,92,70,0,0,4,41,0,0,94,70,0,0,4,41,0,0,96,70,0,0,4,41,0,0,98,70,0,0,4,41,0,0,100,70,0,0,4,41,0,0,102,70,0,0,4,41,0,0,104,70,0,0,4,41,0,0,106,70,0,0,140,40,0,0,108,70,0,0,112,1,0,0,0,0,0,0,40,2,0,0,24,0,0,0,96,2,0,0,56,2,0,0,176,0,0,0,24,0,0,0,96,2,0,0,96,2,0,0,8,0,0,0,24,2,0,0,80,0,0,0,96,2,0,0,56,2,0,0,24,2,0,0,80,0,0,0,56,2,0,0,80,0,0,0,40,2,0,0,112,0,0,0,96,2,0,0,72,2,0,0,176,0,0,0,112,0,0,0,96,2,0,0,96,2,0,0,96,0,0,0,24,2,0,0,160,0,0,0,96,2,0,0,72,2,0,0,24,2,0,0,160,0,0,0,72,2,0,0,160,0,0,0,104,2,0,0,112,0,0,0,88,2,0,0,40,2,0,0,112,0,0,0,88,2,0,0,40,2,0,0,112,0,0,0,24,0,0,0,112,0,0,0,112,0,0,0,96,2,0,0,96,2,0,0,24,0,0,0,24,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,4,0,8,0,4,0,2,0,0,0,4,0,5,0,16,0,8,0,2,0,0,0,4,0,6,0,32,0,32,0,2,0,0,0,4,0,4,0,16,0,16,0,3,0,0,0,8,0,16,0,32,0,32,0,3,0,0,0,8,0,16,0,128,0,128,0,3,0,0,0,8,0,32,0,128,0,0,1,3,0,0,0,32,0,128,0,2,1,0,4,3,0,0,0,32,0,2,1,2,1,0,16,3,0,0,0,212,41,0,0,216,4,0,0,1,1,0,0,30,1,0,0,15,0,0,0,92,41,0,0,96,4,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,20,4,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,36,52,0,0,52,52,0,0,226,72,0,0,63,52,0,0,74,52,0,0,87,52,0,0,98,52,0,0,118,52,0,0,131,52,0,0,226,72,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,100,38,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,236,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,244,72,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,39,0,0,8,0,0,0,21,68,0,0,0,0,0,0,112,1,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,152,1,0,0,9,0,0,0,17,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,168,1,0,0,21,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,184,1,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,200,1,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,216,1,0,0,24,0,0,0,30,0,0,0,26,0,0,0,0,0,0,0,8,2,0,0,9,0,0,0,31,0,0,0,11,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,248,1,0,0,9,0,0,0,33,0,0,0,11,0,0,0,12,0,0,0,34,0,0,0,0,0,0,0,136,2,0,0,9,0,0,0,35,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,118,105,105,105,105,0,118,105,105,105,0,118,105,0,118,0,105,105,0,105,105,105,105,0,105,105,105,105,105,0,105,105,105,0,86,101,99,116,111,114,83,104,111,114,116,0,86,101,99,116,111,114,85,67,104,97,114,0,112,117,115,104,95,98,97,99,107,0,114,101,115,105,122,101,0,115,105,122,101,0,103,101,116,0,115,101,116,0,80,75,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,104,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,104,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,50,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,104,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,80,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,104,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,80,75,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,78,83,116,51,95,95,50,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,80,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,99,111,109,112,114,101,115,115,0,101,110,99,111,100,101,73,109,97,103,101,0,100,101,99,111,100,101,73,109,97,103,101,0,104,97,97,114,84,114,97,110,115,102,111,114,109,0,105,104,97,97,114,84,114,97,110,115,102,111,114,109,0,104,97,97,114,84,114,97,110,115,102,111,114,109,50,68,0,105,104,97,97,114,84,114,97,110,115,102,111,114,109,50,68,0,116,104,114,101,115,104,111,108,100,0,116,104,114,101,115,104,111,108,100,50,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,116,97,114,116,44,32,115,116,111,112,44,32,115,116,101,112,32,101,110,99,111,100,101,114,32,40,110,101,103,97,116,105,118,101,41,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,116,97,114,116,44,32,115,116,101,112,44,32,115,116,111,112,32,101,110,99,111,100,101,114,32,40,111,118,101,114,32,116,104,101,32,109,97,120,41,0,49,46,50,46,49,49,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,102,105,108,101,32,101,114,114,111,114,0,115,116,114,101,97,109,32,101,114,114,111,114,0,100,97,116,97,32,101,114,114,111,114,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,98,117,102,102,101,114,32,101,114,114,111,114,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,118,101,99,116,111,114,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function ___lock() {}

  function ___unlock() {}

  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }


  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "__embind_register_class_function": __embind_register_class_function, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "init_ClassHandle": init_ClassHandle, "___syscall140": ___syscall140, "ClassHandle_clone": ClassHandle_clone, "___syscall146": ___syscall146, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_class": __embind_register_class, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "RegisteredPointer_destructor": RegisteredPointer_destructor, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "init_embind": init_embind, "ClassHandle_deleteLater": ClassHandle_deleteLater, "integerReadValueFromPointer": integerReadValueFromPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "___cxa_end_catch": ___cxa_end_catch, "_embind_repr": _embind_repr, "_pthread_getspecific": _pthread_getspecific, "RegisteredPointer": RegisteredPointer, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "___lock": ___lock, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "__embind_register_function": __embind_register_function, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "__emval_incref": __emval_incref, "throwUnboundTypeError": throwUnboundTypeError, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "___syscall54": ___syscall54, "___unlock": ___unlock, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var __embind_register_class_function=env.__embind_register_class_function;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var init_ClassHandle=env.init_ClassHandle;
  var ___syscall140=env.___syscall140;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ___syscall146=env.___syscall146;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_class=env.__embind_register_class;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var init_embind=env.init_embind;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _embind_repr=env._embind_repr;
  var _pthread_getspecific=env._pthread_getspecific;
  var RegisteredPointer=env.RegisteredPointer;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var ___lock=env.___lock;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var __embind_register_function=env.__embind_register_function;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var __emval_incref=env.__emval_incref;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z8vecToRawRNSt3__26vectorIbNS_9allocatorIbEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $34 = sp;
 $39 = sp + 363|0;
 $49 = sp + 362|0;
 $53 = sp + 160|0;
 $56 = sp + 148|0;
 $59 = sp + 136|0;
 $75 = sp + 72|0;
 $78 = sp + 60|0;
 $82 = sp + 44|0;
 $84 = sp + 361|0;
 $87 = sp + 360|0;
 $90 = sp + 16|0;
 $83 = $0;
 $$expand_i1_val = 0; //@line 13 "compress_utils.cpp"
 HEAP8[$84>>0] = $$expand_i1_val; //@line 13 "compress_utils.cpp"
 $93 = (__Znwj(12)|0); //@line 13 "compress_utils.cpp"
 $81 = $93; //@line 13 "compress_utils.cpp"
 $94 = $81; //@line 13 "compress_utils.cpp"
 $80 = $94; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $95 = $80; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $95; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$95>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $96 = ((($95)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$96>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = ((($95)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $97; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$78>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $77; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $78; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $99 = $76; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $100 = HEAP32[$99>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $98; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$75>>2] = $100; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $101 = $74; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $101; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $75; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $102 = $72; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $103 = HEAP32[$102>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$101>>2] = $103; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = $82; //@line 13 "compress_utils.cpp"
 HEAP32[$59>>2] = $93; //@line 13 "compress_utils.cpp"
 $104 = $58; //@line 13 "compress_utils.cpp"
 $57 = $59; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $105 = $57; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $106 = HEAP32[$105>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $55 = $104; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$56>>2] = $106; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $107 = $55; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $54 = $56; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $108 = $54; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $109 = HEAP32[$108>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $52 = $107; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$53>>2] = $109; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $110 = $52; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = $53; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $111 = $51; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $112 = HEAP32[$111>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$110>>2] = $112; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $113 = $83; //@line 16 "compress_utils.cpp"
 $50 = $113; //@line 16 "compress_utils.cpp"
 $114 = $50; //@line 16 "compress_utils.cpp"
 $115 = ((($114)) + 4|0); //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = HEAP32[$115>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = (($116>>>0) / 8)&-1; //@line 16 "compress_utils.cpp"
 $85 = $117; //@line 16 "compress_utils.cpp"
 $118 = $85; //@line 19 "compress_utils.cpp"
 $119 = $118<<3; //@line 19 "compress_utils.cpp"
 $120 = $83; //@line 19 "compress_utils.cpp"
 $25 = $120; //@line 19 "compress_utils.cpp"
 $121 = $25; //@line 19 "compress_utils.cpp"
 $122 = ((($121)) + 4|0); //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
 $123 = HEAP32[$122>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
 $124 = ($119>>>0)<($123>>>0); //@line 19 "compress_utils.cpp"
 if ($124) {
  $125 = $85; //@line 20 "compress_utils.cpp"
  $126 = (($125) + 1)|0; //@line 20 "compress_utils.cpp"
  $85 = $126; //@line 20 "compress_utils.cpp"
 }
 $86 = 0; //@line 22 "compress_utils.cpp"
 while(1) {
  $127 = $86; //@line 22 "compress_utils.cpp"
  $128 = $85; //@line 22 "compress_utils.cpp"
  $129 = ($127>>>0)<($128>>>0); //@line 22 "compress_utils.cpp"
  if (!($129)) {
   break;
  }
  HEAP8[$87>>0] = 0; //@line 23 "compress_utils.cpp"
  $88 = 0; //@line 24 "compress_utils.cpp"
  while(1) {
   $130 = $88; //@line 24 "compress_utils.cpp"
   $131 = ($130|0)<(8); //@line 24 "compress_utils.cpp"
   if (!($131)) {
    break;
   }
   $132 = HEAP8[$87>>0]|0; //@line 25 "compress_utils.cpp"
   $133 = $132&255; //@line 25 "compress_utils.cpp"
   $134 = $133 << 1; //@line 25 "compress_utils.cpp"
   $135 = $134&255; //@line 25 "compress_utils.cpp"
   HEAP8[$87>>0] = $135; //@line 25 "compress_utils.cpp"
   $136 = $86; //@line 26 "compress_utils.cpp"
   $137 = $136<<3; //@line 26 "compress_utils.cpp"
   $138 = $88; //@line 26 "compress_utils.cpp"
   $139 = (($137) + ($138))|0; //@line 26 "compress_utils.cpp"
   $89 = $139; //@line 26 "compress_utils.cpp"
   $140 = $89; //@line 28 "compress_utils.cpp"
   $141 = $83; //@line 28 "compress_utils.cpp"
   $24 = $141; //@line 28 "compress_utils.cpp"
   $142 = $24; //@line 28 "compress_utils.cpp"
   $143 = ((($142)) + 4|0); //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
   $144 = HEAP32[$143>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/vector"
   $145 = ($140>>>0)>=($144>>>0); //@line 28 "compress_utils.cpp"
   if ($145) {
    label = 8;
    break;
   }
   $153 = $83; //@line 35 "compress_utils.cpp"
   $154 = $86; //@line 35 "compress_utils.cpp"
   $155 = $154<<3; //@line 35 "compress_utils.cpp"
   $156 = $88; //@line 35 "compress_utils.cpp"
   $157 = (($155) + ($156))|0; //@line 35 "compress_utils.cpp"
   $22 = $153; //@line 35 "compress_utils.cpp"
   $23 = $157; //@line 35 "compress_utils.cpp"
   $158 = $22; //@line 35 "compress_utils.cpp"
   $159 = $23; //@line 2304 "/usr/lib/emscripten/system/include/libcxx/vector"
   $20 = $158; //@line 2304 "/usr/lib/emscripten/system/include/libcxx/vector"
   $21 = $159; //@line 2304 "/usr/lib/emscripten/system/include/libcxx/vector"
   $160 = $20; //@line 2304 "/usr/lib/emscripten/system/include/libcxx/vector"
   $161 = HEAP32[$160>>2]|0; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $162 = $21; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $163 = (($162>>>0) / 32)&-1; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $164 = (($161) + ($163<<2)|0); //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $165 = $21; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $166 = (($165>>>0) % 32)&-1; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $167 = 1 << $166; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $17 = $90; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $18 = $164; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $19 = $167; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $168 = $17; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
   $169 = $18; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$168>>2] = $169; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $170 = ((($168)) + 4|0); //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $171 = $19; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$170>>2] = $171; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $1 = $90; //@line 35 "compress_utils.cpp"
   $172 = $1; //@line 35 "compress_utils.cpp"
   $173 = HEAP32[$172>>2]|0; //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $174 = HEAP32[$173>>2]|0; //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $175 = ((($172)) + 4|0); //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $176 = HEAP32[$175>>2]|0; //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $177 = $174 & $176; //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $178 = ($177|0)!=(0); //@line 52 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $179 = $178&1; //@line 35 "compress_utils.cpp"
   $180 = HEAP8[$87>>0]|0; //@line 35 "compress_utils.cpp"
   $181 = $180&255; //@line 35 "compress_utils.cpp"
   $182 = $181 | $179; //@line 35 "compress_utils.cpp"
   $183 = $182&255; //@line 35 "compress_utils.cpp"
   HEAP8[$87>>0] = $183; //@line 35 "compress_utils.cpp"
   $184 = $88; //@line 24 "compress_utils.cpp"
   $185 = (($184) + 1)|0; //@line 24 "compress_utils.cpp"
   $88 = $185; //@line 24 "compress_utils.cpp"
  }
  if ((label|0) == 8) {
   label = 0;
   $146 = $88; //@line 30 "compress_utils.cpp"
   $147 = (8 - ($146))|0; //@line 30 "compress_utils.cpp"
   $148 = (($147) - 1)|0; //@line 30 "compress_utils.cpp"
   $149 = HEAP8[$87>>0]|0; //@line 30 "compress_utils.cpp"
   $150 = $149&255; //@line 30 "compress_utils.cpp"
   $151 = $150 << $148; //@line 30 "compress_utils.cpp"
   $152 = $151&255; //@line 30 "compress_utils.cpp"
   HEAP8[$87>>0] = $152; //@line 30 "compress_utils.cpp"
  }
  $16 = $82; //@line 39 "compress_utils.cpp"
  $203 = $16; //@line 39 "compress_utils.cpp"
  $15 = $203; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
  $204 = $15; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $204; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $205 = $14; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $206 = HEAP32[$205>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $206; //@line 39 "compress_utils.cpp"
  $48 = $87; //@line 39 "compress_utils.cpp"
  $207 = $47; //@line 39 "compress_utils.cpp"
  $208 = ((($207)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $209 = HEAP32[$208>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $207; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $210 = $46; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $211 = ((($210)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = $211; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $212 = $45; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = $212; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $213 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $214 = HEAP32[$213>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $215 = ($209|0)!=($214|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($215) {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($49,$207,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
   $43 = $207; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $216 = $43; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $217 = ((($216)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $42 = $217; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $218 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $41 = $218; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $219 = $41; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $220 = ((($207)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $221 = HEAP32[$220>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $40 = $221; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $222 = $40; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
   $223 = $48; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $36 = $219; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $37 = $222; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $38 = $223; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $224 = $36; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $225 = $37; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $226 = $38; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $35 = $226; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $227 = $35; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   ;HEAP8[$34>>0]=HEAP8[$39>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $31 = $224; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $32 = $225; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $33 = $227; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $228 = $31; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $229 = $32; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $230 = $33; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $30 = $230; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $231 = $30; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $27 = $228; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $28 = $229; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $29 = $231; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $232 = $28; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $233 = $29; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $26 = $233; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $234 = $26; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $235 = HEAP8[$234>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP8[$232>>0] = $235; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($49); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
   $236 = ((($207)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $237 = HEAP32[$236>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $238 = ((($237)) + 1|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$236>>2] = $238; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $239 = $48; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   __THREW__ = 0;
   invoke_vii(39,($207|0),($239|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   $240 = __THREW__; __THREW__ = 0;
   $241 = $240&1;
   if ($241) {
    label = 10;
    break;
   }
  }
  $242 = $86; //@line 22 "compress_utils.cpp"
  $243 = (($242) + 1)|0; //@line 22 "compress_utils.cpp"
  $86 = $243; //@line 22 "compress_utils.cpp"
 }
 if ((label|0) == 10) {
  $186 = ___cxa_find_matching_catch_2()|0;
  $187 = tempRet0;
  $91 = $186; //@line 44 "compress_utils.cpp"
  $92 = $187; //@line 44 "compress_utils.cpp"
  $13 = $82; //@line 44 "compress_utils.cpp"
  $188 = $13; //@line 44 "compress_utils.cpp"
  $10 = $188; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $189 = $10; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $189; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $190 = $9; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $190; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $191 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $192 = HEAP32[$191>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $192; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $193 = $11; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $189; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $194 = $5; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $194; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $195 = $4; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$195>>2] = $193; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $196 = $12; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $197 = ($196|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($197)) {
   $261 = $91; //@line 44 "compress_utils.cpp"
   $262 = $92; //@line 44 "compress_utils.cpp"
   ___resumeException($261|0);
   // unreachable;
  }
  $3 = $189; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $198 = $3; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $198; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $199 = $2; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $200 = $12; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $199; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $200; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $201 = $7; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $202 = ($201|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($202) {
   $261 = $91; //@line 44 "compress_utils.cpp"
   $262 = $92; //@line 44 "compress_utils.cpp"
   ___resumeException($261|0);
   // unreachable;
  }
  __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($201); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($201); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $261 = $91; //@line 44 "compress_utils.cpp"
  $262 = $92; //@line 44 "compress_utils.cpp"
  ___resumeException($261|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1; //@line 43 "compress_utils.cpp"
 HEAP8[$84>>0] = $$expand_i1_val2; //@line 43 "compress_utils.cpp"
 $$pre_trunc = HEAP8[$84>>0]|0; //@line 44 "compress_utils.cpp"
 $244 = $$pre_trunc&1; //@line 44 "compress_utils.cpp"
 if ($244) {
  $260 = HEAP32[$82>>2]|0; //@line 44 "compress_utils.cpp"
  STACKTOP = sp;return ($260|0); //@line 44 "compress_utils.cpp"
 }
 $71 = $82; //@line 44 "compress_utils.cpp"
 $245 = $71; //@line 44 "compress_utils.cpp"
 $68 = $245; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $69 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $246 = $68; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = $246; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $247 = $67; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $247; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $248 = $66; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $249 = HEAP32[$248>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $249; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $250 = $69; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = $246; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $251 = $63; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = $251; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $252 = $62; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$252>>2] = $250; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $253 = $70; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 $254 = ($253|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($254)) {
  $260 = HEAP32[$82>>2]|0; //@line 44 "compress_utils.cpp"
  STACKTOP = sp;return ($260|0); //@line 44 "compress_utils.cpp"
 }
 $61 = $246; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $255 = $61; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $60 = $255; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $256 = $60; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $257 = $70; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = $256; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $257; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $258 = $65; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $259 = ($258|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($259) {
  $260 = HEAP32[$82>>2]|0; //@line 44 "compress_utils.cpp"
  STACKTOP = sp;return ($260|0); //@line 44 "compress_utils.cpp"
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($258); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZdlPv($258); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $260 = HEAP32[$82>>2]|0; //@line 44 "compress_utils.cpp"
 STACKTOP = sp;return ($260|0); //@line 44 "compress_utils.cpp"
}
function __Z11compressVecRNSt3__26vectorIbNS_9allocatorIbEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $9 = sp;
 $14 = sp + 450|0;
 $24 = sp + 449|0;
 $30 = sp + 340|0;
 $33 = sp + 328|0;
 $36 = sp + 316|0;
 $52 = sp + 252|0;
 $55 = sp + 240|0;
 $107 = sp + 32|0;
 $109 = sp + 24|0;
 $110 = sp + 20|0;
 $114 = sp + 448|0;
 $108 = $0;
 $116 = $108; //@line 49 "compress_utils.cpp"
 $117 = (__Z8vecToRawRNSt3__26vectorIbNS_9allocatorIbEEEE($116)|0); //@line 49 "compress_utils.cpp"
 HEAP32[$109>>2] = $117; //@line 49 "compress_utils.cpp"
 $106 = $109; //@line 64 "compress_utils.cpp"
 $118 = $106; //@line 64 "compress_utils.cpp"
 $105 = $118; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $105; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
 $104 = $119; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $104; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = HEAP32[$120>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
 $91 = $121; //@line 64 "compress_utils.cpp"
 $122 = $91; //@line 64 "compress_utils.cpp"
 $123 = ((($122)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $124 = HEAP32[$123>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $125 = HEAP32[$122>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = $124; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $127 = $125; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $128 = (($126) - ($127))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 $129 = (invoke_ii(40,($128|0))|0); //@line 64 "compress_utils.cpp"
 $130 = __THREW__; __THREW__ = 0;
 $131 = $130&1;
 if ($131) {
  label = 11;
 } else {
  HEAP32[$110>>2] = $129; //@line 64 "compress_utils.cpp"
  $132 = HEAP32[$110>>2]|0; //@line 65 "compress_utils.cpp"
  __THREW__ = 0;
  $133 = (invoke_ii(41,($132|0))|0); //@line 65 "compress_utils.cpp"
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   label = 11;
  } else {
   $113 = $133; //@line 65 "compress_utils.cpp"
   $136 = $113; //@line 67 "compress_utils.cpp"
   $90 = $109; //@line 67 "compress_utils.cpp"
   $137 = $90; //@line 67 "compress_utils.cpp"
   $89 = $137; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $138 = $89; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $88 = $138; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
   $139 = $88; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
   $140 = HEAP32[$139>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $75 = $140; //@line 67 "compress_utils.cpp"
   $141 = $75; //@line 67 "compress_utils.cpp"
   $142 = HEAP32[$141>>2]|0; //@line 659 "/usr/lib/emscripten/system/include/libcxx/vector"
   $74 = $109; //@line 67 "compress_utils.cpp"
   $143 = $74; //@line 67 "compress_utils.cpp"
   $73 = $143; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $144 = $73; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $72 = $144; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
   $145 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
   $146 = HEAP32[$145>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
   $59 = $146; //@line 67 "compress_utils.cpp"
   $147 = $59; //@line 67 "compress_utils.cpp"
   $148 = ((($147)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $149 = HEAP32[$148>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $150 = HEAP32[$147>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $151 = $149; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $152 = $150; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $153 = (($151) - ($152))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   __THREW__ = 0;
   (invoke_iiiii(42,($136|0),($110|0),($142|0),($153|0))|0); //@line 67 "compress_utils.cpp"
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    label = 11;
   } else {
    $$expand_i1_val = 0; //@line 70 "compress_utils.cpp"
    HEAP8[$114>>0] = $$expand_i1_val; //@line 70 "compress_utils.cpp"
    __THREW__ = 0;
    $156 = (invoke_ii(43,12)|0); //@line 70 "compress_utils.cpp"
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     label = 11;
    } else {
     $58 = $156; //@line 70 "compress_utils.cpp"
     $159 = $58; //@line 70 "compress_utils.cpp"
     $57 = $159; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
     $160 = $57; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
     $56 = $160; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP32[$160>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
     $161 = ((($160)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP32[$161>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
     $162 = ((($160)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
     $54 = $162; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP32[$55>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
     $163 = $54; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
     $53 = $55; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $164 = $53; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $165 = HEAP32[$164>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $51 = $163; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$52>>2] = $165; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $166 = $51; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $50 = $166; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
     $49 = $52; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     $167 = $49; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $168 = HEAP32[$167>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$166>>2] = $168; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     $35 = $107; //@line 70 "compress_utils.cpp"
     HEAP32[$36>>2] = $156; //@line 70 "compress_utils.cpp"
     $169 = $35; //@line 70 "compress_utils.cpp"
     $34 = $36; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
     $170 = $34; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $171 = HEAP32[$170>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
     $32 = $169; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$33>>2] = $171; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
     $172 = $32; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
     $31 = $33; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $173 = $31; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $174 = HEAP32[$173>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $29 = $172; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$30>>2] = $174; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $175 = $29; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
     $28 = $30; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     $176 = $28; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $177 = HEAP32[$176>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$175>>2] = $177; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
     $115 = 0; //@line 72 "compress_utils.cpp"
     while(1) {
      $178 = $115; //@line 72 "compress_utils.cpp"
      $179 = HEAP32[$110>>2]|0; //@line 72 "compress_utils.cpp"
      $180 = ($178>>>0)<($179>>>0); //@line 72 "compress_utils.cpp"
      if (!($180)) {
       label = 15;
       break;
      }
      $27 = $107; //@line 73 "compress_utils.cpp"
      $181 = $27; //@line 73 "compress_utils.cpp"
      $26 = $181; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $182 = $26; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $25 = $182; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $183 = $25; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $184 = HEAP32[$183>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $185 = $115; //@line 73 "compress_utils.cpp"
      $186 = $113; //@line 73 "compress_utils.cpp"
      $187 = (($186) + ($185)|0); //@line 73 "compress_utils.cpp"
      $22 = $184; //@line 73 "compress_utils.cpp"
      $23 = $187; //@line 73 "compress_utils.cpp"
      $188 = $22; //@line 73 "compress_utils.cpp"
      $189 = ((($188)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      $190 = HEAP32[$189>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      $21 = $188; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      $191 = $21; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      $192 = ((($191)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $20 = $192; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $193 = $20; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $19 = $193; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $194 = $19; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $195 = HEAP32[$194>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      $196 = ($190|0)!=($195|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
      if ($196) {
       __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($24,$188,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
       $18 = $188; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
       $197 = $18; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
       $198 = ((($197)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $17 = $198; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $199 = $17; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $16 = $199; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $200 = $16; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $201 = ((($188)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
       $202 = HEAP32[$201>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
       $15 = $202; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
       $203 = $15; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
       $204 = $23; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
       $11 = $200; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
       $12 = $203; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
       $13 = $204; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
       $205 = $11; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $206 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $207 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $10 = $207; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $208 = $10; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       ;HEAP8[$9>>0]=HEAP8[$14>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $6 = $205; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $7 = $206; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $8 = $208; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $209 = $6; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $210 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $211 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $5 = $211; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $212 = $5; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $2 = $209; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $3 = $210; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $4 = $212; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $213 = $3; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $214 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $1 = $214; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $215 = $1; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $216 = HEAP8[$215>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP8[$213>>0] = $216; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($24); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
       $217 = ((($188)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
       $218 = HEAP32[$217>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
       $219 = ((($218)) + 1|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$217>>2] = $219; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
      } else {
       $220 = $23; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
       __THREW__ = 0;
       invoke_vii(39,($188|0),($220|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
       $221 = __THREW__; __THREW__ = 0;
       $222 = $221&1;
       if ($222) {
        break;
       }
      }
      $223 = $115; //@line 72 "compress_utils.cpp"
      $224 = (($223) + 1)|0; //@line 72 "compress_utils.cpp"
      $115 = $224; //@line 72 "compress_utils.cpp"
     }
     if ((label|0) == 15) {
      $244 = $113; //@line 76 "compress_utils.cpp"
      __THREW__ = 0;
      invoke_vi(44,($244|0)); //@line 76 "compress_utils.cpp"
      $245 = __THREW__; __THREW__ = 0;
      $246 = $245&1;
      if (!($246)) {
       $$expand_i1_val2 = 1; //@line 78 "compress_utils.cpp"
       HEAP8[$114>>0] = $$expand_i1_val2; //@line 78 "compress_utils.cpp"
       $$pre_trunc = HEAP8[$114>>0]|0; //@line 79 "compress_utils.cpp"
       $247 = $$pre_trunc&1; //@line 79 "compress_utils.cpp"
       if (!($247)) {
        $71 = $107; //@line 79 "compress_utils.cpp"
        $248 = $71; //@line 79 "compress_utils.cpp"
        $68 = $248; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
        $69 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
        $249 = $68; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
        $67 = $249; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
        $250 = $67; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
        $66 = $250; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
        $251 = $66; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
        $252 = HEAP32[$251>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
        $70 = $252; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
        $253 = $69; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
        $63 = $249; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
        $254 = $63; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
        $62 = $254; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
        $255 = $62; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
        HEAP32[$255>>2] = $253; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
        $256 = $70; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
        $257 = ($256|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
        if ($257) {
         $61 = $249; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
         $258 = $61; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
         $60 = $258; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
         $259 = $60; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
         $260 = $70; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
         $64 = $259; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
         $65 = $260; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
         $261 = $65; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
         $262 = ($261|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
         if (!($262)) {
          __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($261); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
          __ZdlPv($261); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
         }
        }
       }
       $87 = $109; //@line 79 "compress_utils.cpp"
       $263 = $87; //@line 79 "compress_utils.cpp"
       $84 = $263; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $85 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $264 = $84; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $83 = $264; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $265 = $83; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $82 = $265; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $266 = $82; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $267 = HEAP32[$266>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $86 = $267; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $268 = $85; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $79 = $264; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $269 = $79; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $78 = $269; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $270 = $78; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$270>>2] = $268; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $271 = $86; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
       $272 = ($271|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
       if (!($272)) {
        $278 = HEAP32[$107>>2]|0; //@line 79 "compress_utils.cpp"
        STACKTOP = sp;return ($278|0); //@line 79 "compress_utils.cpp"
       }
       $77 = $264; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
       $273 = $77; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
       $76 = $273; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $274 = $76; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $275 = $86; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
       $80 = $274; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
       $81 = $275; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
       $276 = $81; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
       $277 = ($276|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
       if ($277) {
        $278 = HEAP32[$107>>2]|0; //@line 79 "compress_utils.cpp"
        STACKTOP = sp;return ($278|0); //@line 79 "compress_utils.cpp"
       }
       __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($276); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
       __ZdlPv($276); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
       $278 = HEAP32[$107>>2]|0; //@line 79 "compress_utils.cpp"
       STACKTOP = sp;return ($278|0); //@line 79 "compress_utils.cpp"
      }
     }
     $227 = ___cxa_find_matching_catch_2()|0;
     $228 = tempRet0;
     $111 = $227; //@line 79 "compress_utils.cpp"
     $112 = $228; //@line 79 "compress_utils.cpp"
     $48 = $107; //@line 79 "compress_utils.cpp"
     $229 = $48; //@line 79 "compress_utils.cpp"
     $45 = $229; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $46 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $230 = $45; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $44 = $230; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $231 = $44; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $43 = $231; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $232 = $43; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $233 = HEAP32[$232>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $47 = $233; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $234 = $46; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $40 = $230; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $235 = $40; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $39 = $235; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $236 = $39; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$236>>2] = $234; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $237 = $47; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
     $238 = ($237|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
     if ($238) {
      $38 = $230; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
      $239 = $38; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
      $37 = $239; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
      $240 = $37; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
      $241 = $47; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
      $41 = $240; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
      $42 = $241; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
      $242 = $42; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
      $243 = ($242|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
      if (!($243)) {
       __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($242); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
       __ZdlPv($242); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
      }
     }
    }
   }
  }
 }
 if ((label|0) == 11) {
  $225 = ___cxa_find_matching_catch_2()|0;
  $226 = tempRet0;
  $111 = $225; //@line 79 "compress_utils.cpp"
  $112 = $226; //@line 79 "compress_utils.cpp"
 }
 $103 = $109; //@line 79 "compress_utils.cpp"
 $279 = $103; //@line 79 "compress_utils.cpp"
 $100 = $279; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $101 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $280 = $100; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $99 = $280; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $281 = $99; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $98 = $281; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $282 = $98; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $283 = HEAP32[$282>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $102 = $283; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $284 = $101; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $280; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $285 = $95; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $285; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $286 = $94; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$286>>2] = $284; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $287 = $102; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 $288 = ($287|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($288)) {
  $294 = $111; //@line 79 "compress_utils.cpp"
  $295 = $112; //@line 79 "compress_utils.cpp"
  ___resumeException($294|0);
  // unreachable;
 }
 $93 = $280; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $289 = $93; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $92 = $289; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $290 = $92; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $291 = $102; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = $290; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $97 = $291; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $292 = $97; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $293 = ($292|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($293) {
  $294 = $111; //@line 79 "compress_utils.cpp"
  $295 = $112; //@line 79 "compress_utils.cpp"
  ___resumeException($294|0);
  // unreachable;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($292); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZdlPv($292); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $294 = $111; //@line 79 "compress_utils.cpp"
 $295 = $112; //@line 79 "compress_utils.cpp"
 ___resumeException($294|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $8 = sp;
 $11 = sp + 153|0;
 $22 = sp + 76|0;
 $23 = sp + 72|0;
 $39 = sp + 8|0;
 $37 = $0;
 $38 = $1;
 $40 = $37;
 $41 = ((($40)) + 4|0); //@line 2989 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = HEAP32[$41>>2]|0; //@line 2989 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $40; //@line 2989 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $36; //@line 2989 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $43; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $35; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = ((($44)) + 8|0); //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $45; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $34; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $46; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $47 = $33; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $48 = HEAP32[$47>>2]|0; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $48; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $32; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $49<<5; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ($42|0)==($50|0); //@line 2989 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($51) {
  $52 = ((($40)) + 4|0); //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $53 = HEAP32[$52>>2]|0; //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = (($53) + 1)|0; //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $40; //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $19 = $54; //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = $18; //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = (__ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($55)|0); //@line 2510 "/usr/lib/emscripten/system/include/libcxx/vector"
  $20 = $56; //@line 2510 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $19; //@line 2511 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = $20; //@line 2511 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = ($57>>>0)>($58>>>0); //@line 2511 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($59) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($55); //@line 2512 "/usr/lib/emscripten/system/include/libcxx/vector"
   // unreachable;
  }
  $16 = $55; //@line 2513 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $16; //@line 2513 "/usr/lib/emscripten/system/include/libcxx/vector"
  $15 = $60; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = $15; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = ((($61)) + 8|0); //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $62; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = $14; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $63; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $13; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = HEAP32[$64>>2]|0; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $65; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
  $66 = $12; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
  $67 = $66<<5; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $67; //@line 2513 "/usr/lib/emscripten/system/include/libcxx/vector"
  $68 = $21; //@line 2514 "/usr/lib/emscripten/system/include/libcxx/vector"
  $69 = $20; //@line 2514 "/usr/lib/emscripten/system/include/libcxx/vector"
  $70 = (($69>>>0) / 2)&-1; //@line 2514 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = ($68>>>0)>=($70>>>0); //@line 2514 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($71) {
   $72 = $20; //@line 2515 "/usr/lib/emscripten/system/include/libcxx/vector"
   $17 = $72; //@line 2515 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $73 = $21; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $74 = $73<<1; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$22>>2] = $74; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $75 = $19; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $2 = $75; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $76 = $2; //@line 2379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $77 = (($76) + 31)|0; //@line 2379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $78 = $77 & -32; //@line 2379 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$23>>2] = $78; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $9 = $22; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $10 = $23; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $79 = $9; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $80 = $10; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $6 = $79; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $7 = $80; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $81 = $6; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $82 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $3 = $8; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $4 = $81; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $5 = $82; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $83 = $4; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $84 = HEAP32[$83>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $85 = $5; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $86 = HEAP32[$85>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $87 = ($84>>>0)<($86>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $88 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $89 = $6; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $90 = $87 ? $88 : $89; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $91 = HEAP32[$90>>2]|0; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
   $17 = $91; //@line 2516 "/usr/lib/emscripten/system/include/libcxx/vector"
  }
  $92 = $17; //@line 2517 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEj($40,$92); //@line 2990 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $93 = ((($40)) + 4|0); //@line 2991 "/usr/lib/emscripten/system/include/libcxx/vector"
 $94 = HEAP32[$93>>2]|0; //@line 2991 "/usr/lib/emscripten/system/include/libcxx/vector"
 $95 = (($94) + 1)|0; //@line 2991 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$93>>2] = $95; //@line 2991 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $40; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $96 = $29; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = ((($96)) + 4|0); //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = HEAP32[$97>>2]|0; //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = (($98) - 1)|0; //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $96; //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $99; //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = $27; //@line 2311 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = HEAP32[$100>>2]|0; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = $28; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = (($102>>>0) / 32)&-1; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = (($101) + ($103<<2)|0); //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $28; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = (($105>>>0) % 32)&-1; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = 1 << $106; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $39; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $104; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $107; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = $24; //@line 2392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $25; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$108>>2] = $109; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $110 = ((($108)) + 4|0); //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $111 = $26; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$110>>2] = $111; //@line 76 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $112 = $38; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = HEAP8[$112>>0]|0; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = $113&1; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $39; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $114&1; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $115; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $30; //@line 2992 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = $31; //@line 59 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $118 = $117&1; //@line 59 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $119 = ((($116)) + 4|0); //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $120 = HEAP32[$119>>2]|0; //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if ($118) {
  $121 = HEAP32[$116>>2]|0; //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $122 = HEAP32[$121>>2]|0; //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $123 = $122 | $120; //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$121>>2] = $123; //@line 60 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 2993 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $124 = $120 ^ -1; //@line 62 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $125 = HEAP32[$116>>2]|0; //@line 62 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $126 = HEAP32[$125>>2]|0; //@line 62 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $127 = $126 & $124; //@line 62 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$125>>2] = $127; //@line 62 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 2993 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($2); //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0; //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = ($32|0)!=(0|0); //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($33)) {
  STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $29 = $31; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $29; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$34>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $34; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $35; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $27; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $37 = $28; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = ((($36)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = HEAP32[$38>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = ($37|0)!=($39|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($40)) {
   break;
  }
  $26 = $36; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $26; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ((($41)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $25; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = ((($36)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = HEAP32[$45>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = ((($46)) + -1|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$45>>2] = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $44; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $48; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $49; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $50; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $51; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $52; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $7 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $7; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = ((($53)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $54; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $6; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $55; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = $5; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = HEAP32[$31>>2]|0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $4; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $58; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = ((($59)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $60; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $61; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = HEAP32[$62>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = HEAP32[$58>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $63; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $64; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = (($65) - ($66))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $56; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $57; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $67; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $12; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $69 = $13; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $14; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $68; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $69; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $70; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $10; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $71; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $8; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($72); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return; //@line 880 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 881 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $42; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ((($50)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $51; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $40; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $53; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $39; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) - ($59))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = (($60) + 1)|0; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$35>>2] = $61; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $34; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($62)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $63; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = HEAP32[$35>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $36; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = ($64>>>0)>($65>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($66) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($62); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $32 = $62; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $32; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $67; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $31; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $68; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = ((($69)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $70; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = $29; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $71; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $28; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = HEAP32[$72>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $74 = HEAP32[$68>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = $73; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $74; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = (($75) - ($76))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $77; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = $37; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $36; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = (($79>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = ($78>>>0)>=($80>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($81) {
  $82 = $36; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $82; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $83 = $37; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $84 = $83<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$38>>2] = $84; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $38; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $35; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $85 = $25; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $86 = $26; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $22 = $85; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $23 = $86; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $87 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $19 = $24; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $20 = $87; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $21 = $88; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $89 = $20; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $90 = HEAP32[$89>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $91 = $21; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $92 = HEAP32[$91>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $93 = ($90>>>0)<($92>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $94 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $95 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $96 = $93 ? $94 : $95; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $97 = HEAP32[$96>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $97; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $98 = $33; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = $18; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = ((($99)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = HEAP32[$100>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = HEAP32[$99>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = $101; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = $102; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = (($103) - ($104))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $45; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($46,$98,$105,$106); //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = $45; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = ((($46)) + 8|0); //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = HEAP32[$108>>2]|0; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $109; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $111 = $44; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $111; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $107; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $110; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $112; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $114 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $115 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $115; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $116 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $113; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $114; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $116; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $119; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $117; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $118; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $120; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $122; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $124 = HEAP8[$123>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP8[$121>>0] = $124; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = ((($46)) + 8|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = HEAP32[$125>>2]|0; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $127 = ((($126)) + 1|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$125>>2] = $127; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(45,($49|0),($46|0)); //@line 1577 "/usr/lib/emscripten/system/include/libcxx/vector"
 $128 = __THREW__; __THREW__ = 0;
 $129 = $128&1;
 if ($129) {
  $130 = ___cxa_find_matching_catch_2()|0;
  $131 = tempRet0;
  $47 = $130; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $131; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $132 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $133 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($132|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $33 = $30; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $24 = $32; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$25>>2] = 0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $26 = $33; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $34 = $24; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $23 = $25; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $23; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $36 = HEAP32[$35>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $37 = $26; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $37; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $38 = $17; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $34; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$21>>2] = $36; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $38; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $39 = $20; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $21; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $40 = $19; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $41 = HEAP32[$40>>2]|0; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$39>>2] = $41; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = ((($39)) + 4|0); //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = $22; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $43; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $18; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$42>>2] = $44; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $46 = ($45|0)!=(0); //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if ($46) {
  $6 = $31; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $47 = $6; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $48 = ((($47)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $5 = $48; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $49 = $5; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $4 = $49; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $4; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = ((($50)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = HEAP32[$51>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $12 = $52; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $13 = $53; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = $12; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $55 = $13; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $54; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $55; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $56 = $9; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $56; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $10; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $57; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $7; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $59 = (__Znwj($58)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $60 = $59;
 } else {
  $60 = 0;
 }
 HEAP32[$31>>2] = $60; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $61 = HEAP32[$31>>2]|0; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = $29; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $63 = (($61) + ($62)|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = ((($31)) + 8|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$64>>2] = $63; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = ((($31)) + 4|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$65>>2] = $63; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $66 = HEAP32[$31>>2]|0; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $67 = $28; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $68 = (($66) + ($67)|0); //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $16 = $31; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $69 = $16; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = ((($69)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $15 = $70; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = $15; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $14 = $71; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$72>>2] = $68; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 314 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 120|0;
 $13 = sp + 96|0;
 $25 = sp + 48|0;
 $36 = $0;
 $37 = $1;
 $38 = $36;
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($38); //@line 891 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $38; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $35; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = ((($39)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $40; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $34; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $41; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $33; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = HEAP32[$38>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ((($38)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $37; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($46)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $42; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $43; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $45; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $47; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $29; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $49 = $28; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $48; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = $49; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $52 = (($50) - ($51))|0; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $52; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $31; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $54 = $30; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $55 = HEAP32[$54>>2]|0; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = (0 - ($53))|0; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = (($55) + ($56)|0); //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$54>>2] = $57; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = $31; //@line 1637 "/usr/lib/emscripten/system/include/libcxx/memory"
 $59 = ($58|0)>(0); //@line 1637 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($59) {
  $60 = $30; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = HEAP32[$60>>2]|0; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = $28; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $31; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  _memcpy(($61|0),($62|0),($63|0))|0; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $64 = $37; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = ((($64)) + 4|0); //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $38; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $65; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $5; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $66; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $67 = $4; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $68 = HEAP32[$67>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$7>>2] = $68; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $69 = $6; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $2 = $69; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $70 = $2; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $71 = HEAP32[$70>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $72 = $5; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$72>>2] = $71; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $7; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $73 = $3; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $74 = HEAP32[$73>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $75 = $6; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$75>>2] = $74; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $76 = ((($38)) + 4|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $37; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = ((($77)) + 8|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $76; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $78; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $11; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $10 = $79; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $80 = $10; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $81 = HEAP32[$80>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$13>>2] = $81; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $82 = $12; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $8 = $82; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $83 = $8; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $84 = HEAP32[$83>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $85 = $11; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$85>>2] = $84; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $9 = $13; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $86 = $9; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $87 = HEAP32[$86>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $88 = $12; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$88>>2] = $87; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $16 = $38; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $89 = $16; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = ((($89)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $90; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = $15; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $91; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $92 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $93 = $37; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $93; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $94 = $19; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $95 = ((($94)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $95; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $96 = $18; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $17 = $96; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $97 = $17; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $92; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $97; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $23; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = $98; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $99 = $22; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $100 = HEAP32[$99>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$25>>2] = $100; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $101 = $24; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $101; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $102 = $20; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $103 = HEAP32[$102>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $104 = $23; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$104>>2] = $103; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = $25; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $105 = $21; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $106 = HEAP32[$105>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $107 = $24; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$107>>2] = $106; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $108 = $37; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = ((($108)) + 4|0); //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = HEAP32[$109>>2]|0; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = $37; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$111>>2] = $110; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $38; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $26; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = ((($112)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = HEAP32[$113>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = HEAP32[$112>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $114; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = $115; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = (($116) - ($117))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE14__annotate_newEj($38,$118); //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $38; //@line 898 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 899 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $36 = $33; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $37 = ((($36)) + 4|0); //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = HEAP32[$37>>2]|0; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $36; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $31 = $38; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $39 = $30; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $40 = $31; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $27 = $39; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $40; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $41 = $27; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $42 = $28; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $43 = ((($41)) + 8|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = HEAP32[$43>>2]|0; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = ($42|0)!=($44|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($45)) {
   break;
  }
  $26 = $41; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $46 = $26; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $47 = ((($46)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $25 = $47; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $48 = $25; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $24 = $48; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = ((($49)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = HEAP32[$50>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($41)) + 8|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = HEAP32[$52>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = ((($53)) + -1|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$52>>2] = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $51; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $21 = $55; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $56 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $56; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $57; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $58; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $59; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $60 = HEAP32[$35>>2]|0; //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $61 = ($60|0)!=(0|0); //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if (!($61)) {
  STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $14 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = $14; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $63 = ((($62)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = $63; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = $13; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $12 = $64; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = ((($65)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = HEAP32[$66>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = HEAP32[$35>>2]|0; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $4 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $69 = $4; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $3 = $69; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = $3; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = ((($70)) + 12|0); //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $2 = $71; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = $2; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $1 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = HEAP32[$73>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = HEAP32[$69>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $76 = $74; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $77 = $75; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = (($76) - ($77))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $9 = $67; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $10 = $68; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $11 = $78; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = $9; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $80 = $10; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $81 = $11; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $79; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $80; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $81; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $82 = $7; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $82; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $83 = $5; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($83); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $17; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = ((($22)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $16; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $24; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $15; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $25; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $13; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $26; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $27; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$19>>2] = -1; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = (4294967295 / 2)&-1; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $28; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $19; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $20; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $7; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $30 = $8; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $4 = $29; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $5 = $30; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $31 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $32 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $1 = $6; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $2 = $31; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $3 = $32; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = $2; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = HEAP32[$33>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = $3; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $36 = HEAP32[$35>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $37 = ($34>>>0)<($36>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $38 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $39 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $40 = $37 ? $38 : $39; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $41 = HEAP32[$40>>2]|0; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($41|0); //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $19; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $17; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = HEAP32[$25>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $26; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $5; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $28; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $4; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $29; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = ((($30)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $31; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $32; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = HEAP32[$33>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$29>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $34; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = (($36) - ($37))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($27) + ($38)|0); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $7; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = HEAP32[$40>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $41; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $6; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $8; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ((($43)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$43>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $45; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($47) - ($48))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($42) + ($49)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $10; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$51>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $52; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $15; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $54; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $14; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $55; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $13; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = ((($56)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $57; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $12; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $58; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $59 = $11; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $60 = HEAP32[$59>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = HEAP32[$55>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $60; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $61; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = (($62) - ($63))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = (($53) + ($64)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($21,$24,$39,$50,$65); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 850 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $19; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = HEAP32[$23>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $24; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $17; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = HEAP32[$26>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $6; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $29; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = ((($31)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $32; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $33; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = HEAP32[$34>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($37) - ($38))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($28) + ($39)|0); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $8; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = HEAP32[$41>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $42; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $13; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $44; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $12; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $45; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $11; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($46)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $47; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $10; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $48; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $49 = $9; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = HEAP32[$49>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = HEAP32[$45>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $50; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($52) - ($53))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($43) + ($54)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $15; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$56>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $57; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $59 = $21; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) + ($59)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($22,$25,$40,$55,$60); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 845 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return; //@line 839 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0; //@line 2746 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = ($17|0)!=(0|0); //@line 2746 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($18)) {
  $8 = $16; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $14 = $16; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $14; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ((($19)) + 8|0); //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $20; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $13; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $21; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = HEAP32[$16>>2]|0; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $16; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $11; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = ((($24)) + 8|0); //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $25; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $10; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $26; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $9; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = HEAP32[$27>>2]|0; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $22; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $23; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $28; //@line 2747 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $5; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $6; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $7; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $29; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $30; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $31; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $3; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $32; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $1; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($33); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 $8 = $16; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $18 = sp + 136|0;
 $19 = sp + 8|0;
 $22 = sp + 124|0;
 $23 = sp + 206|0;
 $24 = sp;
 $30 = sp + 205|0;
 $44 = sp + 40|0;
 $45 = sp + 204|0;
 $48 = sp + 24|0;
 $49 = sp + 16|0;
 $42 = $0;
 $43 = $1;
 $50 = $42;
 $51 = $43; //@line 2937 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $50; //@line 2937 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 2937 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $40; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = ((($53)) + 8|0); //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $54; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $39; //@line 2150 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $55; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = $38; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = HEAP32[$56>>2]|0; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $57; //@line 2255 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $37; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $58<<5; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = ($51>>>0)>($59>>>0); //@line 2937 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($60)) {
  STACKTOP = sp;return; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $36 = $50; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $36; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = ((($61)) + 8|0); //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $62; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $35; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $63; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = $34; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $45; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $64; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $44; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $45; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $28; //@line 2939 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $65; //@line 2171 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$65>>2] = 0; //@line 2565 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = ((($65)) + 4|0); //@line 2566 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$66>>2] = 0; //@line 2566 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ((($65)) + 8|0); //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $29; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $30; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $68; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 ;HEAP8[$24>>0]=HEAP8[$30>>0]|0; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $67; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$22>>2] = 0; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $21; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $22; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $20; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $71 = HEAP32[$70>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = $24; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $69; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$18>>2] = $71; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $17; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $19; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $18; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $15; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $74 = HEAP32[$73>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$72>>2] = $74; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $75 = $43; //@line 2940 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(46,($44|0),($75|0)); //@line 2940 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $106 = ___cxa_find_matching_catch_2()|0;
  $107 = tempRet0;
  $46 = $106; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = $107; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($44); //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  $108 = $46; //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  $109 = $47; //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($108|0);
  // unreachable;
 }
 $13 = $50; //@line 2941 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = $13; //@line 2941 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $78; //@line 2267 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = 0; //@line 2267 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $11; //@line 2267 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = HEAP32[$79>>2]|0; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $12; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = (($81>>>0) / 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = (($80) + ($82<<2)|0); //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $84 = $12; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $85 = (($84>>>0) % 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $48; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $83; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $85; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $86 = $8; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $87 = $9; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$86>>2] = $87; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $88 = ((($86)) + 4|0); //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $89 = $10; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$88>>2] = $89; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $7 = $50; //@line 2941 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = $7; //@line 2941 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = ((($90)) + 4|0); //@line 2273 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = HEAP32[$91>>2]|0; //@line 2273 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $90; //@line 2273 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $92; //@line 2273 "/usr/lib/emscripten/system/include/libcxx/vector"
 $93 = $5; //@line 2273 "/usr/lib/emscripten/system/include/libcxx/vector"
 $94 = HEAP32[$93>>2]|0; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $95 = $6; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $96 = (($95>>>0) / 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = (($94) + ($96<<2)|0); //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $6; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = (($98>>>0) % 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $49; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $97; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $99; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = $2; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = $3; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$100>>2] = $101; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $102 = ((($100)) + 4|0); //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $103 = $4; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$102>>2] = $103; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 __THREW__ = 0;
 invoke_viii(47,($44|0),($48|0),($49|0)); //@line 2941 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if ($105) {
  $106 = ___cxa_find_matching_catch_2()|0;
  $107 = tempRet0;
  $46 = $106; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = $107; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($44); //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  $108 = $46; //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  $109 = $47; //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($108|0);
  // unreachable;
 }
 __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($50,$44); //@line 2942 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $50; //@line 2943 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($44); //@line 2944 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 2945 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $19 = $17; //@line 2472 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = (__ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($18)|0); //@line 2472 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = ($19>>>0)>($20>>>0); //@line 2472 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($21) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($18); //@line 2473 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $22 = $17; //@line 2474 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $22; //@line 2474 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $15; //@line 2165 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = (($23) - 1)|0; //@line 2165 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = (($24>>>0) / 32)&-1; //@line 2165 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = (($25) + 1)|0; //@line 2165 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $26; //@line 2474 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $18; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $4; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 8|0); //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $28; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $3; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $29; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $2; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $17; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $30; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $31; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $10; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $11; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $32; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $33; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $7; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $8; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $34; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $36 = ($35>>>0)>(1073741823); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($36) {
  $37 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt9bad_allocC2Ev($37); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  ___cxa_throw(($37|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
 } else {
  $38 = $8; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $38<<2; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $39; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $5; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $41 = (__Znwj($40)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  HEAP32[$18>>2] = $41; //@line 2475 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ((($18)) + 4|0); //@line 2476 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$42>>2] = 0; //@line 2476 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $17; //@line 2477 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $18; //@line 2477 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = $14; //@line 2477 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = ((($44)) + 8|0); //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $45; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $13; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $46; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $12; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$47>>2] = $43; //@line 2477 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 2478 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $16 = sp;
 $19 = sp + 184|0;
 $20 = sp + 176|0;
 $21 = sp + 252|0;
 $36 = sp + 112|0;
 $37 = sp + 104|0;
 $38 = sp + 96|0;
 $39 = sp + 88|0;
 $40 = sp + 80|0;
 $41 = sp + 72|0;
 $46 = sp + 48|0;
 $47 = sp + 40|0;
 $48 = sp + 32|0;
 $49 = sp + 24|0;
 $50 = sp + 16|0;
 $51 = sp + 8|0;
 $44 = $0;
 $52 = $44;
 $53 = ((($52)) + 4|0); //@line 2542 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = HEAP32[$53>>2]|0; //@line 2542 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $54; //@line 2542 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $46; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $1; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $42; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $43; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $57 = HEAP32[$56>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$55>>2] = $57; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $58 = ((($55)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $59 = $43; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $60 = ((($59)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $61 = HEAP32[$60>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$58>>2] = $61; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $22 = $47; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $2; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $22; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $23; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $64 = HEAP32[$63>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$62>>2] = $64; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $65 = ((($62)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $66 = $23; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $67 = ((($66)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $68 = HEAP32[$67>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$65>>2] = $68; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $17 = $19; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $18 = $46; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $69 = $17; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $70 = $18; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $71 = HEAP32[$70>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$69>>2] = $71; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $72 = ((($69)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $73 = $18; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $74 = ((($73)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $75 = HEAP32[$74>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$72>>2] = $75; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $12 = $20; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $13 = $47; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $76 = $12; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $77 = $13; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $78 = HEAP32[$77>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$76>>2] = $78; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $79 = ((($76)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $80 = $13; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $81 = ((($80)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $82 = HEAP32[$81>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$79>>2] = $82; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 ;HEAP8[$16>>0]=HEAP8[$21>>0]|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $14 = $20; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $15 = $19; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $83 = $14; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $84 = HEAP32[$83>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $85 = $15; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $86 = HEAP32[$85>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $87 = $84; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $88 = $86; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $89 = (($87) - ($88))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $90 = (($89|0) / 4)&-1; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $91 = $90<<5; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $92 = $14; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $93 = ((($92)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $94 = HEAP32[$93>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $95 = (($91) + ($94))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $96 = $15; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $97 = ((($96)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $98 = HEAP32[$97>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $99 = (($95) - ($98))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $100 = ((($52)) + 4|0); //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = HEAP32[$100>>2]|0; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = (($101) + ($99))|0; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$100>>2] = $102; //@line 2543 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $48; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $1; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = $3; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = $4; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $105 = HEAP32[$104>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$103>>2] = $105; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $106 = ((($103)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $107 = $4; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $108 = ((($107)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $109 = HEAP32[$108>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$106>>2] = $109; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $5 = $49; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $2; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $5; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = $6; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $112 = HEAP32[$111>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$110>>2] = $112; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $113 = ((($110)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $114 = $6; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $115 = ((($114)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $116 = HEAP32[$115>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$113>>2] = $116; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $117 = $45; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $52; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $117; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = $10; //@line 2544 "/usr/lib/emscripten/system/include/libcxx/vector"
 $119 = HEAP32[$118>>2]|0; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $120 = $11; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $121 = (($120>>>0) / 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $122 = (($119) + ($121<<2)|0); //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $123 = $11; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $124 = (($123>>>0) % 32)&-1; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $50; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $122; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $124; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $125 = $7; //@line 2398 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = $8; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$125>>2] = $126; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $127 = ((($125)) + 4|0); //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $128 = $9; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$127>>2] = $128; //@line 1222 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $129 = ((($48)) + 4|0); //@line 539 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $130 = HEAP32[$129>>2]|0; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $131 = ((($50)) + 4|0); //@line 539 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $132 = HEAP32[$131>>2]|0; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $133 = ($130|0)==($132|0); //@line 539 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if ($133) {
  $34 = $36; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $35 = $48; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $134 = $34; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $135 = $35; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $136 = HEAP32[$135>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$134>>2] = $136; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $137 = ((($134)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $138 = $35; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $139 = ((($138)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $140 = HEAP32[$139>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$137>>2] = $140; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $32 = $37; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $33 = $49; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $141 = $32; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $142 = $33; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $143 = HEAP32[$142>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$141>>2] = $143; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $144 = ((($141)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $145 = $33; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $146 = ((($145)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $147 = HEAP32[$146>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$144>>2] = $147; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $24 = $38; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $25 = $50; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $148 = $24; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $149 = $25; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $150 = HEAP32[$149>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$148>>2] = $150; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $151 = ((($148)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $152 = $25; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $153 = ((($152)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $154 = HEAP32[$153>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$151>>2] = $154; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($51,$36,$37,$38); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $26 = $39; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $27 = $48; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $155 = $26; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $156 = $27; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $157 = HEAP32[$156>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$155>>2] = $157; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $158 = ((($155)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $159 = $27; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $160 = ((($159)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $161 = HEAP32[$160>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$158>>2] = $161; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $28 = $40; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $29 = $49; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $162 = $28; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $163 = $29; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $164 = HEAP32[$163>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$162>>2] = $164; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $165 = ((($162)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $166 = $29; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $167 = ((($166)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $168 = HEAP32[$167>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$165>>2] = $168; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $30 = $41; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $31 = $50; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $169 = $30; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $170 = $31; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $171 = HEAP32[$170>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$169>>2] = $171; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $172 = ((($169)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $173 = $31; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $174 = ((($173)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $175 = HEAP32[$174>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$172>>2] = $175; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($51,$39,$40,$41); //@line 541 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 116|0;
 $19 = sp + 68|0;
 $28 = sp;
 $34 = sp + 12|0;
 $37 = sp + 140|0;
 $35 = $0;
 $36 = $1;
 $38 = $35;
 $39 = $36; //@line 3155 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $38; //@line 3155 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $39; //@line 3155 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $32; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $31 = $40; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $41 = $31; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $42 = HEAP32[$41>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$34>>2] = $42; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $43 = $33; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $29 = $43; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $44 = $29; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $45 = HEAP32[$44>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $46 = $32; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$46>>2] = $45; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $30 = $34; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $47 = $30; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $48 = HEAP32[$47>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $49 = $33; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$49>>2] = $48; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $50 = ((($38)) + 4|0); //@line 3156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $36; //@line 3156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = ((($51)) + 4|0); //@line 3156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $50; //@line 3156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $52; //@line 3156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $5; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $53; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $54 = $4; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $55 = HEAP32[$54>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$7>>2] = $55; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $56 = $6; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $2 = $56; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $57 = $2; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $58 = HEAP32[$57>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $59 = $5; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$59>>2] = $58; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $7; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $60 = $3; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $61 = HEAP32[$60>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $62 = $6; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$62>>2] = $61; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $10 = $38; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $10; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = ((($63)) + 8|0); //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $64; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $9; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $65; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = $36; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $67; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $13; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = ((($68)) + 8|0); //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $69; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $12; //@line 2147 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $70; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $11; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $66; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $71; //@line 3157 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = $17; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $16 = $72; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $73 = $16; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $74 = HEAP32[$73>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$19>>2] = $74; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $75 = $18; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $14 = $75; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $76 = $14; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $77 = HEAP32[$76>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $78 = $17; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$78>>2] = $77; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $15 = $19; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $79 = $15; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $80 = HEAP32[$79>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $81 = $18; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$81>>2] = $80; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = $38; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = $22; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ((($82)) + 8|0); //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $83; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $84 = $21; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $84; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $85 = $20; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $86 = $36; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $86; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $87 = $25; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $88 = ((($87)) + 8|0); //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $88; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $89 = $24; //@line 2153 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $89; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $90 = $23; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$28>>0]=HEAP8[$37>>0]|0; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $85; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $90; //@line 3158 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 3160 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $5 = sp + 48|0;
 $11 = $0;
 $14 = $11;
 $9 = $14; //@line 2497 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $9; //@line 2497 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = ((($15)) + 8|0); //@line 2156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $16; //@line 2156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $8; //@line 2156 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $17; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $7; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $18; //@line 2497 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $4; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$3>>0]=HEAP8[$5>>0]|0; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $19; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $2; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $20; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = 1073741823; //@line 2497 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = (4294967295 / 2)&-1; //@line 2498 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $21; //@line 2498 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $13; //@line 2499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = (($22>>>0) / 32)&-1; //@line 2499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $12; //@line 2499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = ($23>>>0)<=($24>>>0); //@line 2499 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($25) {
  $26 = $13; //@line 2500 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $26; //@line 2500 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $10; //@line 2502 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return ($30|0); //@line 2502 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $27 = $12; //@line 2501 "/usr/lib/emscripten/system/include/libcxx/vector"
  $6 = $27; //@line 2501 "/usr/lib/emscripten/system/include/libcxx/vector"
  $28 = $6; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
  $29 = $28<<5; //@line 2162 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $29; //@line 2501 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $10; //@line 2502 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return ($30|0); //@line 2502 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 return (0)|0;
}
function __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp;
 $12 = sp + 92|0;
 $19 = sp + 36|0;
 $22 = sp + 24|0;
 $17 = $2; //@line 416 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $18 = $1; //@line 416 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $28 = $17; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $29 = HEAP32[$28>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $30 = $18; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $31 = HEAP32[$30>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $32 = $29; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $33 = $31; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $34 = (($32) - ($33))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $35 = (($34|0) / 4)&-1; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $36 = $35<<5; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $37 = $17; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $38 = ((($37)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $39 = HEAP32[$38>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $40 = (($36) + ($39))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $41 = $18; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $42 = ((($41)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $43 = HEAP32[$42>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $44 = (($40) - ($43))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$19>>2] = $44; //@line 416 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $45 = HEAP32[$19>>2]|0; //@line 417 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $46 = ($45|0)>(0); //@line 417 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if (!($46)) {
  $15 = $0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $16 = $3; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $144 = $15; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $145 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $146 = HEAP32[$145>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$144>>2] = $146; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $147 = ((($144)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $148 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $149 = ((($148)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $150 = HEAP32[$149>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$147>>2] = $150; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $47 = ((($1)) + 4|0); //@line 420 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $48 = HEAP32[$47>>2]|0; //@line 420 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $49 = ($48|0)!=(0); //@line 420 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if ($49) {
  $50 = ((($1)) + 4|0); //@line 422 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $51 = HEAP32[$50>>2]|0; //@line 422 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $52 = (32 - ($51))|0; //@line 422 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $20 = $52; //@line 422 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $53 = $20; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$22>>2] = $53; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $10 = $22; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $11 = $19; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $54 = $10; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $55 = $11; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $7 = $54; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $8 = $55; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $56 = $8; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $57 = $7; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $4 = $9; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $5 = $56; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $6 = $57; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $58 = $5; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $59 = HEAP32[$58>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $60 = $6; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $61 = HEAP32[$60>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $62 = ($59|0)<($61|0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $63 = $8; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $64 = $7; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $65 = $62 ? $63 : $64; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $66 = HEAP32[$65>>2]|0; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $21 = $66; //@line 423 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $67 = $21; //@line 424 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $68 = HEAP32[$19>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $69 = (($68) - ($67))|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$19>>2] = $69; //@line 424 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $70 = ((($1)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $71 = HEAP32[$70>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $72 = -1 << $71; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $73 = $20; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $74 = $21; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $75 = (($73) - ($74))|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $76 = -1 >>> $75; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $77 = $72 & $76; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $23 = $77; //@line 425 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $78 = HEAP32[$1>>2]|0; //@line 426 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $79 = HEAP32[$78>>2]|0; //@line 426 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $80 = $23; //@line 426 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $81 = $79 & $80; //@line 426 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $24 = $81; //@line 426 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $82 = $23; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $83 = $82 ^ -1; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $84 = HEAP32[$3>>2]|0; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $85 = HEAP32[$84>>2]|0; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $86 = $85 & $83; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$84>>2] = $86; //@line 427 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $87 = $24; //@line 428 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $88 = HEAP32[$3>>2]|0; //@line 428 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $89 = HEAP32[$88>>2]|0; //@line 428 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $90 = $89 | $87; //@line 428 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$88>>2] = $90; //@line 428 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $91 = $21; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $92 = ((($3)) + 4|0); //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $93 = HEAP32[$92>>2]|0; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $94 = (($91) + ($93))|0; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $95 = (($94>>>0) / 32)&-1; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $96 = HEAP32[$3>>2]|0; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $97 = (($96) + ($95<<2)|0); //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$3>>2] = $97; //@line 429 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $98 = $21; //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $99 = ((($3)) + 4|0); //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $100 = HEAP32[$99>>2]|0; //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $101 = (($98) + ($100))|0; //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $102 = (($101>>>0) % 32)&-1; //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $103 = ((($3)) + 4|0); //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$103>>2] = $102; //@line 430 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $104 = HEAP32[$1>>2]|0; //@line 431 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $105 = ((($104)) + 4|0); //@line 431 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$1>>2] = $105; //@line 431 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $106 = HEAP32[$19>>2]|0; //@line 436 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $107 = (($106>>>0) / 32)&-1; //@line 436 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $25 = $107; //@line 436 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $108 = HEAP32[$3>>2]|0; //@line 437 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $13 = $108; //@line 437 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $109 = $13; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $110 = HEAP32[$1>>2]|0; //@line 438 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $14 = $110; //@line 438 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $111 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $112 = $25; //@line 439 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $113 = $112<<2; //@line 439 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 _memmove(($109|0),($111|0),($113|0))|0; //@line 437 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $114 = $25; //@line 440 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $115 = $114<<5; //@line 440 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $116 = HEAP32[$19>>2]|0; //@line 440 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $117 = (($116) - ($115))|0; //@line 440 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$19>>2] = $117; //@line 440 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $118 = $25; //@line 441 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $119 = HEAP32[$3>>2]|0; //@line 441 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $120 = (($119) + ($118<<2)|0); //@line 441 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$3>>2] = $120; //@line 441 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $121 = HEAP32[$19>>2]|0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $122 = ($121|0)>(0); //@line 443 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if (!($122)) {
  $15 = $0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $16 = $3; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $144 = $15; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $145 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $146 = HEAP32[$145>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$144>>2] = $146; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $147 = ((($144)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $148 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $149 = ((($148)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $150 = HEAP32[$149>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$147>>2] = $150; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $123 = $25; //@line 445 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $124 = HEAP32[$1>>2]|0; //@line 445 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $125 = (($124) + ($123<<2)|0); //@line 445 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$1>>2] = $125; //@line 445 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $126 = HEAP32[$19>>2]|0; //@line 446 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $127 = (32 - ($126))|0; //@line 446 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $128 = -1 >>> $127; //@line 446 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $26 = $128; //@line 446 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $129 = HEAP32[$1>>2]|0; //@line 447 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $130 = HEAP32[$129>>2]|0; //@line 447 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $131 = $26; //@line 447 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $132 = $130 & $131; //@line 447 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $27 = $132; //@line 447 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $133 = $26; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $134 = $133 ^ -1; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $135 = HEAP32[$3>>2]|0; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $136 = HEAP32[$135>>2]|0; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $137 = $136 & $134; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$135>>2] = $137; //@line 448 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $138 = $27; //@line 449 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $139 = HEAP32[$3>>2]|0; //@line 449 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $140 = HEAP32[$139>>2]|0; //@line 449 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $141 = $140 | $138; //@line 449 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$139>>2] = $141; //@line 449 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $142 = HEAP32[$19>>2]|0; //@line 450 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $143 = ((($3)) + 4|0); //@line 450 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$143>>2] = $142; //@line 450 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $15 = $0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $16 = $3; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $144 = $15; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $145 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $146 = HEAP32[$145>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$144>>2] = $146; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $147 = ((($144)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $148 = $16; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $149 = ((($148)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $150 = HEAP32[$149>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$147>>2] = $150; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 STACKTOP = sp;return; //@line 453 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
}
function __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $9 = sp + 16|0;
 $12 = sp + 182|0;
 $18 = sp + 8|0;
 $21 = sp + 181|0;
 $27 = sp;
 $30 = sp + 180|0;
 $35 = sp + 76|0;
 $38 = sp + 64|0;
 $41 = sp + 52|0;
 $43 = sp + 44|0;
 $49 = sp + 20|0;
 $33 = $2; //@line 465 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $34 = $1; //@line 465 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $50 = $33; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $51 = HEAP32[$50>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $52 = $34; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $53 = HEAP32[$52>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $54 = $51; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $55 = $53; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $56 = (($54) - ($55))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $57 = (($56|0) / 4)&-1; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $58 = $57<<5; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $59 = $33; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $60 = ((($59)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $61 = HEAP32[$60>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $62 = (($58) + ($61))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $63 = $34; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $64 = ((($63)) + 4|0); //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $65 = HEAP32[$64>>2]|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $66 = (($62) - ($65))|0; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$35>>2] = $66; //@line 465 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $67 = HEAP32[$35>>2]|0; //@line 466 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $68 = ($67|0)>(0); //@line 466 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if (!($68)) {
  $31 = $0; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $32 = $3; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $312 = $31; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $313 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $314 = HEAP32[$313>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$312>>2] = $314; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $315 = ((($312)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $316 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $317 = ((($316)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $318 = HEAP32[$317>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$315>>2] = $318; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $69 = ((($1)) + 4|0); //@line 469 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $70 = HEAP32[$69>>2]|0; //@line 469 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $71 = ($70|0)!=(0); //@line 469 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if ($71) {
  $72 = ((($1)) + 4|0); //@line 471 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $73 = HEAP32[$72>>2]|0; //@line 471 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $74 = (32 - ($73))|0; //@line 471 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $36 = $74; //@line 471 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $75 = $36; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$38>>2] = $75; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $10 = $38; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $11 = $35; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $76 = $10; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $77 = $11; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $7 = $76; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $8 = $77; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $78 = $8; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $79 = $7; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $4 = $9; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $5 = $78; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $6 = $79; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $80 = $5; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $81 = HEAP32[$80>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $82 = $6; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $83 = HEAP32[$82>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $84 = ($81|0)<($83|0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $85 = $8; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $86 = $7; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $87 = $84 ? $85 : $86; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = HEAP32[$87>>2]|0; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $37 = $88; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $89 = $37; //@line 473 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $90 = HEAP32[$35>>2]|0; //@line 473 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $91 = (($90) - ($89))|0; //@line 473 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$35>>2] = $91; //@line 473 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $92 = ((($1)) + 4|0); //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $93 = HEAP32[$92>>2]|0; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $94 = -1 << $93; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $95 = $36; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $96 = $37; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $97 = (($95) - ($96))|0; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $98 = -1 >>> $97; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $99 = $94 & $98; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $39 = $99; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $100 = HEAP32[$1>>2]|0; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $101 = HEAP32[$100>>2]|0; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $102 = $39; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $103 = $101 & $102; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $40 = $103; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $104 = ((($3)) + 4|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $105 = HEAP32[$104>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $106 = (32 - ($105))|0; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$41>>2] = $106; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $107 = $37; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$43>>2] = $107; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $19 = $43; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $20 = $41; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $108 = $19; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $109 = $20; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $16 = $108; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $17 = $109; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $110 = $17; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $111 = $16; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $13 = $18; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $14 = $110; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $15 = $111; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $112 = $14; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $113 = HEAP32[$112>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $114 = $15; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $115 = HEAP32[$114>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $116 = ($113>>>0)<($115>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $117 = $17; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $118 = $16; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $119 = $116 ? $117 : $118; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $120 = HEAP32[$119>>2]|0; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $42 = $120; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $121 = ((($3)) + 4|0); //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $122 = HEAP32[$121>>2]|0; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $123 = -1 << $122; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $124 = HEAP32[$41>>2]|0; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $125 = $42; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $126 = (($124) - ($125))|0; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $127 = -1 >>> $126; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $128 = $123 & $127; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $39 = $128; //@line 478 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $129 = $39; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $130 = $129 ^ -1; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $131 = HEAP32[$3>>2]|0; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $132 = HEAP32[$131>>2]|0; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $133 = $132 & $130; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$131>>2] = $133; //@line 479 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $134 = ((($3)) + 4|0); //@line 480 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $135 = HEAP32[$134>>2]|0; //@line 480 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $136 = ((($1)) + 4|0); //@line 480 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $137 = HEAP32[$136>>2]|0; //@line 480 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $138 = ($135>>>0)>($137>>>0); //@line 480 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $139 = $40; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  if ($138) {
   $140 = ((($3)) + 4|0); //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $141 = HEAP32[$140>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $142 = ((($1)) + 4|0); //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $143 = HEAP32[$142>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $144 = (($141) - ($143))|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $145 = $139 << $144; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $146 = HEAP32[$3>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $147 = HEAP32[$146>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $148 = $147 | $145; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$146>>2] = $148; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  } else {
   $149 = ((($1)) + 4|0); //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $150 = HEAP32[$149>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $151 = ((($3)) + 4|0); //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $152 = HEAP32[$151>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $153 = (($150) - ($152))|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $154 = $139 >>> $153; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $155 = HEAP32[$3>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $156 = HEAP32[$155>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $157 = $156 | $154; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$155>>2] = $157; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  }
  $158 = $42; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $159 = ((($3)) + 4|0); //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $160 = HEAP32[$159>>2]|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $161 = (($158) + ($160))|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $162 = (($161>>>0) / 32)&-1; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $163 = HEAP32[$3>>2]|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $164 = (($163) + ($162<<2)|0); //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$3>>2] = $164; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $165 = $42; //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $166 = ((($3)) + 4|0); //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $167 = HEAP32[$166>>2]|0; //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $168 = (($165) + ($167))|0; //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $169 = (($168>>>0) % 32)&-1; //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $170 = ((($3)) + 4|0); //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$170>>2] = $169; //@line 485 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $171 = $42; //@line 486 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $172 = $37; //@line 486 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $173 = (($172) - ($171))|0; //@line 486 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $37 = $173; //@line 486 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $174 = $37; //@line 487 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $175 = ($174|0)>(0); //@line 487 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  if ($175) {
   $176 = $37; //@line 489 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $177 = (32 - ($176))|0; //@line 489 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $178 = -1 >>> $177; //@line 489 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $39 = $178; //@line 489 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $179 = $39; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $180 = $179 ^ -1; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $181 = HEAP32[$3>>2]|0; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $182 = HEAP32[$181>>2]|0; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $183 = $182 & $180; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$181>>2] = $183; //@line 490 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $184 = $40; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $185 = ((($1)) + 4|0); //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $186 = HEAP32[$185>>2]|0; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $187 = $42; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $188 = (($186) + ($187))|0; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $189 = $184 >>> $188; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $190 = HEAP32[$3>>2]|0; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $191 = HEAP32[$190>>2]|0; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $192 = $191 | $189; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$190>>2] = $192; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $193 = $37; //@line 492 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   $194 = ((($3)) + 4|0); //@line 492 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
   HEAP32[$194>>2] = $193; //@line 492 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  }
  $195 = HEAP32[$1>>2]|0; //@line 494 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $196 = ((($195)) + 4|0); //@line 494 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$1>>2] = $196; //@line 494 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $197 = ((($3)) + 4|0); //@line 499 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $198 = HEAP32[$197>>2]|0; //@line 499 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $199 = (32 - ($198))|0; //@line 499 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $44 = $199; //@line 499 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $200 = ((($3)) + 4|0); //@line 500 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $201 = HEAP32[$200>>2]|0; //@line 500 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $202 = -1 << $201; //@line 500 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $45 = $202; //@line 500 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 while(1) {
  $203 = HEAP32[$35>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $204 = ($203>>>0)>=(32); //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  if (!($204)) {
   break;
  }
  $205 = HEAP32[$1>>2]|0; //@line 503 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $206 = HEAP32[$205>>2]|0; //@line 503 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $46 = $206; //@line 503 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $207 = $45; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $208 = $207 ^ -1; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $209 = HEAP32[$3>>2]|0; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $210 = HEAP32[$209>>2]|0; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $211 = $210 & $208; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$209>>2] = $211; //@line 504 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $212 = $46; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $213 = ((($3)) + 4|0); //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $214 = HEAP32[$213>>2]|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $215 = $212 << $214; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $216 = HEAP32[$3>>2]|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $217 = HEAP32[$216>>2]|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $218 = $217 | $215; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$216>>2] = $218; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $219 = HEAP32[$3>>2]|0; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $220 = ((($219)) + 4|0); //@line 506 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$3>>2] = $220; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $221 = $45; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $222 = HEAP32[$3>>2]|0; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $223 = HEAP32[$222>>2]|0; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $224 = $223 & $221; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$222>>2] = $224; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $225 = $46; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $226 = $44; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $227 = $225 >>> $226; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $228 = HEAP32[$3>>2]|0; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $229 = HEAP32[$228>>2]|0; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $230 = $229 | $227; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$228>>2] = $230; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $231 = HEAP32[$35>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $232 = (($231) - 32)|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$35>>2] = $232; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $233 = HEAP32[$1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $234 = ((($233)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$1>>2] = $234; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $235 = HEAP32[$35>>2]|0; //@line 511 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $236 = ($235|0)>(0); //@line 511 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if (!($236)) {
  $31 = $0; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $32 = $3; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $312 = $31; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $313 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $314 = HEAP32[$313>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$312>>2] = $314; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $315 = ((($312)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $316 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $317 = ((($316)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $318 = HEAP32[$317>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$315>>2] = $318; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $237 = HEAP32[$35>>2]|0; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $238 = (32 - ($237))|0; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $239 = -1 >>> $238; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $45 = $239; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $240 = HEAP32[$1>>2]|0; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $241 = HEAP32[$240>>2]|0; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $242 = $45; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $243 = $241 & $242; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $47 = $243; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $244 = $44; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$49>>2] = $244; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $28 = $35; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $29 = $49; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $245 = $28; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $246 = $29; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$27>>0]=HEAP8[$30>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $25 = $245; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $26 = $246; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $247 = $26; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $248 = $25; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $22 = $27; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $23 = $247; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $24 = $248; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $249 = $23; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $250 = HEAP32[$249>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $251 = $24; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $252 = HEAP32[$251>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $253 = ($250|0)<($252|0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $254 = $26; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $255 = $25; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $256 = $253 ? $254 : $255; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $257 = HEAP32[$256>>2]|0; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $48 = $257; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $258 = ((($3)) + 4|0); //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $259 = HEAP32[$258>>2]|0; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $260 = -1 << $259; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $261 = $44; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $262 = $48; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $263 = (($261) - ($262))|0; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $264 = -1 >>> $263; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $265 = $260 & $264; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $45 = $265; //@line 516 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $266 = $45; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $267 = $266 ^ -1; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $268 = HEAP32[$3>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $269 = HEAP32[$268>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $270 = $269 & $267; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$268>>2] = $270; //@line 517 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $271 = $47; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $272 = ((($3)) + 4|0); //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $273 = HEAP32[$272>>2]|0; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $274 = $271 << $273; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $275 = HEAP32[$3>>2]|0; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $276 = HEAP32[$275>>2]|0; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $277 = $276 | $274; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$275>>2] = $277; //@line 518 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $278 = $48; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $279 = ((($3)) + 4|0); //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $280 = HEAP32[$279>>2]|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $281 = (($278) + ($280))|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $282 = (($281>>>0) / 32)&-1; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $283 = HEAP32[$3>>2]|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $284 = (($283) + ($282<<2)|0); //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$3>>2] = $284; //@line 519 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $285 = $48; //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $286 = ((($3)) + 4|0); //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $287 = HEAP32[$286>>2]|0; //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $288 = (($285) + ($287))|0; //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $289 = (($288>>>0) % 32)&-1; //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $290 = ((($3)) + 4|0); //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$290>>2] = $289; //@line 520 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $291 = $48; //@line 521 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $292 = HEAP32[$35>>2]|0; //@line 521 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $293 = (($292) - ($291))|0; //@line 521 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$35>>2] = $293; //@line 521 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $294 = HEAP32[$35>>2]|0; //@line 522 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $295 = ($294|0)>(0); //@line 522 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 if (!($295)) {
  $31 = $0; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $32 = $3; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $312 = $31; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $313 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $314 = HEAP32[$313>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$312>>2] = $314; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $315 = ((($312)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $316 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $317 = ((($316)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  $318 = HEAP32[$317>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  HEAP32[$315>>2] = $318; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
  STACKTOP = sp;return; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 }
 $296 = HEAP32[$35>>2]|0; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $297 = (32 - ($296))|0; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $298 = -1 >>> $297; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $45 = $298; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $299 = $45; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $300 = $299 ^ -1; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $301 = HEAP32[$3>>2]|0; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $302 = HEAP32[$301>>2]|0; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $303 = $302 & $300; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$301>>2] = $303; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $304 = $47; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $305 = $48; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $306 = $304 >>> $305; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $307 = HEAP32[$3>>2]|0; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $308 = HEAP32[$307>>2]|0; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $309 = $308 | $306; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$307>>2] = $309; //@line 526 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $310 = HEAP32[$35>>2]|0; //@line 527 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $311 = ((($3)) + 4|0); //@line 527 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$311>>2] = $310; //@line 527 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $31 = $0; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $32 = $3; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $312 = $31; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $313 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $314 = HEAP32[$313>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$312>>2] = $314; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $315 = ((($312)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $316 = $32; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $317 = ((($316)) + 4|0); //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 $318 = HEAP32[$317>>2]|0; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 HEAP32[$315>>2] = $318; //@line 1118 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
 STACKTOP = sp;return; //@line 531 "/usr/lib/emscripten/system/include/libcxx/__bit_reference"
}
function __GLOBAL__sub_I_haar_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_9();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(18657); //@line 412 "haar.cpp"
 return; //@line 412 "haar.cpp"
}
function ___cxx_global_var_init_9() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN41EmscriptenBindingInitializer_stl_wrappersC2Ev(18656); //@line 424 "haar.cpp"
 return; //@line 424 "haar.cpp"
}
function __ZN41EmscriptenBindingInitializer_stl_wrappersC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 5|0;
 $3 = sp + 4|0;
 $1 = $0;
 __ZN10emscripten15register_vectorIsEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($2,11894); //@line 425 "haar.cpp"
 __ZN10emscripten15register_vectorIhEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($3,11906); //@line 426 "haar.cpp"
 STACKTOP = sp;return; //@line 427 "haar.cpp"
}
function __ZN10emscripten15register_vectorIsEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field11 = 0, $$field14 = 0, $$field19 = 0, $$field22 = 0, $$field27 = 0, $$field30 = 0, $$field37 = 0, $$field40 = 0, $$field6 = 0, $$index1 = 0, $$index13 = 0, $$index17 = 0, $$index21 = 0, $$index25 = 0, $$index29 = 0, $$index3 = 0, $$index33 = 0, $$index35 = 0, $$index39 = 0;
 var $$index43 = 0, $$index5 = 0, $$index9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp + 228|0;
 $6 = sp + 250|0;
 $11 = sp + 208|0;
 $12 = sp + 249|0;
 $17 = sp + 184|0;
 $19 = sp + 248|0;
 $20 = sp + 16|0;
 $24 = sp + 160|0;
 $26 = sp + 247|0;
 $27 = sp + 8|0;
 $31 = sp + 136|0;
 $33 = sp + 246|0;
 $34 = sp;
 $38 = sp + 245|0;
 $52 = sp + 56|0;
 $53 = sp + 48|0;
 $54 = sp + 244|0;
 $55 = sp + 40|0;
 $56 = sp + 32|0;
 $57 = sp + 24|0;
 $51 = $1;
 HEAP32[$52>>2] = (48); //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($52)) + 4|0); //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index1>>2] = 0; //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$53>>2] = (49); //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index3 = ((($53)) + 4|0); //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index3>>2] = 0; //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $58 = $51; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $45 = $54; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $46 = $58; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIsNS3_9allocatorIsEEEEEEvv(); //@line 1120 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $47 = 50; //@line 1122 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $59 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIsNS3_9allocatorIsEEEEEEPFvvEv()|0); //@line 1123 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $48 = $59; //@line 1123 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $60 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIsNS3_9allocatorIsEEEEEEPFvvEv()|0); //@line 1124 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $49 = $60; //@line 1124 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $50 = 51; //@line 1125 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $61 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $62 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIsNS3_9allocatorIsEEEEEEE3getEv()|0); //@line 1129 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $63 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIsNS3_9allocatorIsEEEEEEE3getEv()|0); //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $64 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $65 = $47; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $44 = $65; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $66 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $67 = $47; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $68 = $48; //@line 1134 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $43 = $68; //@line 1134 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $69 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $70 = $48; //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $71 = $49; //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $42 = $71; //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $72 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $73 = $49; //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $74 = $46; //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $75 = $50; //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $41 = $75; //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $76 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $77 = $50; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($61|0),($62|0),($63|0),($64|0),($66|0),($67|0),($69|0),($70|0),($72|0),($73|0),($74|0),($76|0),($77|0)); //@line 1127 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $40 = $54; //@line 1491 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $78 = $40; //@line 1491 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $36 = $78; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $37 = 52; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $79 = $36; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $39 = 53; //@line 1186 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $80 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1188 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $81 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIsNS5_9allocatorIsEEEEEE8getCountEv($38)|0); //@line 1189 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $82 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIsNS5_9allocatorIsEEEEEE8getTypesEv($38)|0); //@line 1190 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $83 = $39; //@line 1191 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $35 = $83; //@line 1191 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $84 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $85 = $39; //@line 1192 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $86 = $37; //@line 1193 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($80|0),($81|0),($82|0),($84|0),($85|0),($86|0)); //@line 1187 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$52>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($52)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field6 = HEAP32[$$index5>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$55>>2] = $$field; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index9 = ((($55)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index9>>2] = $$field6; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$34>>0]=HEAP8[$55>>0]|0;HEAP8[$34+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$34+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$34+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$34+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$34+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$34+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$34+7>>0]=HEAP8[$55+7>>0]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field11 = HEAP32[$34>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index13 = ((($34)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field14 = HEAP32[$$index13>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $29 = $79; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $30 = 11918; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$31>>2] = $$field11; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index17 = ((($31)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index17>>2] = $$field14; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $87 = $29; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $32 = 54; //@line 1269 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $88 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1273 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $89 = $30; //@line 1274 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $90 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEERKsEE8getCountEv($33)|0); //@line 1275 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $91 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEERKsEE8getTypesEv($33)|0); //@line 1276 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $92 = $32; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $28 = $92; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $93 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $94 = $32; //@line 1278 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $95 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvRKsEEEPT_RKSB_($31)|0); //@line 1279 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($88|0),($89|0),($90|0),($91|0),($93|0),($94|0),($95|0),0); //@line 1272 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field19 = HEAP32[$53>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index21 = ((($53)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field22 = HEAP32[$$index21>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$56>>2] = $$field19; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index25 = ((($56)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index25>>2] = $$field22; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$27>>0]=HEAP8[$56>>0]|0;HEAP8[$27+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$56+7>>0]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field27 = HEAP32[$27>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index29 = ((($27)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field30 = HEAP32[$$index29>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = $87; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $23 = 11928; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$24>>2] = $$field27; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index33 = ((($24)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index33>>2] = $$field30; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $96 = $22; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $25 = 55; //@line 1269 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $97 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1273 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $98 = $23; //@line 1274 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $99 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEEjRKsEE8getCountEv($26)|0); //@line 1275 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $100 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEEjRKsEE8getTypesEv($26)|0); //@line 1276 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $101 = $25; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $101; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $102 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $103 = $25; //@line 1278 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $104 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvjRKsEEEPT_RKSB_($24)|0); //@line 1279 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($97|0),($98|0),($99|0),($100|0),($102|0),($103|0),($104|0),0); //@line 1272 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$57>>2] = (56); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index35 = ((($57)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index35>>2] = 0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$20>>0]=HEAP8[$57>>0]|0;HEAP8[$20+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$20+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$20+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$20+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$20+7>>0]=HEAP8[$57+7>>0]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field37 = HEAP32[$20>>2]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index39 = ((($20)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field40 = HEAP32[$$index39>>2]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = $96; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = 11935; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$17>>2] = $$field37; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index43 = ((($17)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index43>>2] = $$field40; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $105 = $15; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = 57; //@line 1288 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $106 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1292 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $107 = $16; //@line 1293 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS5_9allocatorIsEEEEEEEE8getCountEv($19)|0); //@line 1294 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS5_9allocatorIsEEEEEEEE8getTypesEv($19)|0); //@line 1295 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $110 = $18; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $110; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $111 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $112 = $18; //@line 1297 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $113 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEKFjvEEEPT_RKS9_($17)|0); //@line 1298 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($106|0),($107|0),($108|0),($109|0),($111|0),($112|0),($113|0),0); //@line 1291 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $105; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = 11940; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$11>>2] = 58; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $114 = $9; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = 59; //@line 1308 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $115 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1310 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $116 = $10; //@line 1311 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIsNS5_9allocatorIsEEEEjEE8getCountEv($12)|0); //@line 1312 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIsNS5_9allocatorIsEEEEjEE8getTypesEv($12)|0); //@line 1313 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $119 = $13; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $119; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $120 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $121 = $13; //@line 1315 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $122 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIsNS3_9allocatorIsEEEEjEEEPT_RKSC_($11)|0); //@line 1316 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($115|0),($116|0),($117|0),($118|0),($120|0),($121|0),($122|0),0); //@line 1309 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $114; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = 11944; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$5>>2] = 60; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = 61; //@line 1308 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $123 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 1310 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $124 = $4; //@line 1311 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $125 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEjRKsEE8getCountEv($6)|0); //@line 1312 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $126 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEjRKsEE8getTypesEv($6)|0); //@line 1313 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $127 = $7; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $127; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $128 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $129 = $7; //@line 1315 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $130 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIsNS2_9allocatorIsEEEEjRKsEEEPT_RKSC_($5)|0); //@line 1316 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($123|0),($124|0),($125|0),($126|0),($128|0),($129|0),($130|0),0); //@line 1309 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten15register_vectorIhEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field11 = 0, $$field14 = 0, $$field19 = 0, $$field22 = 0, $$field27 = 0, $$field30 = 0, $$field37 = 0, $$field40 = 0, $$field6 = 0, $$index1 = 0, $$index13 = 0, $$index17 = 0, $$index21 = 0, $$index25 = 0, $$index29 = 0, $$index3 = 0, $$index33 = 0, $$index35 = 0, $$index39 = 0;
 var $$index43 = 0, $$index5 = 0, $$index9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp + 228|0;
 $6 = sp + 250|0;
 $11 = sp + 208|0;
 $12 = sp + 249|0;
 $17 = sp + 184|0;
 $19 = sp + 248|0;
 $20 = sp + 16|0;
 $24 = sp + 160|0;
 $26 = sp + 247|0;
 $27 = sp + 8|0;
 $31 = sp + 136|0;
 $33 = sp + 246|0;
 $34 = sp;
 $38 = sp + 245|0;
 $52 = sp + 56|0;
 $53 = sp + 48|0;
 $54 = sp + 244|0;
 $55 = sp + 40|0;
 $56 = sp + 32|0;
 $57 = sp + 24|0;
 $51 = $1;
 HEAP32[$52>>2] = (62); //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($52)) + 4|0); //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index1>>2] = 0; //@line 1488 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$53>>2] = (63); //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index3 = ((($53)) + 4|0); //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index3>>2] = 0; //@line 1489 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $58 = $51; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $45 = $54; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $46 = $58; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIhNS3_9allocatorIhEEEEEEvv(); //@line 1120 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $47 = 64; //@line 1122 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $59 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv()|0); //@line 1123 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $48 = $59; //@line 1123 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $60 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv()|0); //@line 1124 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $49 = $60; //@line 1124 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $50 = 65; //@line 1125 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $61 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $62 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIhNS3_9allocatorIhEEEEEEE3getEv()|0); //@line 1129 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $63 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIhNS3_9allocatorIhEEEEEEE3getEv()|0); //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $64 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $65 = $47; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $44 = $65; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $66 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $67 = $47; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $68 = $48; //@line 1134 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $43 = $68; //@line 1134 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $69 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $70 = $48; //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $71 = $49; //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $42 = $71; //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $72 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $73 = $49; //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $74 = $46; //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $75 = $50; //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $41 = $75; //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $76 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $77 = $50; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($61|0),($62|0),($63|0),($64|0),($66|0),($67|0),($69|0),($70|0),($72|0),($73|0),($74|0),($76|0),($77|0)); //@line 1127 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $40 = $54; //@line 1491 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $78 = $40; //@line 1491 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $36 = $78; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $37 = 66; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $79 = $36; //@line 1175 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $39 = 67; //@line 1186 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $80 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1188 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $81 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getCountEv($38)|0); //@line 1189 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $82 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getTypesEv($38)|0); //@line 1190 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $83 = $39; //@line 1191 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $35 = $83; //@line 1191 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $84 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $85 = $39; //@line 1192 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $86 = $37; //@line 1193 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($80|0),($81|0),($82|0),($84|0),($85|0),($86|0)); //@line 1187 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$52>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($52)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field6 = HEAP32[$$index5>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$55>>2] = $$field; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index9 = ((($55)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index9>>2] = $$field6; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$34>>0]=HEAP8[$55>>0]|0;HEAP8[$34+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$34+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$34+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$34+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$34+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$34+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$34+7>>0]=HEAP8[$55+7>>0]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field11 = HEAP32[$34>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index13 = ((($34)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field14 = HEAP32[$$index13>>2]|0; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $29 = $79; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $30 = 11918; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$31>>2] = $$field11; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index17 = ((($31)) + 4|0); //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index17>>2] = $$field14; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $87 = $29; //@line 1492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $32 = 68; //@line 1269 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $88 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1273 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $89 = $30; //@line 1274 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $90 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getCountEv($33)|0); //@line 1275 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $91 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getTypesEv($33)|0); //@line 1276 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $92 = $32; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $28 = $92; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $93 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $94 = $32; //@line 1278 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $95 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEEEPT_RKSB_($31)|0); //@line 1279 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($88|0),($89|0),($90|0),($91|0),($93|0),($94|0),($95|0),0); //@line 1272 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field19 = HEAP32[$53>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index21 = ((($53)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field22 = HEAP32[$$index21>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$56>>2] = $$field19; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index25 = ((($56)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index25>>2] = $$field22; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$27>>0]=HEAP8[$56>>0]|0;HEAP8[$27+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$56+7>>0]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field27 = HEAP32[$27>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index29 = ((($27)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field30 = HEAP32[$$index29>>2]|0; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = $87; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $23 = 11928; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$24>>2] = $$field27; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index33 = ((($24)) + 4|0); //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index33>>2] = $$field30; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $96 = $22; //@line 1493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $25 = 69; //@line 1269 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $97 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1273 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $98 = $23; //@line 1274 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $99 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEjRKhEE8getCountEv($26)|0); //@line 1275 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $100 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEjRKhEE8getTypesEv($26)|0); //@line 1276 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $101 = $25; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $101; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $102 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $103 = $25; //@line 1278 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $104 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvjRKhEEEPT_RKSB_($24)|0); //@line 1279 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($97|0),($98|0),($99|0),($100|0),($102|0),($103|0),($104|0),0); //@line 1272 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$57>>2] = (70); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index35 = ((($57)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index35>>2] = 0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$20>>0]=HEAP8[$57>>0]|0;HEAP8[$20+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$20+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$20+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$20+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$20+7>>0]=HEAP8[$57+7>>0]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field37 = HEAP32[$20>>2]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index39 = ((($20)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field40 = HEAP32[$$index39>>2]|0; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = $96; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = 11935; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$17>>2] = $$field37; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index43 = ((($17)) + 4|0); //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index43>>2] = $$field40; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $105 = $15; //@line 1494 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = 71; //@line 1288 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $106 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1292 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $107 = $16; //@line 1293 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getCountEv($19)|0); //@line 1294 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getTypesEv($19)|0); //@line 1295 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $110 = $18; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $110; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $111 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $112 = $18; //@line 1297 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $113 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFjvEEEPT_RKS9_($17)|0); //@line 1298 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($106|0),($107|0),($108|0),($109|0),($111|0),($112|0),($113|0),0); //@line 1291 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $105; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = 11940; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$11>>2] = 72; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $114 = $9; //@line 1495 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = 73; //@line 1308 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $115 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1310 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $116 = $10; //@line 1311 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEjEE8getCountEv($12)|0); //@line 1312 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEjEE8getTypesEv($12)|0); //@line 1313 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $119 = $13; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $119; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $120 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $121 = $13; //@line 1315 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $122 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEjEEEPT_RKSC_($11)|0); //@line 1316 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($115|0),($116|0),($117|0),($118|0),($120|0),($121|0),($122|0),0); //@line 1309 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $114; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = 11944; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$5>>2] = 74; //@line 1496 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = 75; //@line 1308 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $123 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 1310 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $124 = $4; //@line 1311 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $125 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEjRKhEE8getCountEv($6)|0); //@line 1312 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $126 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEjRKhEE8getTypesEv($6)|0); //@line 1313 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $127 = $7; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $127; //@line 1314 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $128 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $129 = $7; //@line 1315 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $130 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEjRKhEEEPT_RKSC_($5)|0); //@line 1316 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($123|0),($124|0),($125|0),($126|0),($128|0),($129|0),($130|0),0); //@line 1309 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1490 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE9push_backERKh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp;
 $15 = sp + 89|0;
 $25 = sp + 88|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = HEAP32[$27>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $26; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $22; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = ((($29)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $30; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $21; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $31; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = HEAP32[$32>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ($28|0)!=($33|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($34) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($25,$26,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
  $19 = $26; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $19; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = ((($35)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $36; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = $18; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $17 = $37; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $17; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = ((($26)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = HEAP32[$39>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $16 = $40; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $24; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $38; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $41; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $42; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $45; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $43; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $44; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $46; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $48 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $49; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $3 = $47; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $48; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $50; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $52; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $54 = HEAP8[$53>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP8[$51>>0] = $54; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($25); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = ((($26)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = HEAP32[$55>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = ((($56)) + 1|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$55>>2] = $57; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $58 = $24; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_($26,$58); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEjRKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp;
 $10 = sp + 88|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $26 = $22;
 $21 = $26; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $21; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = HEAP32[$28>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = HEAP32[$27>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $29; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $30; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = (($31) - ($32))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $33; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $25; //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $23; //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = ($34>>>0)<($35>>>0); //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($36) {
  $37 = $23; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $25; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = (($37) - ($38))|0; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = $24; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEjRKh($26,$39,$40); //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $41 = $25; //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $23; //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = ($41>>>0)>($42>>>0); //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($43)) {
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $44 = HEAP32[$26>>2]|0; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $23; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = (($44) + ($45)|0); //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $26; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $46; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $18; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $47; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $17; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = ((($48)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = HEAP32[$49>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = HEAP32[$48>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $50; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($52) - ($53))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $54; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $19; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $47; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $55; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $15; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $57 = $16; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = ((($56)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = HEAP32[$58>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = ($57|0)!=($59|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($60)) {
   break;
  }
  $14 = $56; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = $14; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = ((($61)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $62; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $63; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = ((($56)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $66 = HEAP32[$65>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $67 = ((($66)) + -1|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$65>>2] = $67; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $11 = $67; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $68 = $11; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $64; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $9 = $68; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $69 = $8; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $9; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $69; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $70; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $5; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $72 = $6; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $71; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $72; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $73 = $20; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(76,($47|0),($73|0)); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $76 = ___cxa_find_matching_catch_3(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIhNS3_9allocatorIhEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1008 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvRKT_($2)|0); //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1021 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIhNS2_9allocatorIhEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($3) {
  STACKTOP = sp;return; //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($2); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZdlPv($2); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIhNS3_9allocatorIhEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIhNS3_9allocatorIhEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv()|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1011 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11876|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11874|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11871|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIhNS2_9allocatorIhEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $6 = sp + 12|0;
 $10 = (__Znwj(12)|0); //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $10; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $9; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $11; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $8; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $12; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$12>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = ((($12)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$13>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = ((($12)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $14; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$6>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $5; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $6; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = HEAP32[$16>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $15; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$3>>2] = $17; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $2; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $18; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $0 = $3; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $0; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = HEAP32[$19>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$18>>2] = $20; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 STACKTOP = sp;return ($10|0); //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIhNS2_9allocatorIhEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 255]()|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeES7_($3)|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEvPS6_JS8_EE6invokeERKSA_SB_h($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeES7_($8)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 >> 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($9) + ($10)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 & 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = ($12|0)!=(0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($13) {
  $14 = HEAP32[$11>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = (($14) + ($$field)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = HEAP32[$15>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $16;
 } else {
  $17 = $$field; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $17;
 }
 $18 = $5; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = (__ZN10emscripten8internal11BindingTypeIhE12fromWireTypeEh($18)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP8[$6>>0] = $19; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$20 & 255]($11,$6); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEERKhEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11866|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvjRKhEvPS6_JjS8_EE6invokeERKSA_SB_jh($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$9>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($9)) + 4|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeES7_($10)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 >> 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = (($11) + ($12)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $$field2 & 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = ($14|0)!=(0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($15) {
  $16 = HEAP32[$13>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $17 = (($16) + ($$field)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = HEAP32[$17>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $24 = $18;
 } else {
  $19 = $$field; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $24 = $19;
 }
 $20 = $6; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($20)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = $7; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $23 = (__ZN10emscripten8internal11BindingTypeIhE12fromWireTypeEh($22)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP8[$8>>0] = $23; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$24 & 127]($13,$21,$8); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEjRKhEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEjRKhEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEjRKhEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11860|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvjRKhEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = HEAP32[$3>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = HEAP32[$2>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $4; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $5; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = (($6) - ($7))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($8|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $3; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeES8_($6)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($7) + ($8)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $14;
 } else {
  $15 = $$field; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $15;
 }
 $17 = (FUNCTION_TABLE_ii[$16 & 127]($9)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $17; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($18|0); //@line 492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11890|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFjvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3getERKS6_j($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $7; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $6; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $9; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $4; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ((($10)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = HEAP32[$11>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = HEAP32[$10>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $12; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $13; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = (($14) - ($15))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = ($8>>>0)<($16>>>0); //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($17) {
  $18 = $6; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $19 = $7; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $2 = $18; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $3 = $19; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $2; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $21 = $3; //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  $22 = HEAP32[$20>>2]|0; //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = (($22) + ($21)|0); //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZN10emscripten3valC2IRKhEEOT_($5,$23); //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $25 = HEAP32[$5>>2]|0; //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($25|0); //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 } else {
  $24 = (__ZN10emscripten3val9undefinedEv()|0); //@line 1469 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  HEAP32[$5>>2] = $24; //@line 1469 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $25 = HEAP32[$5>>2]|0; //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($25|0); //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEjES2_S9_JjEE6invokeEPSB_PS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $4; //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_($11)|0); //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $5; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = (FUNCTION_TABLE_iii[$10 & 127]($12,$14)|0); //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$6>>2] = $15; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __THREW__ = 0;
 $16 = (invoke_ii(77,($6|0))|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $7 = $19; //@line 466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $8 = $20; //@line 466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  __ZN10emscripten3valD2Ev($6); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $21 = $7; //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $22 = $8; //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($21|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($6); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($16|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIhNS4_9allocatorIhEEEEjEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11879|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEjEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3setERS6_jRKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $7; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = HEAP8[$8>>0]|0; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $6; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $10; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $11; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $3; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = HEAP32[$12>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = (($14) + ($13)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP8[$15>>0] = $9; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return 1; //@line 1479 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEjRKhEbS7_JjS9_EE6invokeEPSB_PS6_jh($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $5; //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_($11)|0); //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $6; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = $7; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal11BindingTypeIhE12fromWireTypeEh($15)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP8[$8>>0] = $16; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (FUNCTION_TABLE_iiii[$10 & 127]($12,$14,$8)|0); //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($18|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEjRKhEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEjRKhEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIhNS3_9allocatorIhEEEEjRKhEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11884|0); //@line 388 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEjRKhEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIhNS3_9allocatorIhEEEEjRKhEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (664|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 341 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 341 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 237 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 237 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIhE12fromWireTypeEh($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 233 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 233 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&1;
 $1 = $2;
 $3 = $1; //@line 252 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $3&1; //@line 252 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($4|0); //@line 252 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIhNS4_9allocatorIhEEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (680|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 487 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = HEAP32[$2>>2]|0; //@line 487 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_incref(($3|0)); //@line 487 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $1; //@line 488 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = HEAP32[$4>>2]|0; //@line 488 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($5|0); //@line 488 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0; //@line 345 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __THREW__ = 0;
 invoke_vi(78,($3|0)); //@line 345 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6); //@line 345 "/usr/lib/emscripten/system/include/emscripten/val.h"
  // unreachable; //@line 345 "/usr/lib/emscripten/system/include/emscripten/val.h"
 } else {
  STACKTOP = sp;return; //@line 346 "/usr/lib/emscripten/system/include/emscripten/val.h"
 }
}
function __ZN10emscripten3valC2IRKhEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7; //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRKhEEC2ES3_($5,$8); //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDIRKhE3getEv()|0); //@line 322 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKhEEcvPKvEv($5)|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 324 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3val9undefinedEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1)); //@line 296 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $1 = HEAP32[$0>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($1|0); //@line 296 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 453 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$4>>2] = $5; //@line 453 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 454 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRKhEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $6; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$9>>2] = $11; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $13; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $4; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $3; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (__ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($16)|0); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_($14,$17); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 223 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDIRKhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKhE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRKhEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3; //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $1; //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($4|0); //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDIRKhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 233 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP8[$2>>0]|0; //@line 233 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 233 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $4&255; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $5; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = HEAP32[$8>>2]|0; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = ((($9)) + 8|0); //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$8>>2] = $10; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 210 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (692|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 237 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 237 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 237 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEjRKhEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (700|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEERKhEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (716|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (728|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 320 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 320 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (24|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEjRKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $9 = sp + 8|0;
 $12 = sp + 242|0;
 $20 = sp + 176|0;
 $23 = sp + 164|0;
 $36 = sp;
 $41 = sp + 241|0;
 $50 = sp + 240|0;
 $58 = sp + 20|0;
 $54 = $0;
 $55 = $1;
 $56 = $2;
 $61 = $54;
 $53 = $61; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $53; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = ((($62)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $63; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = $52; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $64; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $51; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = HEAP32[$65>>2]|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ((($61)) + 4|0); //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = HEAP32[$67>>2]|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $66; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $68; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = (($69) - ($70))|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = $55; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $73 = ($71>>>0)>=($72>>>0); //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($73) {
  $74 = $55; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $75 = $56; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $61; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = $74; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $75; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $76 = $46; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = $76; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  $77 = $45; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  $78 = ((($77)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = $78; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $79 = $44; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $79; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $80 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $80; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  while(1) {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($50,$76,1); //@line 1004 "/usr/lib/emscripten/system/include/libcxx/vector"
   $81 = $49; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $82 = ((($76)) + 4|0); //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $83 = HEAP32[$82>>2]|0; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $42 = $83; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $84 = $42; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
   $85 = $48; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $38 = $81; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $39 = $84; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $40 = $85; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $86 = $38; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $87 = $39; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $88 = $40; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $37 = $88; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $89 = $37; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   ;HEAP8[$36>>0]=HEAP8[$41>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $33 = $86; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $34 = $87; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $35 = $89; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $90 = $33; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $91 = $34; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $92 = $35; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $32 = $92; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $93 = $32; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $29 = $90; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $30 = $91; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $31 = $93; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $94 = $30; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $95 = $31; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $28 = $95; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $96 = $28; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $97 = HEAP8[$96>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP8[$94>>0] = $97; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $98 = ((($76)) + 4|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $99 = HEAP32[$98>>2]|0; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $100 = ((($99)) + 1|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$98>>2] = $100; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $101 = $47; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   $102 = (($101) + -1)|0; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   $47 = $102; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($50); //@line 1008 "/usr/lib/emscripten/system/include/libcxx/vector"
   $103 = $47; //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
   $104 = ($103>>>0)>(0); //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
   if (!($104)) {
    break;
   }
  }
  STACKTOP = sp;return; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $27 = $61; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $27; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = ((($105)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $106; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = $26; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $107; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $108 = $25; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = $108; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $24; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = ((($109)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = HEAP32[$110>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$109>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $111; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = $112; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = (($113) - ($114))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $55; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = (($115) + ($116))|0; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $117; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = $19; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $119 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($118)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $119; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $120 = HEAP32[$20>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $121 = $21; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $122 = ($120>>>0)>($121>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($122) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($118); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $17 = $118; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $123 = $17; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $123; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $124 = $16; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $124; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $125 = $15; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = ((($125)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $126; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $127 = $14; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $127; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $128 = $13; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $129 = HEAP32[$128>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $130 = HEAP32[$124>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $131 = $129; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $132 = $130; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $133 = (($131) - ($132))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $133; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $134 = $22; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $135 = $21; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $136 = (($135>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $137 = ($134>>>0)>=($136>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($137) {
  $138 = $21; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $138; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $139 = $22; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $140 = $139<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$23>>2] = $140; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $23; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $11 = $20; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $141 = $10; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $142 = $11; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $7 = $141; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $8 = $142; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $143 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $144 = $8; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $4 = $9; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $5 = $143; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $6 = $144; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $145 = $5; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $146 = HEAP32[$145>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $147 = $6; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $148 = HEAP32[$147>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $149 = ($146>>>0)<($148>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $150 = $8; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $151 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $152 = $149 ? $150 : $151; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $153 = HEAP32[$152>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $153; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $154 = $18; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $155 = $3; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $156 = ((($155)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $157 = HEAP32[$156>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $158 = HEAP32[$155>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $159 = $157; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $160 = $158; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $161 = (($159) - ($160))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $162 = $57; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($58,$154,$161,$162); //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $163 = $55; //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 $164 = $56; //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_viii(79,($58|0),($163|0),($164|0)); //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 $165 = __THREW__; __THREW__ = 0;
 $166 = $165&1;
 if ($166) {
  $169 = ___cxa_find_matching_catch_2()|0;
  $170 = tempRet0;
  $59 = $169; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $170; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $171 = $59; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $172 = $60; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($171|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(45,($61|0),($58|0)); //@line 1061 "/usr/lib/emscripten/system/include/libcxx/vector"
 $167 = __THREW__; __THREW__ = 0;
 $168 = $167&1;
 if ($168) {
  $169 = ___cxa_find_matching_catch_2()|0;
  $170 = tempRet0;
  $59 = $169; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $170; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $171 = $59; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $172 = $60; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($171|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $15 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $15; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = HEAP32[$19>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $20; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $13; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $12; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $6; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $25; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $26; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $28; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $29; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = HEAP32[$26>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $31; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $32; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = (($33) - ($34))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = (($24) + ($35)|0); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $8; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = HEAP32[$37>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $38; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $40 = $17; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($39) + ($40)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $10; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = HEAP32[$42>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $43; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $11; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = ((($45)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = HEAP32[$46>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = HEAP32[$45>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $47; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $48; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = (($49) - ($50))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = (($44) + ($51)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($18,$21,$36,$41,$52); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 860 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $17 = sp + 84|0;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $25 = $21;
 $20 = $25; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $26 = $20; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $27 = ((($26)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $19 = $27; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $19; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $28; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $18; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = ((($29)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = HEAP32[$30>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $31; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $32 = $24; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $33 = ((($25)) + 8|0); //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $34 = HEAP32[$33>>2]|0; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $3 = $34; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $35 = $3; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $36 = $23; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $14 = $32; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $15 = $35; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $16 = $36; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $37 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $15; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $16; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $39; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $13; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $37; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $38; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $40; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $10; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $11; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $43; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $8; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $5 = $41; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $42; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $44; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = $6; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $7; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $46; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $48 = HEAP8[$47>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP8[$45>>0] = $48; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = ((($25)) + 8|0); //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $50 = HEAP32[$49>>2]|0; //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $51 = ((($50)) + 1|0); //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$49>>2] = $51; //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $52 = $22; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = (($52) + -1)|0; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $22 = $53; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = $22; //@line 225 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = ($54>>>0)>(0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($55)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 226 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE9push_backERKs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp;
 $15 = sp + 89|0;
 $25 = sp + 88|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = HEAP32[$27>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $26; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $22; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = ((($29)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $30; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $21; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $31; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = HEAP32[$32>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ($28|0)!=($33|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($34) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($25,$26,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
  $19 = $26; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $19; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = ((($35)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $36; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = $18; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $17 = $37; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $17; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = ((($26)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = HEAP32[$39>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $16 = $40; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $24; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $38; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $41; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $42; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $45; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $43; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $44; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $46; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $48 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $49; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $3 = $47; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $48; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $50; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $52; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $54 = HEAP16[$53>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP16[$51>>1] = $54; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($25); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = ((($26)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = HEAP32[$55>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = ((($56)) + 2|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$55>>2] = $57; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $58 = $24; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($26,$58); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE6resizeEjRKs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp;
 $10 = sp + 88|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $26 = $22;
 $21 = $26; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $21; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = HEAP32[$28>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = HEAP32[$27>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $29; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $30; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = (($31) - ($32))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = (($33|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $34; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $25; //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $23; //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = ($35>>>0)<($36>>>0); //@line 2006 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($37) {
  $38 = $23; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = $25; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = (($38) - ($39))|0; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $24; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE8__appendEjRKs($26,$40,$41); //@line 2007 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $42 = $25; //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $23; //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ($42>>>0)>($43>>>0); //@line 2008 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($44)) {
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $45 = HEAP32[$26>>2]|0; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $23; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = (($45) + ($46<<1)|0); //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $26; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $47; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $18; //@line 2009 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $48; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $17; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = ((($49)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = HEAP32[$50>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$49>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $52; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($53) - ($54))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = (($55|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $56; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $19; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $48; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $57; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $15; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $59 = $16; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = ((($58)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = HEAP32[$60>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = ($59|0)!=($61|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($62)) {
   break;
  }
  $14 = $58; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = $14; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $64 = ((($63)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $64; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $65 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $65; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = ((($58)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $68 = HEAP32[$67>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $69 = ((($68)) + -2|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$67>>2] = $69; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $11 = $69; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $70 = $11; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $66; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $9 = $70; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $8; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $72 = $9; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $71; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $72; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $73 = $5; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $74 = $6; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $73; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $74; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $75 = $20; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(80,($48|0),($75|0)); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch_3(0|0)|0;
  $79 = tempRet0;
  ___clang_call_terminate($78); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  STACKTOP = sp;return; //@line 2010 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIsNS3_9allocatorIsEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1008 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIsNS2_9allocatorIsEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEEEPKvRKT_($2)|0); //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1028 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIsNS3_9allocatorIsEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIsNS3_9allocatorIsEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1021 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIsNS2_9allocatorIsEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($3) {
  STACKTOP = sp;return; //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($2); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZdlPv($2); //@line 451 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIsNS3_9allocatorIsEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIsNS3_9allocatorIsEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv()|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 100 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIsNS2_9allocatorIsEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $6 = sp + 12|0;
 $10 = (__Znwj(12)|0); //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $10; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $9; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $11; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $8; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $12; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$12>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = ((($12)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$13>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = ((($12)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $14; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$6>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $5; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $6; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = HEAP32[$16>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $15; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$3>>2] = $17; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $2; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $18; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $0 = $3; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $0; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = HEAP32[$19>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$18>>2] = $20; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 STACKTOP = sp;return ($10|0); //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIsNS2_9allocatorIsEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 255]()|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE10toWireTypeES7_($3)|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIsNS5_9allocatorIsEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIsNS5_9allocatorIsEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvRKsEvPS6_JS8_EE6invokeERKSA_SB_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES7_($8)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 >> 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($9) + ($10)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 & 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = ($12|0)!=(0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($13) {
  $14 = HEAP32[$11>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = (($14) + ($$field)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = HEAP32[$15>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $16;
 } else {
  $17 = $$field; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $17;
 }
 $18 = $5; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = (__ZN10emscripten8internal11BindingTypeIsE12fromWireTypeEs($18)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP16[$6>>1] = $19; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$20 & 255]($11,$6); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEERKsEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEERKsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEERKsEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvRKsEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvjRKsEvPS6_JjS8_EE6invokeERKSA_SB_js($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$9>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($9)) + 4|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES7_($10)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 >> 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = (($11) + ($12)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $$field2 & 1; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = ($14|0)!=(0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($15) {
  $16 = HEAP32[$13>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $17 = (($16) + ($$field)|0); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = HEAP32[$17>>2]|0; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $24 = $18;
 } else {
  $19 = $$field; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $24 = $19;
 }
 $20 = $6; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($20)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = $7; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $23 = (__ZN10emscripten8internal11BindingTypeIsE12fromWireTypeEs($22)|0); //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP16[$8>>1] = $23; //@line 510 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$24 & 127]($13,$21,$8); //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 509 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEEjRKsEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS5_9allocatorIsEEEEEEjRKsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEEjRKsEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvjRKsEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = HEAP32[$3>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = HEAP32[$2>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $4; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $5; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = (($6) - ($7))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = (($8|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($9|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $3; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES8_($6)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($7) + ($8)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $14;
 } else {
  $15 = $$field; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $15;
 }
 $17 = (FUNCTION_TABLE_ii[$16 & 127]($9)|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $17; //@line 493 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($18|0); //@line 492 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS5_9allocatorIsEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS5_9allocatorIsEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS4_9allocatorIsEEEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIsNS2_9allocatorIsEEEEKFjvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIsNS2_9allocatorIsEEEEE3getERKS6_j($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $7; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $6; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $9; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $4; //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ((($10)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = HEAP32[$11>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = HEAP32[$10>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $12; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $13; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = (($14) - ($15))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = (($16|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = ($8>>>0)<($17>>>0); //@line 1466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($18) {
  $19 = $6; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $7; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $2 = $19; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $3 = $20; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $21 = $2; //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $22 = $3; //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = HEAP32[$21>>2]|0; //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = (($23) + ($22<<1)|0); //@line 1508 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZN10emscripten3valC2IRKsEEOT_($5,$24); //@line 1467 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $26 = HEAP32[$5>>2]|0; //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($26|0); //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 } else {
  $25 = (__ZN10emscripten3val9undefinedEv()|0); //@line 1469 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  HEAP32[$5>>2] = $25; //@line 1469 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $26 = HEAP32[$5>>2]|0; //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($26|0); //@line 1471 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIsNS3_9allocatorIsEEEEjES2_S9_JjEE6invokeEPSB_PS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $4; //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($11)|0); //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $5; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = (FUNCTION_TABLE_iii[$10 & 127]($12,$14)|0); //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$6>>2] = $15; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __THREW__ = 0;
 $16 = (invoke_ii(77,($6|0))|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $7 = $19; //@line 466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $8 = $20; //@line 466 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  __ZN10emscripten3valD2Ev($6); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $21 = $7; //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $22 = $8; //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($21|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($6); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  STACKTOP = sp;return ($16|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIsNS5_9allocatorIsEEEEjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIsNS5_9allocatorIsEEEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIsNS4_9allocatorIsEEEEjEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIsNS3_9allocatorIsEEEEjEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIsNS2_9allocatorIsEEEEE3setERS6_jRKs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $7; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = HEAP16[$8>>1]|0; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $6; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $10; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $11; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $3; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = HEAP32[$12>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = (($14) + ($13<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP16[$15>>1] = $9; //@line 1478 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return 1; //@line 1479 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIsNS2_9allocatorIsEEEEjRKsEbS7_JjS9_EE6invokeEPSB_PS6_js($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $5; //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($11)|0); //@line 463 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $6; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = $7; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal11BindingTypeIsE12fromWireTypeEs($15)|0); //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP16[$8>>1] = $16; //@line 464 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (FUNCTION_TABLE_iiii[$10 & 127]($12,$14,$8)|0); //@line 462 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($18|0); //@line 461 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEjRKsEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEjRKsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEjRKsEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIsNS2_9allocatorIsEEEEjRKsEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 557 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEjRKsEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (732|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 341 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 341 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIsE12fromWireTypeEs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 234 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 234 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIsNS4_9allocatorIsEEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (748|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten3valC2IRKsEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7; //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRKsEEC2ES3_($5,$8); //@line 320 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDIRKsE3getEv()|0); //@line 322 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKsEEcvPKvEv($5)|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 324 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRKsEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $6; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$9>>2] = $11; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $13; //@line 222 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $4; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $3; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (__ZN10emscripten8internal11BindingTypeIsE10toWireTypeERKs($16)|0); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIsEEvRPNS0_15GenericWireTypeET_($14,$17); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 223 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDIRKsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKsE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRKsEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3; //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $1; //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($4|0); //@line 226 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDIRKsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (584|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIsE10toWireTypeERKs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 234 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP16[$2>>1]|0; //@line 234 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 234 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIsEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $4 << 16 >> 16; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $5; //@line 205 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = HEAP32[$8>>2]|0; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = ((($9)) + 8|0); //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$8>>2] = $10; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIsNS4_9allocatorIsEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (760|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEEjRKsEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (768|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 323 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEERKsEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (784|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIsNS4_9allocatorIsEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (796|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 320 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 320 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (96|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($2); //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0; //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = ($32|0)!=(0|0); //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($33)) {
  STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $29 = $31; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $29; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$34>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $34; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $35; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $27; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $37 = $28; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = ((($36)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = HEAP32[$38>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = ($37|0)!=($39|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($40)) {
   break;
  }
  $26 = $36; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $26; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ((($41)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $25; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = ((($36)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = HEAP32[$45>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = ((($46)) + -2|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$45>>2] = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $44; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $48; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $49; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $50; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $51; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $52; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $7 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $7; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = ((($53)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $54; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $6; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $55; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = $5; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = HEAP32[$31>>2]|0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $4; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $58; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = ((($59)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $60; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $61; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = HEAP32[$62>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = HEAP32[$58>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $63; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $64; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = (($65) - ($66))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = (($67|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $56; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $57; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $68; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $12; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $13; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $14; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $69; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $70; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $71; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $10; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $72; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $8; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($73); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIsNS2_9allocatorIsEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (112|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE8__appendEjRKs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $9 = sp + 8|0;
 $12 = sp + 242|0;
 $20 = sp + 176|0;
 $23 = sp + 164|0;
 $36 = sp;
 $41 = sp + 241|0;
 $50 = sp + 240|0;
 $58 = sp + 20|0;
 $54 = $0;
 $55 = $1;
 $56 = $2;
 $61 = $54;
 $53 = $61; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $53; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = ((($62)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $63; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = $52; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $64; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $51; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = HEAP32[$65>>2]|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ((($61)) + 4|0); //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = HEAP32[$67>>2]|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $66; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $68; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = (($69) - ($70))|0; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = (($71|0) / 2)&-1; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $73 = $55; //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 $74 = ($72>>>0)>=($73>>>0); //@line 1054 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($74) {
  $75 = $55; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $76 = $56; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $61; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = $75; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $76; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $77 = $46; //@line 1055 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = $77; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  $78 = $45; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  $79 = ((($78)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = $79; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $80 = $44; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $80; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $81 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $81; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
  while(1) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($50,$77,1); //@line 1004 "/usr/lib/emscripten/system/include/libcxx/vector"
   $82 = $49; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $83 = ((($77)) + 4|0); //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $84 = HEAP32[$83>>2]|0; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $42 = $84; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $85 = $42; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
   $86 = $48; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $38 = $82; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $39 = $85; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $40 = $86; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
   $87 = $38; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $88 = $39; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $89 = $40; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $37 = $89; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $90 = $37; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   ;HEAP8[$36>>0]=HEAP8[$41>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $33 = $87; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $34 = $88; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $35 = $90; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $91 = $33; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $92 = $34; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $93 = $35; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $32 = $93; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $94 = $32; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $29 = $91; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $30 = $92; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $31 = $94; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $95 = $30; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $96 = $31; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $28 = $96; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $97 = $28; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $98 = HEAP16[$97>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP16[$95>>1] = $98; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $99 = ((($77)) + 4|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $100 = HEAP32[$99>>2]|0; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $101 = ((($100)) + 2|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$99>>2] = $101; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
   $102 = $47; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   $103 = (($102) + -1)|0; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   $47 = $103; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($50); //@line 1008 "/usr/lib/emscripten/system/include/libcxx/vector"
   $104 = $47; //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
   $105 = ($104>>>0)>(0); //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
   if (!($105)) {
    break;
   }
  }
  STACKTOP = sp;return; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $27 = $61; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $27; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = ((($106)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $107; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = $26; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $108; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $109 = $25; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = $109; //@line 1058 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $24; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = ((($110)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$111>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = HEAP32[$110>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = $112; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $113; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = (($114) - ($115))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = (($116|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = $55; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $119 = (($117) + ($118))|0; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $119; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $120 = $19; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $121 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($120)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $121; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $122 = HEAP32[$20>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $123 = $21; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $124 = ($122>>>0)>($123>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($124) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($120); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $17 = $120; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $125 = $17; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $125; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = $16; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $126; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $127 = $15; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $128 = ((($127)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $128; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $129 = $14; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $129; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $130 = $13; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $131 = HEAP32[$130>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $132 = HEAP32[$126>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $133 = $131; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $134 = $132; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $135 = (($133) - ($134))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $136 = (($135|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $136; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $137 = $22; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $138 = $21; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $139 = (($138>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $140 = ($137>>>0)>=($139>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($140) {
  $141 = $21; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $141; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $142 = $22; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $143 = $142<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$23>>2] = $143; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $23; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $11 = $20; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $144 = $10; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $145 = $11; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $7 = $144; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $8 = $145; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $146 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $147 = $8; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $4 = $9; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $5 = $146; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $6 = $147; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $148 = $5; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $149 = HEAP32[$148>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $150 = $6; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $151 = HEAP32[$150>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $152 = ($149>>>0)<($151>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $153 = $8; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $154 = $7; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $155 = $152 ? $153 : $154; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $156 = HEAP32[$155>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $156; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $157 = $18; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $61; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $158 = $3; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $159 = ((($158)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $160 = HEAP32[$159>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $161 = HEAP32[$158>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $162 = $160; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $163 = $161; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $164 = (($162) - ($163))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $165 = (($164|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $166 = $57; //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($58,$157,$165,$166); //@line 1059 "/usr/lib/emscripten/system/include/libcxx/vector"
 $167 = $55; //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 $168 = $56; //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_viii(81,($58|0),($167|0),($168|0)); //@line 1060 "/usr/lib/emscripten/system/include/libcxx/vector"
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $173 = ___cxa_find_matching_catch_2()|0;
  $174 = tempRet0;
  $59 = $173; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $174; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $175 = $59; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $176 = $60; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($175|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(82,($61|0),($58|0)); //@line 1061 "/usr/lib/emscripten/system/include/libcxx/vector"
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 if ($172) {
  $173 = ___cxa_find_matching_catch_2()|0;
  $174 = tempRet0;
  $59 = $173; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $174; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $175 = $59; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  $176 = $60; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($175|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($58); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 1063 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $15 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $15; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = HEAP32[$19>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $20; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $13; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $12; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $6; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $25; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $26; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $28; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $29; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = HEAP32[$26>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $31; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $32; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = (($33) - ($34))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = (($35|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = (($24) + ($36<<1)|0); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $8; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = HEAP32[$38>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $39; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $41 = $17; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = (($40) + ($41<<1)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $10; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = HEAP32[$43>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $44; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $11; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($46)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = HEAP32[$47>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = HEAP32[$46>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $48; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $49; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = (($50) - ($51))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = (($52|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($45) + ($53<<1)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($18,$21,$37,$42,$54); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 860 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return; //@line 839 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return; //@line 880 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 881 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $17; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = ((($22)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $16; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $24; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $15; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $25; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $13; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $26; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $27; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$19>>2] = 2147483647; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = (4294967295 / 2)&-1; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $28; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $19; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $20; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $7; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $30 = $8; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $4 = $29; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $5 = $30; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $31 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $32 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $1 = $6; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $2 = $31; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $3 = $32; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = $2; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = HEAP32[$33>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = $3; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $36 = HEAP32[$35>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $37 = ($34>>>0)<($36>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $38 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $39 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $40 = $37 ? $38 : $39; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $41 = HEAP32[$40>>2]|0; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($41|0); //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $33 = $30; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $24 = $32; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$25>>2] = 0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $26 = $33; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $34 = $24; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $23 = $25; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $23; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $36 = HEAP32[$35>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $37 = $26; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $37; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $38 = $17; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $34; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$21>>2] = $36; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $38; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $39 = $20; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $21; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $40 = $19; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $41 = HEAP32[$40>>2]|0; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$39>>2] = $41; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = ((($39)) + 4|0); //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = $22; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $43; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $18; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$42>>2] = $44; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $46 = ($45|0)!=(0); //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($46) {
   $6 = $31; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $47 = $6; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $48 = ((($47)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $5 = $48; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $49 = $5; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $4 = $49; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $50 = $4; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $51 = ((($50)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
   $52 = HEAP32[$51>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
   $53 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $12 = $52; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $13 = $53; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $54 = $12; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $55 = $13; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $9 = $54; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $10 = $55; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $11 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $56 = $9; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $57 = $10; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   $8 = $56; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   $58 = ($57>>>0)>(2147483647); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt9bad_allocC2Ev($59); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    ___cxa_throw(($59|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
   } else {
    $60 = $10; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $61 = $60<<1; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $7 = $61; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $62 = $7; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
    $63 = (__Znwj($62)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = HEAP32[$31>>2]|0; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $66 = $29; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $67 = (($65) + ($66<<1)|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $68 = ((($31)) + 8|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$68>>2] = $67; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $69 = ((($31)) + 4|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$69>>2] = $67; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = HEAP32[$31>>2]|0; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = $28; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = (($70) + ($71<<1)|0); //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $16 = $31; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $73 = $16; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $74 = ((($73)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $15 = $74; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = $15; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $14 = $75; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $76 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$76>>2] = $72; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 314 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEE18__construct_at_endEjRKs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $17 = sp + 84|0;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $25 = $21;
 $20 = $25; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $26 = $20; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $27 = ((($26)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $19 = $27; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $19; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $28; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $18; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = ((($29)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = HEAP32[$30>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $31; //@line 219 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $32 = $24; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $33 = ((($25)) + 8|0); //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $34 = HEAP32[$33>>2]|0; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $3 = $34; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $35 = $3; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $36 = $23; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $14 = $32; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $15 = $35; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $16 = $36; //@line 222 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $37 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $15; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $16; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $39; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $13; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $37; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $38; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $40; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $10; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $11; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $43; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $8; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $5 = $41; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $42; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $44; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = $6; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $7; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $46; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $48 = HEAP16[$47>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP16[$45>>1] = $48; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = ((($25)) + 8|0); //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $50 = HEAP32[$49>>2]|0; //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $51 = ((($50)) + 2|0); //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$49>>2] = $51; //@line 223 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $52 = $22; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = (($52) + -1)|0; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $22 = $53; //@line 224 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = $22; //@line 225 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = ($54>>>0)>(0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($55)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 226 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 120|0;
 $13 = sp + 96|0;
 $25 = sp + 48|0;
 $36 = $0;
 $37 = $1;
 $38 = $36;
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_deleteEv($38); //@line 891 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $38; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $35; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = ((($39)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $40; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $34; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $41; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $33; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = HEAP32[$38>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ((($38)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $37; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($46)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $42; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $43; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $45; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $47; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $29; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $49 = $28; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $48; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = $49; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $52 = (($50) - ($51))|0; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = (($52|0) / 2)&-1; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $53; //@line 1635 "/usr/lib/emscripten/system/include/libcxx/memory"
 $54 = $31; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $55 = $30; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = HEAP32[$55>>2]|0; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = (0 - ($54))|0; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = (($56) + ($57<<1)|0); //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$55>>2] = $58; //@line 1636 "/usr/lib/emscripten/system/include/libcxx/memory"
 $59 = $31; //@line 1637 "/usr/lib/emscripten/system/include/libcxx/memory"
 $60 = ($59|0)>(0); //@line 1637 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($60) {
  $61 = $30; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = HEAP32[$61>>2]|0; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $28; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $31; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = $64<<1; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
  _memcpy(($62|0),($63|0),($65|0))|0; //@line 1638 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $66 = $37; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ((($66)) + 4|0); //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $38; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $67; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $5; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $68; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $69 = $4; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $70 = HEAP32[$69>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$7>>2] = $70; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $71 = $6; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $2 = $71; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $72 = $2; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $73 = HEAP32[$72>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $74 = $5; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$74>>2] = $73; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $7; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $75 = $3; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $76 = HEAP32[$75>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $77 = $6; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$77>>2] = $76; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $78 = ((($38)) + 4|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $37; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = ((($79)) + 8|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $78; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $80; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $11; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $10 = $81; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $82 = $10; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $83 = HEAP32[$82>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$13>>2] = $83; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $84 = $12; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $8 = $84; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $85 = $8; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $86 = HEAP32[$85>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $87 = $11; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$87>>2] = $86; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $9 = $13; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $88 = $9; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $89 = HEAP32[$88>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $90 = $12; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$90>>2] = $89; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $16 = $38; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = $16; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = ((($91)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $92; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $93 = $15; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $93; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $37; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $95; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $96 = $19; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = ((($96)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $97; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $98 = $18; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $17 = $98; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $99 = $17; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $94; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $99; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = $23; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = $100; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $101 = $22; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $102 = HEAP32[$101>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$25>>2] = $102; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $103 = $24; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $103; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $104 = $20; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $105 = HEAP32[$104>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $106 = $23; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$106>>2] = $105; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = $25; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $107 = $21; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $108 = HEAP32[$107>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $109 = $24; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$109>>2] = $108; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $110 = $37; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = ((($110)) + 4|0); //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$111>>2]|0; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $37; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$113>>2] = $112; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $38; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = $26; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = ((($114)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = HEAP32[$115>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = HEAP32[$114>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = $116; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $119 = $117; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $120 = (($118) - ($119))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $121 = (($120|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($38,$121); //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $38; //@line 898 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 899 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $36 = $33; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $37 = ((($36)) + 4|0); //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = HEAP32[$37>>2]|0; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $36; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $31 = $38; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $39 = $30; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $40 = $31; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $27 = $39; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $40; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $41 = $27; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $42 = $28; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $43 = ((($41)) + 8|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = HEAP32[$43>>2]|0; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = ($42|0)!=($44|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($45)) {
   break;
  }
  $26 = $41; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $46 = $26; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $47 = ((($46)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $25 = $47; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $48 = $25; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $24 = $48; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = ((($49)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = HEAP32[$50>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($41)) + 8|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = HEAP32[$52>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = ((($53)) + -2|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$52>>2] = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $51; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $21 = $55; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $56 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $56; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $57; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $58; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $59; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $60 = HEAP32[$35>>2]|0; //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $61 = ($60|0)!=(0|0); //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if (!($61)) {
  STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $14 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = $14; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $63 = ((($62)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = $63; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = $13; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $12 = $64; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = ((($65)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = HEAP32[$66>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = HEAP32[$35>>2]|0; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $4 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $69 = $4; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $3 = $69; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = $3; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = ((($70)) + 12|0); //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $2 = $71; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = $2; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $1 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = HEAP32[$73>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = HEAP32[$69>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $76 = $74; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $77 = $75; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = (($76) - ($77))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = (($78|0) / 2)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $9 = $67; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $10 = $68; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $11 = $79; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $80 = $9; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $81 = $10; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $82 = $11; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $80; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $81; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $82; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $83 = $7; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $83; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $84 = $5; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($84); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $19; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $17; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = HEAP32[$25>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $26; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $5; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $28; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $4; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $29; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = ((($30)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $31; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $32; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = HEAP32[$33>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$29>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $34; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = (($36) - ($37))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($38|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($27) + ($39<<1)|0); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $7; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = HEAP32[$41>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $42; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $6; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $8; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = ((($44)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$45>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $47; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($48) - ($49))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = (($50|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = (($43) + ($51<<1)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $10; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = HEAP32[$53>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $54; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $15; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $56; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $14; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $57; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $13; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = ((($58)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $59; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $12; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $60; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $11; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = HEAP32[$61>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = HEAP32[$57>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = $62; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $63; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = (($64) - ($65))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = (($66|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = (($55) + ($67<<1)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($21,$24,$40,$52,$68); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 850 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $19; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = HEAP32[$23>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $24; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $17; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = HEAP32[$26>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $6; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $29; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = ((($31)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $32; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $33; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = HEAP32[$34>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($37) - ($38))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($39|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($28) + ($40<<1)|0); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $8; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = HEAP32[$42>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $43; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $13; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $45; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $12; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $46; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $11; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = ((($47)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $48; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $10; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $49; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $9; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = HEAP32[$50>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$46>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $52; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($53) - ($54))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = (($55|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = (($44) + ($56<<1)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $15; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = HEAP32[$58>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $59; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $21; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($60) + ($61<<1)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($22,$25,$41,$57,$62); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 845 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $42; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ((($50)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $51; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $40; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $53; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $39; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) - ($59))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = (($60|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($61) + 1)|0; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$35>>2] = $62; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $34; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($63)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $64; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$35>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $36; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ($65>>>0)>($66>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $32 = $63; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $32; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $68; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $31; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $69; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = ((($70)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $71; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = $29; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $28; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = HEAP32[$73>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = HEAP32[$69>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $74; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $75; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = (($76) - ($77))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = (($78|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $79; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $37; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $36; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = (($81>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ($80>>>0)>=($82>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($83) {
  $84 = $36; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $84; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $85 = $37; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $86 = $85<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$38>>2] = $86; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $38; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $35; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $87 = $25; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = $26; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $22 = $87; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $23 = $88; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $89 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $90 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $19 = $24; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $20 = $89; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $21 = $90; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $91 = $20; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $92 = HEAP32[$91>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $93 = $21; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $94 = HEAP32[$93>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $95 = ($92>>>0)<($94>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $96 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $97 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $98 = $95 ? $96 : $97; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $99 = HEAP32[$98>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $99; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $100 = $33; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = $18; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = ((($101)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = HEAP32[$102>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = HEAP32[$101>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $103; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $104; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = (($105) - ($106))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = (($107|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $45; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($46,$100,$108,$109); //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $45; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = ((($46)) + 8|0); //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$111>>2]|0; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $112; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $114 = $44; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $114; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $110; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $113; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $115; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $118; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $116; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $117; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $119; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $122; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $120; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $121; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $123; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $124 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $125; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $126 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $127 = HEAP16[$126>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP16[$124>>1] = $127; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $128 = ((($46)) + 8|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $129 = HEAP32[$128>>2]|0; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $130 = ((($129)) + 2|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$128>>2] = $130; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(82,($49|0),($46|0)); //@line 1577 "/usr/lib/emscripten/system/include/libcxx/vector"
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $47 = $133; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $134; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $135 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $136 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($135|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIhNS1_9allocatorIhEEEENS1_14default_deleteIS6_EEEEJRNS3_IsNS4_IsEEEEEJEEEvPKcPFT_DpT0_EDpT1_(12295,83); //@line 413 "haar.cpp"
 __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIsNS1_9allocatorIsEEEENS1_14default_deleteIS6_EEEEJjjRNS3_IhNS4_IhEEEEEJEEEvPKcPFT_DpT0_EDpT1_(12304,84); //@line 414 "haar.cpp"
 __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIhNS1_9allocatorIhEEEENS1_14default_deleteIS6_EEEEJNS2_INS3_IsNS4_IsEEEENS7_ISB_EEEEEJEEEvPKcPFT_DpT0_EDpT1_(12316,85); //@line 415 "haar.cpp"
 __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEEJEEEvPKcPFT_DpT0_EDpT1_(12328,86); //@line 416 "haar.cpp"
 __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEEJEEEvPKcPFT_DpT0_EDpT1_(12342,87); //@line 417 "haar.cpp"
 __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(12357,88); //@line 418 "haar.cpp"
 __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(12373,89); //@line 419 "haar.cpp"
 __ZN10emscripten8functionIlJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(12390,90); //@line 420 "haar.cpp"
 __ZN10emscripten8functionIlJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(12400,91); //@line 421 "haar.cpp"
 STACKTOP = sp;return; //@line 422 "haar.cpp"
}
function __Z8compressRNSt3__26vectorIsNS_9allocatorIsEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $40 = sp + 16|0;
 $42 = sp + 8|0;
 $43 = sp + 176|0;
 $41 = $0;
 $46 = $41; //@line 404 "haar.cpp"
 $47 = (__Z6encodeRNSt3__26vectorIsNS_9allocatorIsEEEE($46)|0); //@line 404 "haar.cpp"
 HEAP32[$42>>2] = $47; //@line 404 "haar.cpp"
 $$expand_i1_val = 0; //@line 405 "haar.cpp"
 HEAP8[$43>>0] = $$expand_i1_val; //@line 405 "haar.cpp"
 $39 = $42; //@line 405 "haar.cpp"
 $48 = $39; //@line 405 "haar.cpp"
 $38 = $48; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
 $49 = $38; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
 $37 = $49; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $37; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = HEAP32[$50>>2]|0; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
 __THREW__ = 0;
 $52 = (invoke_ii(92,($51|0))|0); //@line 405 "haar.cpp"
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $56 = ___cxa_find_matching_catch_2()|0;
  $57 = tempRet0;
  $44 = $56; //@line 407 "haar.cpp"
  $45 = $57; //@line 407 "haar.cpp"
  $24 = $42; //@line 407 "haar.cpp"
  $58 = $24; //@line 407 "haar.cpp"
  $21 = $58; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $22 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $21; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $59; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $60 = $20; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $19 = $60; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $19; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = HEAP32[$61>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = $62; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $22; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $59; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $16; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $64; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = $15; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$65>>2] = $63; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $23; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = ($66|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($67)) {
   $104 = $44; //@line 407 "haar.cpp"
   $105 = $45; //@line 407 "haar.cpp"
   ___resumeException($104|0);
   // unreachable;
  }
  $14 = $59; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $14; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $68; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = $13; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $23; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $69; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $70; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $18; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $72 = ($71|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($72) {
   $104 = $44; //@line 407 "haar.cpp"
   $105 = $45; //@line 407 "haar.cpp"
   ___resumeException($104|0);
   // unreachable;
  }
  __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($71); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($71); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $104 = $44; //@line 407 "haar.cpp"
  $105 = $45; //@line 407 "haar.cpp"
  ___resumeException($104|0);
  // unreachable;
 }
 HEAP32[$40>>2] = $52; //@line 405 "haar.cpp"
 $$expand_i1_val2 = 1; //@line 406 "haar.cpp"
 HEAP8[$43>>0] = $$expand_i1_val2; //@line 406 "haar.cpp"
 $$pre_trunc = HEAP8[$43>>0]|0; //@line 407 "haar.cpp"
 $55 = $$pre_trunc&1; //@line 407 "haar.cpp"
 if (!($55)) {
  $12 = $40; //@line 407 "haar.cpp"
  $73 = $12; //@line 407 "haar.cpp"
  $9 = $73; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $74 = $9; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $74; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $75 = $8; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $75; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $76 = $7; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $77 = HEAP32[$76>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $77; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $78 = $10; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $74; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $79 = $4; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $79; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $80 = $3; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$80>>2] = $78; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $81 = $11; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $82 = ($81|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($82) {
   $2 = $74; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $83 = $2; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $1 = $83; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $84 = $1; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $85 = $11; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $5 = $84; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $6 = $85; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $86 = $6; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   $87 = ($86|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   if (!($87)) {
    __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($86); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZdlPv($86); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   }
  }
 }
 $36 = $42; //@line 407 "haar.cpp"
 $88 = $36; //@line 407 "haar.cpp"
 $33 = $88; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $89 = $33; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $89; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $90 = $32; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $90; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $91 = $31; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $92 = HEAP32[$91>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $92; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $93 = $34; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $89; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $28; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $94; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $27; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$95>>2] = $93; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = $35; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 $97 = ($96|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($97)) {
  $103 = HEAP32[$40>>2]|0; //@line 407 "haar.cpp"
  STACKTOP = sp;return ($103|0); //@line 407 "haar.cpp"
 }
 $26 = $89; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $98 = $26; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $98; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $99 = $25; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $100 = $35; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $99; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $100; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $101 = $30; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $102 = ($101|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($102) {
  $103 = HEAP32[$40>>2]|0; //@line 407 "haar.cpp"
  STACKTOP = sp;return ($103|0); //@line 407 "haar.cpp"
 }
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($101); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZdlPv($101); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $103 = HEAP32[$40>>2]|0; //@line 407 "haar.cpp"
 STACKTOP = sp;return ($103|0); //@line 407 "haar.cpp"
}
function __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIhNS1_9allocatorIhEEEENS1_14default_deleteIS6_EEEEJRNS3_IsNS4_IsEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 93; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEERNS6_IsNS7_IsEEEEEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEERNS6_IsNS7_IsEEEEEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z11encodeImagejjRNSt3__26vectorIhNS_9allocatorIhEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1376|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1376|0);
 $5 = sp + 1336|0;
 $8 = sp + 1324|0;
 $22 = sp + 1268|0;
 $25 = sp + 1256|0;
 $42 = sp + 48|0;
 $47 = sp + 1367|0;
 $57 = sp + 1366|0;
 $61 = sp + 1124|0;
 $64 = sp + 1112|0;
 $68 = sp + 1096|0;
 $71 = sp + 1084|0;
 $83 = sp + 1036|0;
 $86 = sp + 1024|0;
 $90 = sp + 1008|0;
 $93 = sp + 996|0;
 $104 = sp + 40|0;
 $109 = sp + 1365|0;
 $120 = sp + 1364|0;
 $133 = sp + 32|0;
 $138 = sp + 1363|0;
 $149 = sp + 1362|0;
 $159 = sp + 756|0;
 $160 = sp + 24|0;
 $163 = sp + 744|0;
 $164 = sp + 1361|0;
 $165 = sp + 16|0;
 $177 = sp + 1360|0;
 $180 = sp + 688|0;
 $183 = sp + 676|0;
 $186 = sp + 664|0;
 $190 = sp + 648|0;
 $193 = sp + 636|0;
 $219 = sp + 532|0;
 $222 = sp + 520|0;
 $226 = sp + 504|0;
 $229 = sp + 492|0;
 $239 = sp + 8|0;
 $244 = sp + 1359|0;
 $254 = sp + 1358|0;
 $268 = sp;
 $273 = sp + 1357|0;
 $284 = sp + 1356|0;
 $303 = sp + 220|0;
 $306 = sp + 208|0;
 $309 = sp + 196|0;
 $313 = sp + 172|0;
 $315 = sp + 156|0;
 $321 = sp + 1354|0;
 $324 = sp + 124|0;
 $325 = sp + 120|0;
 $327 = sp + 112|0;
 $328 = sp + 1352|0;
 $329 = sp + 1350|0;
 $331 = sp + 104|0;
 $332 = sp + 100|0;
 $333 = sp + 88|0;
 $335 = sp + 80|0;
 $336 = sp + 76|0;
 $337 = sp + 64|0;
 $339 = sp + 56|0;
 $340 = sp + 52|0;
 $341 = sp + 1348|0;
 $310 = $0;
 $311 = $1;
 $312 = $2;
 $342 = $311; //@line 301 "haar.cpp"
 $343 = $311; //@line 301 "haar.cpp"
 $344 = (($343) - 1)|0; //@line 301 "haar.cpp"
 $345 = $342 & $344; //@line 301 "haar.cpp"
 $346 = ($345|0)==(0); //@line 301 "haar.cpp"
 $347 = $311; //@line 301 "haar.cpp"
 $348 = ($347|0)!=(0); //@line 301 "haar.cpp"
 $or$cond = $346 & $348; //@line 301 "haar.cpp"
 if (!($or$cond)) {
  $307 = $309; //@line 302 "haar.cpp"
  $308 = 0; //@line 302 "haar.cpp"
  $349 = $307; //@line 302 "haar.cpp"
  $305 = $349; //@line 2603 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$306>>2] = 0; //@line 2603 "/usr/lib/emscripten/system/include/libcxx/memory"
  $350 = $305; //@line 2603 "/usr/lib/emscripten/system/include/libcxx/memory"
  $304 = $306; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $351 = $304; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $352 = HEAP32[$351>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $302 = $350; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$303>>2] = $352; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $353 = $302; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $301 = $303; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $354 = $301; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $355 = HEAP32[$354>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$353>>2] = $355; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $828 = HEAP32[$309>>2]|0; //@line 337 "haar.cpp"
  STACKTOP = sp;return ($828|0); //@line 337 "haar.cpp"
 }
 $356 = $310; //@line 304 "haar.cpp"
 __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEEC2Ej($313,$356); //@line 304 "haar.cpp"
 $314 = 0; //@line 308 "haar.cpp"
 L5: while(1) {
  $357 = $314; //@line 308 "haar.cpp"
  $358 = $311; //@line 308 "haar.cpp"
  $359 = ($357>>>0)<($358>>>0); //@line 308 "haar.cpp"
  if (!($359)) {
   label = 25;
   break;
  }
  $360 = $310; //@line 309 "haar.cpp"
  __THREW__ = 0;
  invoke_vii(94,($315|0),($360|0)); //@line 309 "haar.cpp"
  $361 = __THREW__; __THREW__ = 0;
  $362 = $361&1;
  if ($362) {
   break;
  }
  $318 = 0; //@line 310 "haar.cpp"
  while(1) {
   $363 = $318; //@line 310 "haar.cpp"
   $364 = $311; //@line 310 "haar.cpp"
   $365 = ($363>>>0)<($364>>>0); //@line 310 "haar.cpp"
   if (!($365)) {
    break;
   }
   $319 = 0; //@line 311 "haar.cpp"
   while(1) {
    $366 = $319; //@line 311 "haar.cpp"
    $367 = $310; //@line 311 "haar.cpp"
    $368 = ($366>>>0)<($367>>>0); //@line 311 "haar.cpp"
    $369 = $318; //@line 312 "haar.cpp"
    if (!($368)) {
     break;
    }
    $370 = $314; //@line 312 "haar.cpp"
    $371 = $311; //@line 312 "haar.cpp"
    $372 = Math_imul($370, $371)|0; //@line 312 "haar.cpp"
    $373 = (($369) + ($372))|0; //@line 312 "haar.cpp"
    $374 = $310; //@line 312 "haar.cpp"
    $375 = Math_imul($373, $374)|0; //@line 312 "haar.cpp"
    $376 = $319; //@line 312 "haar.cpp"
    $377 = (($375) + ($376))|0; //@line 312 "haar.cpp"
    $320 = $377; //@line 312 "haar.cpp"
    $378 = $319; //@line 313 "haar.cpp"
    $299 = $315; //@line 313 "haar.cpp"
    $300 = $378; //@line 313 "haar.cpp"
    $379 = $299; //@line 313 "haar.cpp"
    $380 = $300; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $381 = HEAP32[$379>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $382 = (($381) + (($380*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $383 = $312; //@line 313 "haar.cpp"
    $384 = $320; //@line 313 "haar.cpp"
    $285 = $383; //@line 313 "haar.cpp"
    $286 = $384; //@line 313 "haar.cpp"
    $385 = $285; //@line 313 "haar.cpp"
    $386 = $286; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $387 = HEAP32[$385>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $388 = (($387) + ($386)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $389 = HEAP8[$388>>0]|0; //@line 313 "haar.cpp"
    $390 = $389&255; //@line 313 "haar.cpp"
    HEAP16[$321>>1] = $390; //@line 313 "haar.cpp"
    $282 = $382; //@line 313 "haar.cpp"
    $283 = $321; //@line 313 "haar.cpp"
    $391 = $282; //@line 313 "haar.cpp"
    $392 = ((($391)) + 4|0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $393 = HEAP32[$392>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $281 = $391; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $394 = $281; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $395 = ((($394)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $280 = $395; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $396 = $280; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $279 = $396; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $397 = $279; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $398 = HEAP32[$397>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $399 = ($393>>>0)<($398>>>0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    if ($399) {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($284,$391,1); //@line 1606 "/usr/lib/emscripten/system/include/libcxx/vector"
     $278 = $391; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $400 = $278; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $401 = ((($400)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $277 = $401; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $402 = $277; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $276 = $402; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $403 = $276; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $404 = ((($391)) + 4|0); //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $405 = HEAP32[$404>>2]|0; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $274 = $405; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $406 = $274; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
     $407 = $283; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
     $259 = $407; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
     $408 = $259; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $270 = $403; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $271 = $406; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $272 = $408; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $409 = $270; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $410 = $271; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $411 = $272; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $269 = $411; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $412 = $269; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     ;HEAP8[$268>>0]=HEAP8[$273>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $265 = $409; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $266 = $410; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $267 = $412; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $413 = $265; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $414 = $266; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $415 = $267; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $264 = $415; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $416 = $264; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $261 = $413; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $262 = $414; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $263 = $416; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $417 = $262; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $418 = $263; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $260 = $418; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $419 = $260; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $420 = HEAP16[$419>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP16[$417>>1] = $420; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($284); //@line 1610 "/usr/lib/emscripten/system/include/libcxx/vector"
     $421 = ((($391)) + 4|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     $422 = HEAP32[$421>>2]|0; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     $423 = ((($422)) + 2|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP32[$421>>2] = $423; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
    } else {
     $424 = $283; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $275 = $424; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $425 = $275; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     __THREW__ = 0;
     invoke_vii(95,($391|0),($425|0)); //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $426 = __THREW__; __THREW__ = 0;
     $427 = $426&1;
     if ($427) {
      label = 15;
      break L5;
     }
    }
    $428 = $319; //@line 311 "haar.cpp"
    $429 = (($428) + 1)|0; //@line 311 "haar.cpp"
    $319 = $429; //@line 311 "haar.cpp"
   }
   $434 = (($369) + 1)|0; //@line 310 "haar.cpp"
   $318 = $434; //@line 310 "haar.cpp"
  }
  $322 = 0; //@line 317 "haar.cpp"
  while(1) {
   $435 = $322; //@line 317 "haar.cpp"
   $436 = $310; //@line 317 "haar.cpp"
   $437 = ($435>>>0)<($436>>>0); //@line 317 "haar.cpp"
   if (!($437)) {
    break;
   }
   $438 = $322; //@line 318 "haar.cpp"
   $257 = $313; //@line 318 "haar.cpp"
   $258 = $438; //@line 318 "haar.cpp"
   $439 = $257; //@line 318 "haar.cpp"
   $440 = $258; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $441 = HEAP32[$439>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $442 = (($441) + (($440*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $443 = $322; //@line 318 "haar.cpp"
   $255 = $315; //@line 318 "haar.cpp"
   $256 = $443; //@line 318 "haar.cpp"
   $444 = $255; //@line 318 "haar.cpp"
   $445 = $256; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $446 = HEAP32[$444>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $447 = (($446) + (($445*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $252 = $442; //@line 318 "haar.cpp"
   $253 = $447; //@line 318 "haar.cpp"
   $448 = $252; //@line 318 "haar.cpp"
   $449 = ((($448)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $450 = HEAP32[$449>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $251 = $448; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $451 = $251; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $452 = ((($451)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $250 = $452; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $453 = $250; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $249 = $453; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $454 = $249; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $455 = HEAP32[$454>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $456 = ($450|0)!=($455|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   if ($456) {
    __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($254,$448,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
    $248 = $448; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $457 = $248; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $458 = ((($457)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $247 = $458; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $459 = $247; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $246 = $459; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $460 = $246; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $461 = ((($448)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $462 = HEAP32[$461>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $245 = $462; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $463 = $245; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
    $464 = $253; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $241 = $460; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $242 = $463; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $243 = $464; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $465 = $241; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $466 = $242; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $467 = $243; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $240 = $467; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $468 = $240; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    ;HEAP8[$239>>0]=HEAP8[$244>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $236 = $465; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $237 = $466; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $238 = $468; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $469 = $236; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $470 = $237; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $471 = $238; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $235 = $471; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $472 = $235; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $232 = $469; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $233 = $470; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $234 = $472; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $473 = $233; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $474 = $234; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $231 = $474; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $475 = $231; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __THREW__ = 0;
    invoke_vii(96,($473|0),($475|0)); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $476 = __THREW__; __THREW__ = 0;
    $477 = $476&1;
    if ($477) {
     label = 15;
     break L5;
    }
    __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($254); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
    $478 = ((($448)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $479 = HEAP32[$478>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $480 = ((($479)) + 12|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$478>>2] = $480; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   } else {
    $481 = $253; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    __THREW__ = 0;
    invoke_vii(97,($448|0),($481|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    $482 = __THREW__; __THREW__ = 0;
    $483 = $482&1;
    if ($483) {
     label = 15;
     break L5;
    }
   }
   $484 = $322; //@line 317 "haar.cpp"
   $485 = (($484) + 1)|0; //@line 317 "haar.cpp"
   $322 = $485; //@line 317 "haar.cpp"
  }
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($315); //@line 320 "haar.cpp"
  $486 = $314; //@line 308 "haar.cpp"
  $487 = (($486) + 1)|0; //@line 308 "haar.cpp"
  $314 = $487; //@line 308 "haar.cpp"
 }
 if ((label|0) == 15) {
  $432 = ___cxa_find_matching_catch_2()|0;
  $433 = tempRet0;
  $316 = $432; //@line 337 "haar.cpp"
  $317 = $433; //@line 337 "haar.cpp"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($315); //@line 320 "haar.cpp"
  __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
  $826 = $316; //@line 337 "haar.cpp"
  $827 = $317; //@line 337 "haar.cpp"
  ___resumeException($826|0);
  // unreachable;
 }
 L33: do {
  if ((label|0) == 25) {
   $323 = $313; //@line 323 "haar.cpp"
   $488 = $323; //@line 323 "haar.cpp"
   $230 = $488; //@line 323 "haar.cpp"
   $489 = $230; //@line 323 "haar.cpp"
   $490 = HEAP32[$489>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $227 = $489; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $228 = $490; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $491 = $228; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $224 = $226; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $225 = $491; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $492 = $224; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $493 = $225; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$492>>2] = $493; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $494 = HEAP32[$226>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$229>>2] = $494; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $495 = HEAP32[$229>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$324>>2] = $495; //@line 323 "haar.cpp"
   $496 = $323; //@line 323 "haar.cpp"
   $223 = $496; //@line 323 "haar.cpp"
   $497 = $223; //@line 323 "haar.cpp"
   $498 = ((($497)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $499 = HEAP32[$498>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $220 = $497; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $221 = $499; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $500 = $221; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $217 = $219; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $218 = $500; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $501 = $217; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $502 = $218; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$501>>2] = $502; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $503 = HEAP32[$219>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$222>>2] = $503; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $504 = HEAP32[$222>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$325>>2] = $504; //@line 323 "haar.cpp"
   while(1) {
    $215 = $324; //@line 323 "haar.cpp"
    $216 = $325; //@line 323 "haar.cpp"
    $505 = $215; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $506 = $216; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $213 = $505; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $214 = $506; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $507 = $213; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $212 = $507; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $508 = $212; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $509 = HEAP32[$508>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $510 = $214; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $211 = $510; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $511 = $211; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $512 = HEAP32[$511>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $513 = ($509|0)==($512|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $514 = $513 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    if (!($514)) {
     break;
    }
    $210 = $324; //@line 323 "haar.cpp"
    $515 = $210; //@line 323 "haar.cpp"
    $516 = HEAP32[$515>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $326 = $516; //@line 323 "haar.cpp"
    $517 = $326; //@line 324 "haar.cpp"
    __THREW__ = 0;
    (invoke_ii(98,($517|0))|0); //@line 324 "haar.cpp"
    $518 = __THREW__; __THREW__ = 0;
    $519 = $518&1;
    if ($519) {
     break L33;
    }
    $209 = $324; //@line 323 "haar.cpp"
    $520 = $209; //@line 323 "haar.cpp"
    $521 = HEAP32[$520>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $522 = ((($521)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$520>>2] = $522; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   }
   __THREW__ = 0;
   $523 = (invoke_ii(43,12)|0); //@line 326 "haar.cpp"
   $524 = __THREW__; __THREW__ = 0;
   $525 = $524&1;
   if (!($525)) {
    $196 = $523; //@line 326 "haar.cpp"
    $526 = $196; //@line 326 "haar.cpp"
    $195 = $526; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
    $527 = $195; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
    $194 = $527; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$527>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
    $528 = ((($527)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$528>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
    $529 = ((($527)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $192 = $529; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$193>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $530 = $192; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $191 = $193; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $531 = $191; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $532 = HEAP32[$531>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $189 = $530; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$190>>2] = $532; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $533 = $189; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $188 = $533; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
    $187 = $190; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $534 = $187; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $535 = HEAP32[$534>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$533>>2] = $535; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $185 = $327; //@line 326 "haar.cpp"
    HEAP32[$186>>2] = $523; //@line 326 "haar.cpp"
    $536 = $185; //@line 326 "haar.cpp"
    $184 = $186; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $537 = $184; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $538 = HEAP32[$537>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $182 = $536; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$183>>2] = $538; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $539 = $182; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $181 = $183; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $540 = $181; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $541 = HEAP32[$540>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $179 = $539; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$180>>2] = $541; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $542 = $179; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $178 = $180; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $543 = $178; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $544 = HEAP32[$543>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$542>>2] = $544; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $153 = $327; //@line 328 "haar.cpp"
    $545 = $153; //@line 328 "haar.cpp"
    $152 = $545; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
    $546 = $152; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
    $151 = $546; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
    $547 = $151; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
    $548 = HEAP32[$547>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
    $549 = $310; //@line 328 "haar.cpp"
    $550 = $549&65535; //@line 328 "haar.cpp"
    HEAP16[$328>>1] = $550; //@line 328 "haar.cpp"
    $147 = $548; //@line 328 "haar.cpp"
    $148 = $328; //@line 328 "haar.cpp"
    $551 = $147; //@line 328 "haar.cpp"
    $552 = ((($551)) + 4|0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $553 = HEAP32[$552>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $146 = $551; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $554 = $146; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $555 = ((($554)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $145 = $555; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $556 = $145; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
    $144 = $556; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $557 = $144; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $558 = HEAP32[$557>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    $559 = ($553>>>0)<($558>>>0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
    if ($559) {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($149,$551,1); //@line 1606 "/usr/lib/emscripten/system/include/libcxx/vector"
     $143 = $551; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $560 = $143; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $561 = ((($560)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $142 = $561; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $562 = $142; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
     $141 = $562; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $563 = $141; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $564 = ((($551)) + 4|0); //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $565 = HEAP32[$564>>2]|0; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $139 = $565; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
     $566 = $139; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
     $567 = $148; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
     $124 = $567; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
     $568 = $124; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $135 = $563; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $136 = $566; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $137 = $568; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
     $569 = $135; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $570 = $136; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $571 = $137; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $134 = $571; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
     $572 = $134; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     ;HEAP8[$133>>0]=HEAP8[$138>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $130 = $569; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $131 = $570; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $132 = $572; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
     $573 = $130; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $574 = $131; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $575 = $132; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $129 = $575; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $576 = $129; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $126 = $573; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $127 = $574; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $128 = $576; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
     $577 = $127; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $578 = $128; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $125 = $578; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $579 = $125; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $580 = HEAP16[$579>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP16[$577>>1] = $580; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($149); //@line 1610 "/usr/lib/emscripten/system/include/libcxx/vector"
     $581 = ((($551)) + 4|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     $582 = HEAP32[$581>>2]|0; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     $583 = ((($582)) + 2|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP32[$581>>2] = $583; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
     label = 33;
    } else {
     $584 = $148; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $140 = $584; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $585 = $140; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     __THREW__ = 0;
     invoke_vii(95,($551|0),($585|0)); //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
     $586 = __THREW__; __THREW__ = 0;
     $587 = $586&1;
     if ($587) {
      label = 48;
     } else {
      label = 33;
     }
    }
    L44: do {
     if ((label|0) == 33) {
      $123 = $327; //@line 329 "haar.cpp"
      $588 = $123; //@line 329 "haar.cpp"
      $122 = $588; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $589 = $122; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $121 = $589; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $590 = $121; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $591 = HEAP32[$590>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $592 = $311; //@line 329 "haar.cpp"
      $593 = $592&65535; //@line 329 "haar.cpp"
      HEAP16[$329>>1] = $593; //@line 329 "haar.cpp"
      $118 = $591; //@line 329 "haar.cpp"
      $119 = $329; //@line 329 "haar.cpp"
      $594 = $118; //@line 329 "haar.cpp"
      $595 = ((($594)) + 4|0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $596 = HEAP32[$595>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $117 = $594; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $597 = $117; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $598 = ((($597)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $116 = $598; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $599 = $116; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $115 = $599; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $600 = $115; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $601 = HEAP32[$600>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $602 = ($596>>>0)<($601>>>0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      if ($602) {
       __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($120,$594,1); //@line 1606 "/usr/lib/emscripten/system/include/libcxx/vector"
       $114 = $594; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $603 = $114; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $604 = ((($603)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $113 = $604; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $605 = $113; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $112 = $605; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $606 = $112; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $607 = ((($594)) + 4|0); //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $608 = HEAP32[$607>>2]|0; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $110 = $608; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $609 = $110; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
       $610 = $119; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
       $95 = $610; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
       $611 = $95; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $106 = $606; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $107 = $609; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $108 = $611; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $612 = $106; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $613 = $107; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $614 = $108; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $105 = $614; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $615 = $105; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       ;HEAP8[$104>>0]=HEAP8[$109>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $101 = $612; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $102 = $613; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $103 = $615; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $616 = $101; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $617 = $102; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $618 = $103; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $100 = $618; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $619 = $100; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $97 = $616; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $98 = $617; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $99 = $619; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $620 = $98; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $621 = $99; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $96 = $621; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $622 = $96; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $623 = HEAP16[$622>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP16[$620>>1] = $623; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($120); //@line 1610 "/usr/lib/emscripten/system/include/libcxx/vector"
       $624 = ((($594)) + 4|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       $625 = HEAP32[$624>>2]|0; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       $626 = ((($625)) + 2|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$624>>2] = $626; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
      } else {
       $627 = $119; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $111 = $627; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $628 = $111; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       __THREW__ = 0;
       invoke_vii(95,($594|0),($628|0)); //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $629 = __THREW__; __THREW__ = 0;
       $630 = $629&1;
       if ($630) {
        label = 48;
        break;
       }
      }
      $330 = $313; //@line 330 "haar.cpp"
      $631 = $330; //@line 330 "haar.cpp"
      $94 = $631; //@line 330 "haar.cpp"
      $632 = $94; //@line 330 "haar.cpp"
      $633 = HEAP32[$632>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
      $91 = $632; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
      $92 = $633; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
      $634 = $92; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $88 = $90; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $89 = $634; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $635 = $88; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $636 = $89; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
      HEAP32[$635>>2] = $636; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
      $637 = HEAP32[$90>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP32[$93>>2] = $637; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
      $638 = HEAP32[$93>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP32[$331>>2] = $638; //@line 330 "haar.cpp"
      $639 = $330; //@line 330 "haar.cpp"
      $87 = $639; //@line 330 "haar.cpp"
      $640 = $87; //@line 330 "haar.cpp"
      $641 = ((($640)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      $642 = HEAP32[$641>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      $84 = $640; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      $85 = $642; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      $643 = $85; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $81 = $83; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $82 = $643; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $644 = $81; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      $645 = $82; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
      HEAP32[$644>>2] = $645; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
      $646 = HEAP32[$83>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP32[$86>>2] = $646; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      $647 = HEAP32[$86>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP32[$332>>2] = $647; //@line 330 "haar.cpp"
      L50: while(1) {
       $79 = $331; //@line 330 "haar.cpp"
       $80 = $332; //@line 330 "haar.cpp"
       $648 = $79; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $649 = $80; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $77 = $648; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $78 = $649; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $650 = $77; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $76 = $650; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $651 = $76; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $652 = HEAP32[$651>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $653 = $78; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $75 = $653; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $654 = $75; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $655 = HEAP32[$654>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $656 = ($652|0)==($655|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $657 = $656 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
       if (!($657)) {
        label = 54;
        break;
       }
       $74 = $331; //@line 330 "haar.cpp"
       $658 = $74; //@line 330 "haar.cpp"
       $659 = HEAP32[$658>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
       __THREW__ = 0;
       invoke_vii(99,($333|0),($659|0)); //@line 330 "haar.cpp"
       $660 = __THREW__; __THREW__ = 0;
       $661 = $660&1;
       if ($661) {
        label = 48;
        break L44;
       }
       $334 = $333; //@line 331 "haar.cpp"
       $662 = $334; //@line 331 "haar.cpp"
       $72 = $662; //@line 331 "haar.cpp"
       $663 = $72; //@line 331 "haar.cpp"
       $664 = HEAP32[$663>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
       $69 = $663; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
       $70 = $664; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
       $665 = $70; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $66 = $68; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $67 = $665; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $666 = $66; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $667 = $67; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
       HEAP32[$666>>2] = $667; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $668 = HEAP32[$68>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$71>>2] = $668; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
       $669 = HEAP32[$71>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$335>>2] = $669; //@line 331 "haar.cpp"
       $670 = $334; //@line 331 "haar.cpp"
       $65 = $670; //@line 331 "haar.cpp"
       $671 = $65; //@line 331 "haar.cpp"
       $672 = ((($671)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       $673 = HEAP32[$672>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       $62 = $671; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       $63 = $673; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       $674 = $63; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $59 = $61; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $60 = $674; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $675 = $59; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       $676 = $60; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
       HEAP32[$675>>2] = $676; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $677 = HEAP32[$61>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$64>>2] = $677; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       $678 = HEAP32[$64>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$336>>2] = $678; //@line 331 "haar.cpp"
       while(1) {
        $32 = $335; //@line 331 "haar.cpp"
        $33 = $336; //@line 331 "haar.cpp"
        $679 = $32; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $680 = $33; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $30 = $679; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $31 = $680; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $681 = $30; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $29 = $681; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $682 = $29; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $683 = HEAP32[$682>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $684 = $31; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $28 = $684; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $685 = $28; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $686 = HEAP32[$685>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $687 = ($683|0)==($686|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $688 = $687 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
        if (!($688)) {
         break;
        }
        $27 = $335; //@line 331 "haar.cpp"
        $689 = $27; //@line 331 "haar.cpp"
        $690 = HEAP32[$689>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
        __THREW__ = 0;
        invoke_vii(96,($337|0),($690|0)); //@line 331 "haar.cpp"
        $691 = __THREW__; __THREW__ = 0;
        $692 = $691&1;
        if ($692) {
         label = 49;
         break L50;
        }
        $338 = $337; //@line 332 "haar.cpp"
        $693 = $338; //@line 332 "haar.cpp"
        $26 = $693; //@line 332 "haar.cpp"
        $694 = $26; //@line 332 "haar.cpp"
        $695 = HEAP32[$694>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
        $23 = $694; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
        $24 = $695; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
        $696 = $24; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $20 = $22; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $21 = $696; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $697 = $20; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $698 = $21; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
        HEAP32[$697>>2] = $698; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $699 = HEAP32[$22>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        HEAP32[$25>>2] = $699; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
        $700 = HEAP32[$25>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
        HEAP32[$339>>2] = $700; //@line 332 "haar.cpp"
        $701 = $338; //@line 332 "haar.cpp"
        $9 = $701; //@line 332 "haar.cpp"
        $702 = $9; //@line 332 "haar.cpp"
        $703 = ((($702)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        $704 = HEAP32[$703>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        $6 = $702; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        $7 = $704; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        $705 = $7; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $3 = $5; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $4 = $705; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $706 = $3; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        $707 = $4; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
        HEAP32[$706>>2] = $707; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $708 = HEAP32[$5>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
        HEAP32[$8>>2] = $708; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        $709 = HEAP32[$8>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
        HEAP32[$340>>2] = $709; //@line 332 "haar.cpp"
        while(1) {
         $14 = $339; //@line 332 "haar.cpp"
         $15 = $340; //@line 332 "haar.cpp"
         $710 = $14; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $711 = $15; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $12 = $710; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $13 = $711; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $712 = $12; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $11 = $712; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $713 = $11; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $714 = HEAP32[$713>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $715 = $13; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $10 = $715; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $716 = $10; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $717 = HEAP32[$716>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $718 = ($714|0)==($717|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $719 = $718 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
         if (!($719)) {
          break;
         }
         $16 = $339; //@line 332 "haar.cpp"
         $720 = $16; //@line 332 "haar.cpp"
         $721 = HEAP32[$720>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $722 = HEAP16[$721>>1]|0; //@line 332 "haar.cpp"
         HEAP16[$341>>1] = $722; //@line 332 "haar.cpp"
         $19 = $327; //@line 333 "haar.cpp"
         $723 = $19; //@line 333 "haar.cpp"
         $18 = $723; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
         $724 = $18; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
         $17 = $724; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
         $725 = $17; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
         $726 = HEAP32[$725>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
         $55 = $726; //@line 333 "haar.cpp"
         $56 = $341; //@line 333 "haar.cpp"
         $727 = $55; //@line 333 "haar.cpp"
         $728 = ((($727)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         $729 = HEAP32[$728>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         $54 = $727; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         $730 = $54; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         $731 = ((($730)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
         $53 = $731; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
         $732 = $53; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
         $52 = $732; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
         $733 = $52; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
         $734 = HEAP32[$733>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         $735 = ($729|0)!=($734|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
         if ($735) {
          __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($57,$727,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
          $51 = $727; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
          $736 = $51; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
          $737 = ((($736)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
          $50 = $737; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
          $738 = $50; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
          $49 = $738; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
          $739 = $49; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
          $740 = ((($727)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
          $741 = HEAP32[$740>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
          $48 = $741; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
          $742 = $48; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
          $743 = $56; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
          $44 = $739; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
          $45 = $742; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
          $46 = $743; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
          $744 = $44; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
          $745 = $45; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
          $746 = $46; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
          $43 = $746; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
          $747 = $43; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
          ;HEAP8[$42>>0]=HEAP8[$47>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
          $39 = $744; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
          $40 = $745; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
          $41 = $747; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
          $748 = $39; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $749 = $40; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $750 = $41; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $38 = $750; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $751 = $38; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
          $35 = $748; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $36 = $749; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $37 = $751; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
          $752 = $36; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
          $753 = $37; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
          $34 = $753; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
          $754 = $34; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
          $755 = HEAP16[$754>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
          HEAP16[$752>>1] = $755; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
          __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($57); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
          $756 = ((($727)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
          $757 = HEAP32[$756>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
          $758 = ((($757)) + 2|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
          HEAP32[$756>>2] = $758; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
         } else {
          $759 = $56; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
          __THREW__ = 0;
          invoke_vii(100,($727|0),($759|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
          $760 = __THREW__; __THREW__ = 0;
          $761 = $760&1;
          if ($761) {
           label = 50;
           break L50;
          }
         }
         $58 = $339; //@line 332 "haar.cpp"
         $762 = $58; //@line 332 "haar.cpp"
         $763 = HEAP32[$762>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
         $764 = ((($763)) + 2|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
         HEAP32[$762>>2] = $764; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
        }
        __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($337); //@line 334 "haar.cpp"
        $73 = $335; //@line 331 "haar.cpp"
        $771 = $73; //@line 331 "haar.cpp"
        $772 = HEAP32[$771>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
        $773 = ((($772)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
        HEAP32[$771>>2] = $773; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
       }
       __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($333); //@line 334 "haar.cpp"
       $150 = $331; //@line 330 "haar.cpp"
       $774 = $150; //@line 330 "haar.cpp"
       $775 = HEAP32[$774>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
       $776 = ((($775)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
       HEAP32[$774>>2] = $776; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
      }
      if ((label|0) == 49) {
       $767 = ___cxa_find_matching_catch_2()|0;
       $768 = tempRet0;
       $316 = $767; //@line 337 "haar.cpp"
       $317 = $768; //@line 337 "haar.cpp"
      }
      else if ((label|0) == 50) {
       $769 = ___cxa_find_matching_catch_2()|0;
       $770 = tempRet0;
       $316 = $769; //@line 337 "haar.cpp"
       $317 = $770; //@line 337 "haar.cpp"
       __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($337); //@line 334 "haar.cpp"
      }
      else if ((label|0) == 54) {
       $175 = $309; //@line 336 "haar.cpp"
       $176 = $327; //@line 336 "haar.cpp"
       $777 = $175; //@line 336 "haar.cpp"
       $778 = $176; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $173 = $778; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $779 = $173; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $172 = $779; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
       $780 = $172; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
       $171 = $780; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $781 = $171; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $782 = HEAP32[$781>>2]|0; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
       $174 = $782; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
       $170 = $779; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
       $783 = $170; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
       $169 = $783; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $784 = $169; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$784>>2] = 0; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
       $785 = $174; //@line 2743 "/usr/lib/emscripten/system/include/libcxx/memory"
       $786 = $176; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $168 = $786; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $787 = $168; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $167 = $787; //@line 2732 "/usr/lib/emscripten/system/include/libcxx/memory"
       $788 = $167; //@line 2732 "/usr/lib/emscripten/system/include/libcxx/memory"
       $166 = $788; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $789 = $166; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $154 = $789; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       ;HEAP8[$165>>0]=HEAP8[$177>>0]|0; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $162 = $777; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$163>>2] = $785; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $790 = $162; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
       $161 = $163; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       $791 = $161; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $792 = HEAP32[$791>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       $155 = $165; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       ;HEAP8[$160>>0]=HEAP8[$164>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       $158 = $790; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$159>>2] = $792; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       $793 = $158; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
       $157 = $160; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
       $156 = $159; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
       $794 = $156; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $795 = HEAP32[$794>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$793>>2] = $795; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
       $208 = $327; //@line 337 "haar.cpp"
       $796 = $208; //@line 337 "haar.cpp"
       $205 = $796; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $206 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $797 = $205; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
       $204 = $797; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $798 = $204; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $203 = $798; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $799 = $203; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $800 = HEAP32[$799>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $207 = $800; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $801 = $206; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $200 = $797; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $802 = $200; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $199 = $802; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       $803 = $199; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP32[$803>>2] = $801; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
       $804 = $207; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
       $805 = ($804|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
       if ($805) {
        $198 = $797; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
        $806 = $198; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
        $197 = $806; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
        $807 = $197; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
        $808 = $207; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
        $201 = $807; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
        $202 = $808; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
        $809 = $202; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
        $810 = ($809|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
        if (!($810)) {
         __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($809); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
         __ZdlPv($809); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
        }
       }
       __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
       $828 = HEAP32[$309>>2]|0; //@line 337 "haar.cpp"
       STACKTOP = sp;return ($828|0); //@line 337 "haar.cpp"
      }
      __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($333); //@line 334 "haar.cpp"
     }
    } while(0);
    if ((label|0) == 48) {
     $765 = ___cxa_find_matching_catch_2()|0;
     $766 = tempRet0;
     $316 = $765; //@line 337 "haar.cpp"
     $317 = $766; //@line 337 "haar.cpp"
    }
    $298 = $327; //@line 337 "haar.cpp"
    $811 = $298; //@line 337 "haar.cpp"
    $295 = $811; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $296 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $812 = $295; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $294 = $812; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $813 = $294; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $293 = $813; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $814 = $293; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $815 = HEAP32[$814>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $297 = $815; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $816 = $296; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $290 = $812; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $817 = $290; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $289 = $817; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $818 = $289; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$818>>2] = $816; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $819 = $297; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    $820 = ($819|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    if (!($820)) {
     __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
     $826 = $316; //@line 337 "haar.cpp"
     $827 = $317; //@line 337 "haar.cpp"
     ___resumeException($826|0);
     // unreachable;
    }
    $288 = $812; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $821 = $288; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $287 = $821; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $822 = $287; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $823 = $297; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $291 = $822; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $292 = $823; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $824 = $292; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    $825 = ($824|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    if ($825) {
     __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
     $826 = $316; //@line 337 "haar.cpp"
     $827 = $317; //@line 337 "haar.cpp"
     ___resumeException($826|0);
     // unreachable;
    }
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($824); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZdlPv($824); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
    $826 = $316; //@line 337 "haar.cpp"
    $827 = $317; //@line 337 "haar.cpp"
    ___resumeException($826|0);
    // unreachable;
   }
  }
 } while(0);
 $430 = ___cxa_find_matching_catch_2()|0;
 $431 = tempRet0;
 $316 = $430; //@line 337 "haar.cpp"
 $317 = $431; //@line 337 "haar.cpp"
 __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($313); //@line 337 "haar.cpp"
 $826 = $316; //@line 337 "haar.cpp"
 $827 = $317; //@line 337 "haar.cpp"
 ___resumeException($826|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIsNS1_9allocatorIsEEEENS1_14default_deleteIS6_EEEEJjjRNS3_IhNS4_IhEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 101; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIsNS4_9allocatorIsEEEENS4_14default_deleteIS9_EEEEjjRNS6_IhNS7_IhEEEEEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIsNS4_9allocatorIsEEEENS4_14default_deleteIS9_EEEEjjRNS6_IhNS7_IhEEEEEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z12decodeImageWNSt3__210unique_ptrINS_6vectorIsNS_9allocatorIsEEEENS_14default_deleteIS4_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $18 = sp + 136|0;
 $19 = sp + 8|0;
 $22 = sp + 124|0;
 $23 = sp + 209|0;
 $24 = sp;
 $36 = sp + 208|0;
 $50 = sp + 24|0;
 $51 = sp + 20|0;
 $49 = $0; //@line 342 "haar.cpp"
 $54 = $49; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $34 = $51; //@line 342 "haar.cpp"
 $35 = $54; //@line 342 "haar.cpp"
 $55 = $34; //@line 342 "haar.cpp"
 $56 = $35; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $56; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = $32; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $57; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = $31; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $58; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $59 = $30; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $60 = HEAP32[$59>>2]|0; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $60; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $57; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $29; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $61; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = $28; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$62>>2] = 0; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = $33; //@line 2743 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = $35; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $64; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $65 = $27; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $26 = $65; //@line 2732 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $26; //@line 2732 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $66; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = $25; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $67; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$24>>0]=HEAP8[$36>>0]|0; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $21 = $55; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$22>>2] = $63; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = $21; //@line 2630 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $22; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $69 = $20; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $70 = HEAP32[$69>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = $24; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $68; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$18>>2] = $70; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $17; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $19; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $18; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $15; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $73 = HEAP32[$72>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$71>>2] = $73; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 __THREW__ = 0;
 $74 = (invoke_iiii(102,($51|0),(0|0),(0|0))|0); //@line 342 "haar.cpp"
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if ($76) {
  $93 = ___cxa_find_matching_catch_2()|0;
  $94 = tempRet0;
  $52 = $93; //@line 343 "haar.cpp"
  $53 = $94; //@line 343 "haar.cpp"
  $48 = $51; //@line 342 "haar.cpp"
  $95 = $48; //@line 342 "haar.cpp"
  $45 = $95; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $96 = $45; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $96; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $97 = $44; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $97; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $98 = $43; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $99 = HEAP32[$98>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $99; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $100 = $46; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $96; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $101 = $40; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $101; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $102 = $39; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$102>>2] = $100; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $103 = $47; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $104 = ($103|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($104)) {
   $110 = $52; //@line 342 "haar.cpp"
   $111 = $53; //@line 342 "haar.cpp"
   ___resumeException($110|0);
   // unreachable;
  }
  $38 = $96; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $105 = $38; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $37 = $105; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $106 = $37; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $107 = $47; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $106; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $107; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $108 = $42; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $109 = ($108|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($109) {
   $110 = $52; //@line 342 "haar.cpp"
   $111 = $53; //@line 342 "haar.cpp"
   ___resumeException($110|0);
   // unreachable;
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($108); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($108); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $110 = $52; //@line 342 "haar.cpp"
  $111 = $53; //@line 342 "haar.cpp"
  ___resumeException($110|0);
  // unreachable;
 } else {
  HEAP32[$50>>2] = $74; //@line 342 "haar.cpp"
  $12 = $51; //@line 342 "haar.cpp"
  $77 = $12; //@line 342 "haar.cpp"
  $9 = $77; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $78 = $9; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $78; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $79 = $8; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $79; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $80 = $7; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $81 = HEAP32[$80>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $81; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $82 = $10; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $78; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $83 = $4; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $83; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $84 = $3; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$84>>2] = $82; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $85 = $11; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $86 = ($85|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($86)) {
   $92 = HEAP32[$50>>2]|0; //@line 342 "haar.cpp"
   STACKTOP = sp;return ($92|0); //@line 342 "haar.cpp"
  }
  $2 = $78; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $87 = $2; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $1 = $87; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $88 = $1; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $89 = $11; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $88; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $89; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $90 = $6; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $91 = ($90|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($91) {
   $92 = HEAP32[$50>>2]|0; //@line 342 "haar.cpp"
   STACKTOP = sp;return ($92|0); //@line 342 "haar.cpp"
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($90); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($90); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $92 = HEAP32[$50>>2]|0; //@line 342 "haar.cpp"
  STACKTOP = sp;return ($92|0); //@line 342 "haar.cpp"
 }
 return (0)|0;
}
function __ZN10emscripten8functionINSt3__210unique_ptrINS1_6vectorIhNS1_9allocatorIhEEEENS1_14default_deleteIS6_EEEEJNS2_INS3_IsNS4_IsEEEENS7_ISB_EEEEEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 103; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEENS5_INS6_IsNS7_IsEEEENSA_ISE_EEEEEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEENS5_INS6_IsNS7_IsEEEENSA_ISE_EEEEEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z13haarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $18 = sp + 120|0;
 $20 = sp + 36|0;
 $19 = $0;
 $27 = $19; //@line 35 "haar.cpp"
 $17 = $27; //@line 35 "haar.cpp"
 $28 = $17; //@line 35 "haar.cpp"
 $29 = ((($28)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = HEAP32[$29>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = HEAP32[$28>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $30; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $31; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = (($32) - ($33))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = (($34|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $19; //@line 35 "haar.cpp"
 $16 = $36; //@line 35 "haar.cpp"
 $37 = $16; //@line 35 "haar.cpp"
 $38 = ((($37)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = HEAP32[$38>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = HEAP32[$37>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $39; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $40; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = (($41) - ($42))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = (($43|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = (($44) - 1)|0; //@line 35 "haar.cpp"
 $46 = $35 & $45; //@line 35 "haar.cpp"
 $47 = ($46|0)==(0); //@line 35 "haar.cpp"
 if ($47) {
  $48 = $19; //@line 35 "haar.cpp"
  $11 = $48; //@line 35 "haar.cpp"
  $49 = $11; //@line 35 "haar.cpp"
  $50 = ((($49)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $51 = HEAP32[$50>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $52 = HEAP32[$49>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $53 = $51; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = $52; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = (($53) - ($54))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = (($55|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = ($56|0)!=(0); //@line 35 "haar.cpp"
  if ($57) {
   $58 = $19; //@line 45 "haar.cpp"
   $1 = $58; //@line 45 "haar.cpp"
   $59 = $1; //@line 45 "haar.cpp"
   $60 = ((($59)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $61 = HEAP32[$60>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $62 = HEAP32[$59>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $63 = $61; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $64 = $62; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $65 = (($63) - ($64))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $66 = (($65|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($20,$66); //@line 45 "haar.cpp"
   $67 = $19; //@line 46 "haar.cpp"
   $2 = $67; //@line 46 "haar.cpp"
   $68 = $2; //@line 46 "haar.cpp"
   $69 = ((($68)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $70 = HEAP32[$69>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $71 = HEAP32[$68>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $72 = $70; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $73 = $71; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $74 = (($72) - ($73))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $75 = (($74|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $21 = $75; //@line 46 "haar.cpp"
   while(1) {
    $76 = $21; //@line 46 "haar.cpp"
    $77 = ($76>>>0)>=(2); //@line 46 "haar.cpp"
    if (!($77)) {
     break;
    }
    $22 = 0; //@line 48 "haar.cpp"
    while(1) {
     $78 = $22; //@line 48 "haar.cpp"
     $79 = $21; //@line 48 "haar.cpp"
     $80 = (($79>>>0) / 2)&-1; //@line 48 "haar.cpp"
     $81 = ($78>>>0)<($80>>>0); //@line 48 "haar.cpp"
     if (!($81)) {
      break;
     }
     $82 = $19; //@line 49 "haar.cpp"
     $83 = $22; //@line 49 "haar.cpp"
     $84 = $83<<1; //@line 49 "haar.cpp"
     $3 = $82; //@line 49 "haar.cpp"
     $4 = $84; //@line 49 "haar.cpp"
     $85 = $3; //@line 49 "haar.cpp"
     $86 = $4; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $87 = HEAP32[$85>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $88 = (($87) + ($86<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $89 = HEAP16[$88>>1]|0; //@line 49 "haar.cpp"
     $90 = (+($89<<16>>16)); //@line 49 "haar.cpp"
     $23 = $90; //@line 49 "haar.cpp"
     $91 = $19; //@line 50 "haar.cpp"
     $92 = $22; //@line 50 "haar.cpp"
     $93 = $92<<1; //@line 50 "haar.cpp"
     $94 = (($93) + 1)|0; //@line 50 "haar.cpp"
     $5 = $91; //@line 50 "haar.cpp"
     $6 = $94; //@line 50 "haar.cpp"
     $95 = $5; //@line 50 "haar.cpp"
     $96 = $6; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $97 = HEAP32[$95>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $98 = (($97) + ($96<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $99 = HEAP16[$98>>1]|0; //@line 50 "haar.cpp"
     $100 = (+($99<<16>>16)); //@line 50 "haar.cpp"
     $24 = $100; //@line 50 "haar.cpp"
     $101 = $23; //@line 51 "haar.cpp"
     $102 = $24; //@line 51 "haar.cpp"
     $103 = $101 + $102; //@line 51 "haar.cpp"
     $104 = $103 / 2.0; //@line 51 "haar.cpp"
     $25 = $104; //@line 51 "haar.cpp"
     $105 = $25; //@line 53 "haar.cpp"
     $106 = (+Math_floor((+$105))); //@line 53 "haar.cpp"
     $107 = (~~(($106))); //@line 53 "haar.cpp"
     $108 = $22; //@line 53 "haar.cpp"
     $7 = $20; //@line 53 "haar.cpp"
     $8 = $108; //@line 53 "haar.cpp"
     $109 = $7; //@line 53 "haar.cpp"
     $110 = $8; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $111 = HEAP32[$109>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $112 = (($111) + ($110<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$112>>1] = $107; //@line 53 "haar.cpp"
     $113 = $23; //@line 54 "haar.cpp"
     $114 = $24; //@line 54 "haar.cpp"
     $115 = $113 - $114; //@line 54 "haar.cpp"
     $116 = (~~(($115))); //@line 54 "haar.cpp"
     $117 = $116&65535; //@line 54 "haar.cpp"
     $118 = $21; //@line 54 "haar.cpp"
     $119 = (($118>>>0) / 2)&-1; //@line 54 "haar.cpp"
     $120 = $22; //@line 54 "haar.cpp"
     $121 = (($119) + ($120))|0; //@line 54 "haar.cpp"
     $9 = $20; //@line 54 "haar.cpp"
     $10 = $121; //@line 54 "haar.cpp"
     $122 = $9; //@line 54 "haar.cpp"
     $123 = $10; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $124 = HEAP32[$122>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $125 = (($124) + ($123<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$125>>1] = $117; //@line 54 "haar.cpp"
     $126 = $22; //@line 48 "haar.cpp"
     $127 = (($126) + 1)|0; //@line 48 "haar.cpp"
     $22 = $127; //@line 48 "haar.cpp"
    }
    $26 = 0; //@line 59 "haar.cpp"
    while(1) {
     $128 = $26; //@line 59 "haar.cpp"
     $129 = $21; //@line 59 "haar.cpp"
     $130 = ($128>>>0)<($129>>>0); //@line 59 "haar.cpp"
     if (!($130)) {
      break;
     }
     $131 = $26; //@line 60 "haar.cpp"
     $12 = $20; //@line 60 "haar.cpp"
     $13 = $131; //@line 60 "haar.cpp"
     $132 = $12; //@line 60 "haar.cpp"
     $133 = $13; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $134 = HEAP32[$132>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $135 = (($134) + ($133<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $136 = HEAP16[$135>>1]|0; //@line 60 "haar.cpp"
     $137 = $19; //@line 60 "haar.cpp"
     $138 = $26; //@line 60 "haar.cpp"
     $14 = $137; //@line 60 "haar.cpp"
     $15 = $138; //@line 60 "haar.cpp"
     $139 = $14; //@line 60 "haar.cpp"
     $140 = $15; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $141 = HEAP32[$139>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $142 = (($141) + ($140<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$142>>1] = $136; //@line 60 "haar.cpp"
     $143 = $26; //@line 59 "haar.cpp"
     $144 = (($143) + 1)|0; //@line 59 "haar.cpp"
     $26 = $144; //@line 59 "haar.cpp"
    }
    $145 = $21; //@line 46 "haar.cpp"
    $146 = (($145>>>0) / 2)&-1; //@line 46 "haar.cpp"
    $21 = $146; //@line 46 "haar.cpp"
   }
   $$expand_i1_val2 = 1; //@line 65 "haar.cpp"
   HEAP8[$18>>0] = $$expand_i1_val2; //@line 65 "haar.cpp"
   __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($20); //@line 67 "haar.cpp"
   $$pre_trunc = HEAP8[$18>>0]|0; //@line 67 "haar.cpp"
   $147 = $$pre_trunc&1; //@line 67 "haar.cpp"
   STACKTOP = sp;return ($147|0); //@line 67 "haar.cpp"
  }
 }
 $$expand_i1_val = 0; //@line 36 "haar.cpp"
 HEAP8[$18>>0] = $$expand_i1_val; //@line 36 "haar.cpp"
 $$pre_trunc = HEAP8[$18>>0]|0; //@line 67 "haar.cpp"
 $147 = $$pre_trunc&1; //@line 67 "haar.cpp"
 STACKTOP = sp;return ($147|0); //@line 67 "haar.cpp"
}
function __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 104; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z14ihaarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $22 = sp + 124|0;
 $24 = sp + 24|0;
 $23 = $0;
 $31 = $23; //@line 71 "haar.cpp"
 $21 = $31; //@line 71 "haar.cpp"
 $32 = $21; //@line 71 "haar.cpp"
 $33 = ((($32)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = HEAP32[$33>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$32>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $34; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = (($36) - ($37))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($38|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $23; //@line 71 "haar.cpp"
 $20 = $40; //@line 71 "haar.cpp"
 $41 = $20; //@line 71 "haar.cpp"
 $42 = ((($41)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = HEAP32[$42>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = HEAP32[$41>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $43; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $44; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = (($45) - ($46))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = (($47|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($48) - 1)|0; //@line 71 "haar.cpp"
 $50 = $39 & $49; //@line 71 "haar.cpp"
 $51 = ($50|0)==(0); //@line 71 "haar.cpp"
 if ($51) {
  $52 = $23; //@line 71 "haar.cpp"
  $9 = $52; //@line 71 "haar.cpp"
  $53 = $9; //@line 71 "haar.cpp"
  $54 = ((($53)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = HEAP32[$53>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $55; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = (($57) - ($58))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = (($59|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = ($60|0)!=(0); //@line 71 "haar.cpp"
  if ($61) {
   $62 = $23; //@line 81 "haar.cpp"
   $1 = $62; //@line 81 "haar.cpp"
   $63 = $1; //@line 81 "haar.cpp"
   $64 = ((($63)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $65 = HEAP32[$64>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $66 = HEAP32[$63>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $67 = $65; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $68 = $66; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $69 = (($67) - ($68))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $70 = (($69|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($24,$70); //@line 81 "haar.cpp"
   $25 = 2; //@line 83 "haar.cpp"
   while(1) {
    $71 = $25; //@line 83 "haar.cpp"
    $72 = $23; //@line 83 "haar.cpp"
    $2 = $72; //@line 83 "haar.cpp"
    $73 = $2; //@line 83 "haar.cpp"
    $74 = ((($73)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $75 = HEAP32[$74>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $76 = HEAP32[$73>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $77 = $75; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $78 = $76; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $79 = (($77) - ($78))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $80 = (($79|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $81 = ($71>>>0)<=($80>>>0); //@line 83 "haar.cpp"
    if (!($81)) {
     break;
    }
    $26 = 0; //@line 84 "haar.cpp"
    while(1) {
     $82 = $26; //@line 84 "haar.cpp"
     $83 = $25; //@line 84 "haar.cpp"
     $84 = ($82>>>0)<($83>>>0); //@line 84 "haar.cpp"
     if (!($84)) {
      break;
     }
     $85 = $26; //@line 85 "haar.cpp"
     $86 = (($85>>>0) % 2)&-1; //@line 85 "haar.cpp"
     $87 = ($86|0)==(0); //@line 85 "haar.cpp"
     if ($87) {
      $88 = $23; //@line 87 "haar.cpp"
      $89 = $26; //@line 87 "haar.cpp"
      $90 = (($89>>>0) / 2)&-1; //@line 87 "haar.cpp"
      $3 = $88; //@line 87 "haar.cpp"
      $4 = $90; //@line 87 "haar.cpp"
      $91 = $3; //@line 87 "haar.cpp"
      $92 = $4; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $93 = HEAP32[$91>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $94 = (($93) + ($92<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $95 = HEAP16[$94>>1]|0; //@line 87 "haar.cpp"
      $96 = $95 << 16 >> 16; //@line 87 "haar.cpp"
      $27 = $96; //@line 87 "haar.cpp"
      $97 = $23; //@line 88 "haar.cpp"
      $98 = $25; //@line 88 "haar.cpp"
      $99 = (($98>>>0) / 2)&-1; //@line 88 "haar.cpp"
      $100 = $26; //@line 88 "haar.cpp"
      $101 = (($100>>>0) / 2)&-1; //@line 88 "haar.cpp"
      $102 = (($99) + ($101))|0; //@line 88 "haar.cpp"
      $5 = $97; //@line 88 "haar.cpp"
      $6 = $102; //@line 88 "haar.cpp"
      $103 = $5; //@line 88 "haar.cpp"
      $104 = $6; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $105 = HEAP32[$103>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $106 = (($105) + ($104<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $107 = HEAP16[$106>>1]|0; //@line 88 "haar.cpp"
      $108 = $107 << 16 >> 16; //@line 88 "haar.cpp"
      $28 = $108; //@line 88 "haar.cpp"
      $109 = $27; //@line 89 "haar.cpp"
      $110 = $109<<1; //@line 89 "haar.cpp"
      $111 = $28; //@line 89 "haar.cpp"
      $112 = (($111|0) % 2)&-1; //@line 89 "haar.cpp"
      $113 = ($112|0)==(0); //@line 89 "haar.cpp"
      $114 = $113 ? 0 : 1; //@line 89 "haar.cpp"
      $115 = (($110) + ($114))|0; //@line 89 "haar.cpp"
      $29 = $115; //@line 89 "haar.cpp"
      $116 = $29; //@line 90 "haar.cpp"
      $117 = $28; //@line 90 "haar.cpp"
      $118 = (($116) + ($117))|0; //@line 90 "haar.cpp"
      $119 = (($118|0) / 2)&-1; //@line 90 "haar.cpp"
      $120 = $119&65535; //@line 90 "haar.cpp"
      $121 = $26; //@line 90 "haar.cpp"
      $7 = $24; //@line 90 "haar.cpp"
      $8 = $121; //@line 90 "haar.cpp"
      $122 = $7; //@line 90 "haar.cpp"
      $123 = $8; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $124 = HEAP32[$122>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $125 = (($124) + ($123<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP16[$125>>1] = $120; //@line 90 "haar.cpp"
     } else {
      $126 = $26; //@line 93 "haar.cpp"
      $127 = (($126) - 1)|0; //@line 93 "haar.cpp"
      $10 = $24; //@line 93 "haar.cpp"
      $11 = $127; //@line 93 "haar.cpp"
      $128 = $10; //@line 93 "haar.cpp"
      $129 = $11; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $130 = HEAP32[$128>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $131 = (($130) + ($129<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $132 = HEAP16[$131>>1]|0; //@line 93 "haar.cpp"
      $133 = $132 << 16 >> 16; //@line 93 "haar.cpp"
      $134 = $23; //@line 93 "haar.cpp"
      $135 = $25; //@line 93 "haar.cpp"
      $136 = (($135>>>0) / 2)&-1; //@line 93 "haar.cpp"
      $137 = $26; //@line 93 "haar.cpp"
      $138 = (($137>>>0) / 2)&-1; //@line 93 "haar.cpp"
      $139 = (($136) + ($138))|0; //@line 93 "haar.cpp"
      $12 = $134; //@line 93 "haar.cpp"
      $13 = $139; //@line 93 "haar.cpp"
      $140 = $12; //@line 93 "haar.cpp"
      $141 = $13; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $142 = HEAP32[$140>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $143 = (($142) + ($141<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $144 = HEAP16[$143>>1]|0; //@line 93 "haar.cpp"
      $145 = $144 << 16 >> 16; //@line 93 "haar.cpp"
      $146 = (($133) - ($145))|0; //@line 93 "haar.cpp"
      $147 = $146&65535; //@line 93 "haar.cpp"
      $148 = $26; //@line 93 "haar.cpp"
      $14 = $24; //@line 93 "haar.cpp"
      $15 = $148; //@line 93 "haar.cpp"
      $149 = $14; //@line 93 "haar.cpp"
      $150 = $15; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $151 = HEAP32[$149>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $152 = (($151) + ($150<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP16[$152>>1] = $147; //@line 93 "haar.cpp"
     }
     $153 = $26; //@line 84 "haar.cpp"
     $154 = (($153) + 1)|0; //@line 84 "haar.cpp"
     $26 = $154; //@line 84 "haar.cpp"
    }
    $30 = 0; //@line 99 "haar.cpp"
    while(1) {
     $155 = $30; //@line 99 "haar.cpp"
     $156 = $25; //@line 99 "haar.cpp"
     $157 = ($155>>>0)<($156>>>0); //@line 99 "haar.cpp"
     if (!($157)) {
      break;
     }
     $158 = $30; //@line 100 "haar.cpp"
     $16 = $24; //@line 100 "haar.cpp"
     $17 = $158; //@line 100 "haar.cpp"
     $159 = $16; //@line 100 "haar.cpp"
     $160 = $17; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $161 = HEAP32[$159>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $162 = (($161) + ($160<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $163 = HEAP16[$162>>1]|0; //@line 100 "haar.cpp"
     $164 = $23; //@line 100 "haar.cpp"
     $165 = $30; //@line 100 "haar.cpp"
     $18 = $164; //@line 100 "haar.cpp"
     $19 = $165; //@line 100 "haar.cpp"
     $166 = $18; //@line 100 "haar.cpp"
     $167 = $19; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $168 = HEAP32[$166>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $169 = (($168) + ($167<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$169>>1] = $163; //@line 100 "haar.cpp"
     $170 = $30; //@line 99 "haar.cpp"
     $171 = (($170) + 1)|0; //@line 99 "haar.cpp"
     $30 = $171; //@line 99 "haar.cpp"
    }
    $172 = $25; //@line 83 "haar.cpp"
    $173 = $172<<1; //@line 83 "haar.cpp"
    $25 = $173; //@line 83 "haar.cpp"
   }
   $$expand_i1_val2 = 1; //@line 106 "haar.cpp"
   HEAP8[$22>>0] = $$expand_i1_val2; //@line 106 "haar.cpp"
   __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($24); //@line 107 "haar.cpp"
   $$pre_trunc = HEAP8[$22>>0]|0; //@line 107 "haar.cpp"
   $174 = $$pre_trunc&1; //@line 107 "haar.cpp"
   STACKTOP = sp;return ($174|0); //@line 107 "haar.cpp"
  }
 }
 $$expand_i1_val = 0; //@line 72 "haar.cpp"
 HEAP8[$22>>0] = $$expand_i1_val; //@line 72 "haar.cpp"
 $$pre_trunc = HEAP8[$22>>0]|0; //@line 107 "haar.cpp"
 $174 = $$pre_trunc&1; //@line 107 "haar.cpp"
 STACKTOP = sp;return ($174|0); //@line 107 "haar.cpp"
}
function __Z19haarTransform2DFlatRNSt3__26vectorIsNS_9allocatorIsEEEEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $10 = sp + 8|0;
 $15 = sp + 543|0;
 $25 = sp + 542|0;
 $34 = sp;
 $39 = sp + 541|0;
 $49 = sp + 540|0;
 $52 = sp + 356|0;
 $55 = sp + 344|0;
 $59 = sp + 328|0;
 $62 = sp + 316|0;
 $73 = sp + 272|0;
 $76 = sp + 260|0;
 $80 = sp + 244|0;
 $83 = sp + 232|0;
 $101 = sp + 160|0;
 $104 = sp + 148|0;
 $111 = sp + 120|0;
 $114 = sp + 108|0;
 $118 = sp + 539|0;
 $121 = sp + 76|0;
 $123 = sp + 60|0;
 $131 = sp + 32|0;
 $132 = sp + 28|0;
 $135 = sp + 16|0;
 $136 = sp + 12|0;
 $119 = $0;
 $120 = $1;
 $117 = $121; //@line 169 "haar.cpp"
 $138 = $117; //@line 169 "haar.cpp"
 $116 = $138; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $139 = $116; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $139; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$139>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $140 = ((($139)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$140>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $141 = ((($139)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $141; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$114>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $142 = $113; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $114; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $143 = $112; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $144 = HEAP32[$143>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $110 = $142; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$111>>2] = $144; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $145 = $110; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $109 = $145; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $108 = $111; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $146 = $108; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $147 = HEAP32[$146>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$145>>2] = $147; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = 0; //@line 171 "haar.cpp"
 L1: while(1) {
  $148 = $122; //@line 171 "haar.cpp"
  $149 = $120; //@line 171 "haar.cpp"
  $150 = ($148|0)<($149|0); //@line 171 "haar.cpp"
  if (!($150)) {
   break;
  }
  $107 = $123; //@line 172 "haar.cpp"
  $151 = $107; //@line 172 "haar.cpp"
  $106 = $151; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $152 = $106; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $105 = $152; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$152>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
  $153 = ((($152)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$153>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  $154 = ((($152)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $103 = $154; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$104>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $155 = $103; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $102 = $104; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $156 = $102; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $157 = HEAP32[$156>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $100 = $155; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$101>>2] = $157; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $158 = $100; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $99 = $158; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
  $98 = $101; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $159 = $98; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $160 = HEAP32[$159>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$158>>2] = $160; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $124 = 0; //@line 173 "haar.cpp"
  while(1) {
   $161 = $124; //@line 173 "haar.cpp"
   $162 = $120; //@line 173 "haar.cpp"
   $163 = ($161|0)<($162|0); //@line 173 "haar.cpp"
   if (!($163)) {
    break;
   }
   $164 = $119; //@line 174 "haar.cpp"
   $165 = $122; //@line 174 "haar.cpp"
   $166 = $120; //@line 174 "haar.cpp"
   $167 = Math_imul($165, $166)|0; //@line 174 "haar.cpp"
   $168 = $124; //@line 174 "haar.cpp"
   $169 = (($167) + ($168))|0; //@line 174 "haar.cpp"
   $96 = $164; //@line 174 "haar.cpp"
   $97 = $169; //@line 174 "haar.cpp"
   $170 = $96; //@line 174 "haar.cpp"
   $171 = $97; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $172 = HEAP32[$170>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $173 = (($172) + ($171<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $47 = $123; //@line 174 "haar.cpp"
   $48 = $173; //@line 174 "haar.cpp"
   $174 = $47; //@line 174 "haar.cpp"
   $175 = ((($174)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $176 = HEAP32[$175>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $46 = $174; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $177 = $46; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $178 = ((($177)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $45 = $178; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $179 = $45; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $44 = $179; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $180 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $181 = HEAP32[$180>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $182 = ($176|0)!=($181|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   if ($182) {
    __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($49,$174,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
    $43 = $174; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $183 = $43; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $184 = ((($183)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $42 = $184; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $185 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $41 = $185; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $186 = $41; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $187 = ((($174)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $188 = HEAP32[$187>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $40 = $188; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $189 = $40; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
    $190 = $48; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $36 = $186; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $37 = $189; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $38 = $190; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $191 = $36; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $192 = $37; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $193 = $38; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $35 = $193; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $194 = $35; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    ;HEAP8[$34>>0]=HEAP8[$39>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $31 = $191; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $32 = $192; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $33 = $194; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $195 = $31; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $196 = $32; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $197 = $33; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $30 = $197; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $198 = $30; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $27 = $195; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $28 = $196; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $29 = $198; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $199 = $28; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $200 = $29; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $26 = $200; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $201 = $26; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $202 = HEAP16[$201>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP16[$199>>1] = $202; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($49); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
    $203 = ((($174)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $204 = HEAP32[$203>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $205 = ((($204)) + 2|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$203>>2] = $205; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   } else {
    $206 = $48; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    __THREW__ = 0;
    invoke_vii(100,($174|0),($206|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    $207 = __THREW__; __THREW__ = 0;
    $208 = $207&1;
    if ($208) {
     label = 9;
     break L1;
    }
   }
   $209 = $124; //@line 173 "haar.cpp"
   $210 = (($209) + 1)|0; //@line 173 "haar.cpp"
   $124 = $210; //@line 173 "haar.cpp"
  }
  $23 = $121; //@line 177 "haar.cpp"
  $24 = $123; //@line 177 "haar.cpp"
  $213 = $23; //@line 177 "haar.cpp"
  $214 = ((($213)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $215 = HEAP32[$214>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $22 = $213; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $216 = $22; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $217 = ((($216)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $217; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $218 = $21; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $20 = $218; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $219 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $220 = HEAP32[$219>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $221 = ($215|0)!=($220|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($221) {
   __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($25,$213,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
   $19 = $213; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $222 = $19; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $223 = ((($222)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $18 = $223; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $224 = $18; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $17 = $224; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $225 = $17; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $226 = ((($213)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $227 = HEAP32[$226>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $16 = $227; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $228 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
   $229 = $24; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $12 = $225; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $13 = $228; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $14 = $229; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $230 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $231 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $232 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $11 = $232; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $233 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $7 = $230; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $8 = $231; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $9 = $233; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $234 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $235 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $236 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $6 = $236; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $237 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $3 = $234; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $4 = $235; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $5 = $237; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $238 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $239 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $2 = $239; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $240 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   __THREW__ = 0;
   invoke_vii(96,($238|0),($240|0)); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $241 = __THREW__; __THREW__ = 0;
   $242 = $241&1;
   if ($242) {
    label = 9;
    break;
   }
   __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($25); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
   $243 = ((($213)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $244 = HEAP32[$243>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $245 = ((($244)) + 12|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$243>>2] = $245; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $246 = $24; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   __THREW__ = 0;
   invoke_vii(97,($213|0),($246|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   $247 = __THREW__; __THREW__ = 0;
   $248 = $247&1;
   if ($248) {
    label = 9;
    break;
   }
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($123); //@line 178 "haar.cpp"
  $249 = $122; //@line 171 "haar.cpp"
  $250 = (($249) + 1)|0; //@line 171 "haar.cpp"
  $122 = $250; //@line 171 "haar.cpp"
 }
 if ((label|0) == 9) {
  $211 = ___cxa_find_matching_catch_2()|0;
  $212 = tempRet0;
  $125 = $211; //@line 194 "haar.cpp"
  $126 = $212; //@line 194 "haar.cpp"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($123); //@line 178 "haar.cpp"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 194 "haar.cpp"
  $334 = $125; //@line 194 "haar.cpp"
  $335 = $126; //@line 194 "haar.cpp"
  ___resumeException($334|0);
  // unreachable;
 }
 __THREW__ = 0;
 $251 = (invoke_ii(98,($121|0))|0); //@line 180 "haar.cpp"
 $252 = __THREW__; __THREW__ = 0;
 $253 = $252&1;
 if ($253) {
  $257 = ___cxa_find_matching_catch_2()|0;
  $258 = tempRet0;
  $125 = $257; //@line 194 "haar.cpp"
  $126 = $258; //@line 194 "haar.cpp"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 194 "haar.cpp"
  $334 = $125; //@line 194 "haar.cpp"
  $335 = $126; //@line 194 "haar.cpp"
  ___resumeException($334|0);
  // unreachable;
 }
 $254 = $251&1; //@line 180 "haar.cpp"
 $127 = $254; //@line 180 "haar.cpp"
 $255 = $127; //@line 182 "haar.cpp"
 $256 = $255&1; //@line 182 "haar.cpp"
 if (!($256)) {
  $$expand_i1_val = 0; //@line 183 "haar.cpp"
  HEAP8[$118>>0] = $$expand_i1_val; //@line 183 "haar.cpp"
  $128 = 1;
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 194 "haar.cpp"
  $$pre_trunc = HEAP8[$118>>0]|0; //@line 194 "haar.cpp"
  $333 = $$pre_trunc&1; //@line 194 "haar.cpp"
  STACKTOP = sp;return ($333|0); //@line 194 "haar.cpp"
 }
 $129 = 0; //@line 185 "haar.cpp"
 $130 = $121; //@line 186 "haar.cpp"
 $259 = $130; //@line 186 "haar.cpp"
 $56 = $259; //@line 186 "haar.cpp"
 $260 = $56; //@line 186 "haar.cpp"
 $261 = HEAP32[$260>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $260; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $261; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $262 = $54; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $52; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $262; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $263 = $50; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $264 = $51; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$263>>2] = $264; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $265 = HEAP32[$52>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$55>>2] = $265; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $266 = HEAP32[$55>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$131>>2] = $266; //@line 186 "haar.cpp"
 $267 = $130; //@line 186 "haar.cpp"
 $63 = $267; //@line 186 "haar.cpp"
 $268 = $63; //@line 186 "haar.cpp"
 $269 = ((($268)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $270 = HEAP32[$269>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $268; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $270; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $271 = $61; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $59; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $271; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $272 = $57; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $273 = $58; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$272>>2] = $273; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $274 = HEAP32[$59>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$62>>2] = $274; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $275 = HEAP32[$62>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$132>>2] = $275; //@line 186 "haar.cpp"
 while(1) {
  $68 = $131; //@line 186 "haar.cpp"
  $69 = $132; //@line 186 "haar.cpp"
  $276 = $68; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $277 = $69; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $66 = $276; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $67 = $277; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $278 = $66; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $65 = $278; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $279 = $65; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $280 = HEAP32[$279>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $281 = $67; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $64 = $281; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $282 = $64; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $283 = HEAP32[$282>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $284 = ($280|0)==($283|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $285 = $284 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  if (!($285)) {
   break;
  }
  $70 = $131; //@line 186 "haar.cpp"
  $286 = $70; //@line 186 "haar.cpp"
  $287 = HEAP32[$286>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $133 = $287; //@line 186 "haar.cpp"
  $288 = $133; //@line 187 "haar.cpp"
  $134 = $288; //@line 187 "haar.cpp"
  $289 = $134; //@line 187 "haar.cpp"
  $77 = $289; //@line 187 "haar.cpp"
  $290 = $77; //@line 187 "haar.cpp"
  $291 = HEAP32[$290>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $74 = $290; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $75 = $291; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $292 = $75; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $73; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $292; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $293 = $71; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $294 = $72; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$293>>2] = $294; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $295 = HEAP32[$73>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$76>>2] = $295; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $296 = HEAP32[$76>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$135>>2] = $296; //@line 187 "haar.cpp"
  $297 = $134; //@line 187 "haar.cpp"
  $84 = $297; //@line 187 "haar.cpp"
  $298 = $84; //@line 187 "haar.cpp"
  $299 = ((($298)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $300 = HEAP32[$299>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $81 = $298; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $82 = $300; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $301 = $82; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $78 = $80; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $79 = $301; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $302 = $78; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $303 = $79; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$302>>2] = $303; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $304 = HEAP32[$80>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$83>>2] = $304; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $305 = HEAP32[$83>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$136>>2] = $305; //@line 187 "haar.cpp"
  while(1) {
   $89 = $135; //@line 187 "haar.cpp"
   $90 = $136; //@line 187 "haar.cpp"
   $306 = $89; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $307 = $90; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $87 = $306; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $88 = $307; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $308 = $87; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $86 = $308; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $309 = $86; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $310 = HEAP32[$309>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $311 = $88; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $85 = $311; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $312 = $85; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $313 = HEAP32[$312>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $314 = ($310|0)==($313|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $315 = $314 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   if (!($315)) {
    break;
   }
   $91 = $135; //@line 187 "haar.cpp"
   $316 = $91; //@line 187 "haar.cpp"
   $317 = HEAP32[$316>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $318 = HEAP16[$317>>1]|0; //@line 187 "haar.cpp"
   $137 = $318; //@line 187 "haar.cpp"
   $319 = $137; //@line 188 "haar.cpp"
   $320 = $119; //@line 188 "haar.cpp"
   $321 = $129; //@line 188 "haar.cpp"
   $322 = (($321) + 1)|0; //@line 188 "haar.cpp"
   $129 = $322; //@line 188 "haar.cpp"
   $92 = $320; //@line 188 "haar.cpp"
   $93 = $321; //@line 188 "haar.cpp"
   $323 = $92; //@line 188 "haar.cpp"
   $324 = $93; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $325 = HEAP32[$323>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $326 = (($325) + ($324<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP16[$326>>1] = $319; //@line 188 "haar.cpp"
   $94 = $135; //@line 187 "haar.cpp"
   $327 = $94; //@line 187 "haar.cpp"
   $328 = HEAP32[$327>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $329 = ((($328)) + 2|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$327>>2] = $329; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  }
  $95 = $131; //@line 186 "haar.cpp"
  $330 = $95; //@line 186 "haar.cpp"
  $331 = HEAP32[$330>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $332 = ((($331)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$330>>2] = $332; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 $$expand_i1_val2 = 1; //@line 192 "haar.cpp"
 HEAP8[$118>>0] = $$expand_i1_val2; //@line 192 "haar.cpp"
 $128 = 1;
 __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 194 "haar.cpp"
 $$pre_trunc = HEAP8[$118>>0]|0; //@line 194 "haar.cpp"
 $333 = $$pre_trunc&1; //@line 194 "haar.cpp"
 STACKTOP = sp;return ($333|0); //@line 194 "haar.cpp"
}
function __ZN10emscripten8functionIbJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 105; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z20ihaarTransform2DFlatRNSt3__26vectorIsNS_9allocatorIsEEEEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $10 = sp + 8|0;
 $15 = sp + 543|0;
 $25 = sp + 542|0;
 $34 = sp;
 $39 = sp + 541|0;
 $49 = sp + 540|0;
 $52 = sp + 356|0;
 $55 = sp + 344|0;
 $59 = sp + 328|0;
 $62 = sp + 316|0;
 $73 = sp + 272|0;
 $76 = sp + 260|0;
 $80 = sp + 244|0;
 $83 = sp + 232|0;
 $101 = sp + 160|0;
 $104 = sp + 148|0;
 $111 = sp + 120|0;
 $114 = sp + 108|0;
 $118 = sp + 539|0;
 $121 = sp + 76|0;
 $123 = sp + 60|0;
 $131 = sp + 32|0;
 $132 = sp + 28|0;
 $135 = sp + 16|0;
 $136 = sp + 12|0;
 $119 = $0;
 $120 = $1;
 $117 = $121; //@line 197 "haar.cpp"
 $138 = $117; //@line 197 "haar.cpp"
 $116 = $138; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $139 = $116; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $139; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$139>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $140 = ((($139)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$140>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $141 = ((($139)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $141; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$114>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $142 = $113; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $114; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $143 = $112; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $144 = HEAP32[$143>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $110 = $142; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$111>>2] = $144; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $145 = $110; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $109 = $145; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $108 = $111; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $146 = $108; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $147 = HEAP32[$146>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$145>>2] = $147; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = 0; //@line 199 "haar.cpp"
 L1: while(1) {
  $148 = $122; //@line 199 "haar.cpp"
  $149 = $120; //@line 199 "haar.cpp"
  $150 = ($148|0)<($149|0); //@line 199 "haar.cpp"
  if (!($150)) {
   break;
  }
  $107 = $123; //@line 200 "haar.cpp"
  $151 = $107; //@line 200 "haar.cpp"
  $106 = $151; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $152 = $106; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $105 = $152; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$152>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
  $153 = ((($152)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$153>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  $154 = ((($152)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $103 = $154; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$104>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $155 = $103; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $102 = $104; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $156 = $102; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $157 = HEAP32[$156>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $100 = $155; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$101>>2] = $157; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $158 = $100; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $99 = $158; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
  $98 = $101; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $159 = $98; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $160 = HEAP32[$159>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$158>>2] = $160; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $124 = 0; //@line 201 "haar.cpp"
  while(1) {
   $161 = $124; //@line 201 "haar.cpp"
   $162 = $120; //@line 201 "haar.cpp"
   $163 = ($161|0)<($162|0); //@line 201 "haar.cpp"
   if (!($163)) {
    break;
   }
   $164 = $119; //@line 202 "haar.cpp"
   $165 = $122; //@line 202 "haar.cpp"
   $166 = $120; //@line 202 "haar.cpp"
   $167 = Math_imul($165, $166)|0; //@line 202 "haar.cpp"
   $168 = $124; //@line 202 "haar.cpp"
   $169 = (($167) + ($168))|0; //@line 202 "haar.cpp"
   $96 = $164; //@line 202 "haar.cpp"
   $97 = $169; //@line 202 "haar.cpp"
   $170 = $96; //@line 202 "haar.cpp"
   $171 = $97; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $172 = HEAP32[$170>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $173 = (($172) + ($171<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $47 = $123; //@line 202 "haar.cpp"
   $48 = $173; //@line 202 "haar.cpp"
   $174 = $47; //@line 202 "haar.cpp"
   $175 = ((($174)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $176 = HEAP32[$175>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $46 = $174; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $177 = $46; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $178 = ((($177)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $45 = $178; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $179 = $45; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
   $44 = $179; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $180 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $181 = HEAP32[$180>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   $182 = ($176|0)!=($181|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
   if ($182) {
    __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($49,$174,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
    $43 = $174; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $183 = $43; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $184 = ((($183)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $42 = $184; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $185 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
    $41 = $185; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $186 = $41; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $187 = ((($174)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $188 = HEAP32[$187>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $40 = $188; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $189 = $40; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
    $190 = $48; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
    $36 = $186; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $37 = $189; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $38 = $190; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
    $191 = $36; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $192 = $37; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $193 = $38; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $35 = $193; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
    $194 = $35; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    ;HEAP8[$34>>0]=HEAP8[$39>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $31 = $191; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $32 = $192; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $33 = $194; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
    $195 = $31; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $196 = $32; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $197 = $33; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $30 = $197; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $198 = $30; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $27 = $195; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $28 = $196; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $29 = $198; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
    $199 = $28; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $200 = $29; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $26 = $200; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $201 = $26; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $202 = HEAP16[$201>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP16[$199>>1] = $202; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($49); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
    $203 = ((($174)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $204 = HEAP32[$203>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    $205 = ((($204)) + 2|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$203>>2] = $205; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   } else {
    $206 = $48; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    __THREW__ = 0;
    invoke_vii(100,($174|0),($206|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
    $207 = __THREW__; __THREW__ = 0;
    $208 = $207&1;
    if ($208) {
     label = 9;
     break L1;
    }
   }
   $209 = $124; //@line 201 "haar.cpp"
   $210 = (($209) + 1)|0; //@line 201 "haar.cpp"
   $124 = $210; //@line 201 "haar.cpp"
  }
  $23 = $121; //@line 205 "haar.cpp"
  $24 = $123; //@line 205 "haar.cpp"
  $213 = $23; //@line 205 "haar.cpp"
  $214 = ((($213)) + 4|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $215 = HEAP32[$214>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $22 = $213; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $216 = $22; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $217 = ((($216)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $217; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $218 = $21; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $20 = $218; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $219 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $220 = HEAP32[$219>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  $221 = ($215|0)!=($220|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($221) {
   __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($25,$213,1); //@line 1587 "/usr/lib/emscripten/system/include/libcxx/vector"
   $19 = $213; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $222 = $19; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $223 = ((($222)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $18 = $223; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $224 = $18; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
   $17 = $224; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $225 = $17; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $226 = ((($213)) + 4|0); //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $227 = HEAP32[$226>>2]|0; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $16 = $227; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $228 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
   $229 = $24; //@line 1589 "/usr/lib/emscripten/system/include/libcxx/vector"
   $12 = $225; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $13 = $228; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $14 = $229; //@line 1588 "/usr/lib/emscripten/system/include/libcxx/vector"
   $230 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $231 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $232 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $11 = $232; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
   $233 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $7 = $230; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $8 = $231; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $9 = $233; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
   $234 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $235 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $236 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $6 = $236; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $237 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $3 = $234; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $4 = $235; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $5 = $237; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
   $238 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $239 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $2 = $239; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $240 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   __THREW__ = 0;
   invoke_vii(96,($238|0),($240|0)); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $241 = __THREW__; __THREW__ = 0;
   $242 = $241&1;
   if ($242) {
    label = 9;
    break;
   }
   __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($25); //@line 1590 "/usr/lib/emscripten/system/include/libcxx/vector"
   $243 = ((($213)) + 4|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $244 = HEAP32[$243>>2]|0; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   $245 = ((($244)) + 12|0); //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$243>>2] = $245; //@line 1591 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $246 = $24; //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   __THREW__ = 0;
   invoke_vii(97,($213|0),($246|0)); //@line 1594 "/usr/lib/emscripten/system/include/libcxx/vector"
   $247 = __THREW__; __THREW__ = 0;
   $248 = $247&1;
   if ($248) {
    label = 9;
    break;
   }
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($123); //@line 206 "haar.cpp"
  $249 = $122; //@line 199 "haar.cpp"
  $250 = (($249) + 1)|0; //@line 199 "haar.cpp"
  $122 = $250; //@line 199 "haar.cpp"
 }
 if ((label|0) == 9) {
  $211 = ___cxa_find_matching_catch_2()|0;
  $212 = tempRet0;
  $125 = $211; //@line 221 "haar.cpp"
  $126 = $212; //@line 221 "haar.cpp"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($123); //@line 206 "haar.cpp"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 221 "haar.cpp"
  $334 = $125; //@line 221 "haar.cpp"
  $335 = $126; //@line 221 "haar.cpp"
  ___resumeException($334|0);
  // unreachable;
 }
 __THREW__ = 0;
 $251 = (invoke_ii(106,($121|0))|0); //@line 208 "haar.cpp"
 $252 = __THREW__; __THREW__ = 0;
 $253 = $252&1;
 if ($253) {
  $257 = ___cxa_find_matching_catch_2()|0;
  $258 = tempRet0;
  $125 = $257; //@line 221 "haar.cpp"
  $126 = $258; //@line 221 "haar.cpp"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 221 "haar.cpp"
  $334 = $125; //@line 221 "haar.cpp"
  $335 = $126; //@line 221 "haar.cpp"
  ___resumeException($334|0);
  // unreachable;
 }
 $254 = $251&1; //@line 208 "haar.cpp"
 $127 = $254; //@line 208 "haar.cpp"
 $255 = $127; //@line 210 "haar.cpp"
 $256 = $255&1; //@line 210 "haar.cpp"
 if (!($256)) {
  $$expand_i1_val = 0; //@line 211 "haar.cpp"
  HEAP8[$118>>0] = $$expand_i1_val; //@line 211 "haar.cpp"
  $128 = 1;
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 221 "haar.cpp"
  $$pre_trunc = HEAP8[$118>>0]|0; //@line 221 "haar.cpp"
  $333 = $$pre_trunc&1; //@line 221 "haar.cpp"
  STACKTOP = sp;return ($333|0); //@line 221 "haar.cpp"
 }
 $129 = 0; //@line 213 "haar.cpp"
 $130 = $121; //@line 214 "haar.cpp"
 $259 = $130; //@line 214 "haar.cpp"
 $56 = $259; //@line 214 "haar.cpp"
 $260 = $56; //@line 214 "haar.cpp"
 $261 = HEAP32[$260>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $260; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $261; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $262 = $54; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $52; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $262; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $263 = $50; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $264 = $51; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$263>>2] = $264; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $265 = HEAP32[$52>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$55>>2] = $265; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $266 = HEAP32[$55>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$131>>2] = $266; //@line 214 "haar.cpp"
 $267 = $130; //@line 214 "haar.cpp"
 $63 = $267; //@line 214 "haar.cpp"
 $268 = $63; //@line 214 "haar.cpp"
 $269 = ((($268)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $270 = HEAP32[$269>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $268; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $270; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $271 = $61; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $59; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $271; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $272 = $57; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $273 = $58; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$272>>2] = $273; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $274 = HEAP32[$59>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$62>>2] = $274; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $275 = HEAP32[$62>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$132>>2] = $275; //@line 214 "haar.cpp"
 while(1) {
  $68 = $131; //@line 214 "haar.cpp"
  $69 = $132; //@line 214 "haar.cpp"
  $276 = $68; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $277 = $69; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $66 = $276; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $67 = $277; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $278 = $66; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $65 = $278; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $279 = $65; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $280 = HEAP32[$279>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $281 = $67; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $64 = $281; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $282 = $64; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $283 = HEAP32[$282>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $284 = ($280|0)==($283|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $285 = $284 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  if (!($285)) {
   break;
  }
  $70 = $131; //@line 214 "haar.cpp"
  $286 = $70; //@line 214 "haar.cpp"
  $287 = HEAP32[$286>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $133 = $287; //@line 214 "haar.cpp"
  $288 = $133; //@line 215 "haar.cpp"
  $134 = $288; //@line 215 "haar.cpp"
  $289 = $134; //@line 215 "haar.cpp"
  $77 = $289; //@line 215 "haar.cpp"
  $290 = $77; //@line 215 "haar.cpp"
  $291 = HEAP32[$290>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $74 = $290; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $75 = $291; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $292 = $75; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $73; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $292; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $293 = $71; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $294 = $72; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$293>>2] = $294; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $295 = HEAP32[$73>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$76>>2] = $295; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  $296 = HEAP32[$76>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$135>>2] = $296; //@line 215 "haar.cpp"
  $297 = $134; //@line 215 "haar.cpp"
  $84 = $297; //@line 215 "haar.cpp"
  $298 = $84; //@line 215 "haar.cpp"
  $299 = ((($298)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $300 = HEAP32[$299>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $81 = $298; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $82 = $300; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $301 = $82; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $78 = $80; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $79 = $301; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $302 = $78; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  $303 = $79; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$302>>2] = $303; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $304 = HEAP32[$80>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$83>>2] = $304; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  $305 = HEAP32[$83>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$136>>2] = $305; //@line 215 "haar.cpp"
  while(1) {
   $89 = $135; //@line 215 "haar.cpp"
   $90 = $136; //@line 215 "haar.cpp"
   $306 = $89; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $307 = $90; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $87 = $306; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $88 = $307; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $308 = $87; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $86 = $308; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $309 = $86; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $310 = HEAP32[$309>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $311 = $88; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $85 = $311; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $312 = $85; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $313 = HEAP32[$312>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $314 = ($310|0)==($313|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $315 = $314 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
   if (!($315)) {
    break;
   }
   $91 = $135; //@line 215 "haar.cpp"
   $316 = $91; //@line 215 "haar.cpp"
   $317 = HEAP32[$316>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $318 = HEAP16[$317>>1]|0; //@line 215 "haar.cpp"
   $137 = $318; //@line 215 "haar.cpp"
   $319 = $137; //@line 216 "haar.cpp"
   $320 = $119; //@line 216 "haar.cpp"
   $321 = $129; //@line 216 "haar.cpp"
   $322 = (($321) + 1)|0; //@line 216 "haar.cpp"
   $129 = $322; //@line 216 "haar.cpp"
   $92 = $320; //@line 216 "haar.cpp"
   $93 = $321; //@line 216 "haar.cpp"
   $323 = $92; //@line 216 "haar.cpp"
   $324 = $93; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $325 = HEAP32[$323>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $326 = (($325) + ($324<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP16[$326>>1] = $319; //@line 216 "haar.cpp"
   $94 = $135; //@line 215 "haar.cpp"
   $327 = $94; //@line 215 "haar.cpp"
   $328 = HEAP32[$327>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $329 = ((($328)) + 2|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$327>>2] = $329; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  }
  $95 = $131; //@line 214 "haar.cpp"
  $330 = $95; //@line 214 "haar.cpp"
  $331 = HEAP32[$330>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $332 = ((($331)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$330>>2] = $332; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 $$expand_i1_val2 = 1; //@line 220 "haar.cpp"
 HEAP8[$118>>0] = $$expand_i1_val2; //@line 220 "haar.cpp"
 $128 = 1;
 __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($121); //@line 221 "haar.cpp"
 $$pre_trunc = HEAP8[$118>>0]|0; //@line 221 "haar.cpp"
 $333 = $$pre_trunc&1; //@line 221 "haar.cpp"
 STACKTOP = sp;return ($333|0); //@line 221 "haar.cpp"
}
function __Z9thresholdRNSt3__26vectorIsNS_9allocatorIsEEEEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = $0;
 $13 = $1;
 $14 = 0; //@line 277 "haar.cpp"
 $15 = 0; //@line 278 "haar.cpp"
 $16 = 1; //@line 279 "haar.cpp"
 while(1) {
  $18 = $16; //@line 279 "haar.cpp"
  $19 = $18 << 16 >> 16; //@line 279 "haar.cpp"
  $20 = ($19|0)<(100); //@line 279 "haar.cpp"
  if (!($20)) {
   label = 13;
   break;
  }
  $17 = 2; //@line 280 "haar.cpp"
  while(1) {
   $21 = $17; //@line 280 "haar.cpp"
   $22 = $12; //@line 280 "haar.cpp"
   $10 = $22; //@line 280 "haar.cpp"
   $23 = $10; //@line 280 "haar.cpp"
   $24 = ((($23)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $25 = HEAP32[$24>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $26 = HEAP32[$23>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $27 = $25; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $28 = $26; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $29 = (($27) - ($28))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $30 = (($29|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
   $31 = ($21>>>0)<($30>>>0); //@line 280 "haar.cpp"
   if (!($31)) {
    break;
   }
   $32 = $14; //@line 280 "haar.cpp"
   $33 = $13; //@line 280 "haar.cpp"
   $34 = ($32|0)<($33|0); //@line 280 "haar.cpp"
   if (!($34)) {
    break;
   }
   $35 = $12; //@line 281 "haar.cpp"
   $36 = $17; //@line 281 "haar.cpp"
   $2 = $35; //@line 281 "haar.cpp"
   $3 = $36; //@line 281 "haar.cpp"
   $37 = $2; //@line 281 "haar.cpp"
   $38 = $3; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $39 = HEAP32[$37>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $40 = (($39) + ($38<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $41 = HEAP16[$40>>1]|0; //@line 281 "haar.cpp"
   $42 = $41 << 16 >> 16; //@line 281 "haar.cpp"
   $43 = ($42|0)!=(0); //@line 281 "haar.cpp"
   if ($43) {
    $44 = $12; //@line 281 "haar.cpp"
    $45 = $17; //@line 281 "haar.cpp"
    $4 = $44; //@line 281 "haar.cpp"
    $5 = $45; //@line 281 "haar.cpp"
    $46 = $4; //@line 281 "haar.cpp"
    $47 = $5; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $48 = HEAP32[$46>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $49 = (($48) + ($47<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $50 = HEAP16[$49>>1]|0; //@line 281 "haar.cpp"
    $51 = $50 << 16 >> 16; //@line 281 "haar.cpp"
    $52 = (Math_abs(($51|0))|0); //@line 281 "haar.cpp"
    $53 = $16; //@line 281 "haar.cpp"
    $54 = $53 << 16 >> 16; //@line 281 "haar.cpp"
    $55 = ($52|0)<=($54|0); //@line 281 "haar.cpp"
    if ($55) {
     $56 = $12; //@line 282 "haar.cpp"
     $57 = $17; //@line 282 "haar.cpp"
     $6 = $56; //@line 282 "haar.cpp"
     $7 = $57; //@line 282 "haar.cpp"
     $58 = $6; //@line 282 "haar.cpp"
     $59 = $7; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $60 = HEAP32[$58>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $61 = (($60) + ($59<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $62 = HEAP16[$61>>1]|0; //@line 282 "haar.cpp"
     $63 = $62 << 16 >> 16; //@line 282 "haar.cpp"
     $64 = (Math_abs(($63|0))|0); //@line 282 "haar.cpp"
     $65 = $15; //@line 282 "haar.cpp"
     $66 = (($65) + ($64))|0; //@line 282 "haar.cpp"
     $15 = $66; //@line 282 "haar.cpp"
     $67 = $12; //@line 283 "haar.cpp"
     $68 = $17; //@line 283 "haar.cpp"
     $8 = $67; //@line 283 "haar.cpp"
     $9 = $68; //@line 283 "haar.cpp"
     $69 = $8; //@line 283 "haar.cpp"
     $70 = $9; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $71 = HEAP32[$69>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $72 = (($71) + ($70<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$72>>1] = 0; //@line 283 "haar.cpp"
     $73 = $14; //@line 284 "haar.cpp"
     $74 = (($73) + 1)|0; //@line 284 "haar.cpp"
     $14 = $74; //@line 284 "haar.cpp"
    }
   }
   $75 = $17; //@line 280 "haar.cpp"
   $76 = (($75) + 1)|0; //@line 280 "haar.cpp"
   $17 = $76; //@line 280 "haar.cpp"
  }
  $77 = $14; //@line 288 "haar.cpp"
  $78 = $13; //@line 288 "haar.cpp"
  $79 = ($77|0)==($78|0); //@line 288 "haar.cpp"
  if ($79) {
   label = 11;
   break;
  }
  $81 = $16; //@line 279 "haar.cpp"
  $82 = (($81) + 1)<<16>>16; //@line 279 "haar.cpp"
  $16 = $82; //@line 279 "haar.cpp"
 }
 if ((label|0) == 11) {
  $80 = $15; //@line 289 "haar.cpp"
  $11 = $80; //@line 289 "haar.cpp"
  $84 = $11; //@line 293 "haar.cpp"
  STACKTOP = sp;return ($84|0); //@line 293 "haar.cpp"
 }
 else if ((label|0) == 13) {
  $83 = $15; //@line 292 "haar.cpp"
  $11 = $83; //@line 292 "haar.cpp"
  $84 = $11; //@line 293 "haar.cpp"
  STACKTOP = sp;return ($84|0); //@line 293 "haar.cpp"
 }
 return (0)|0;
}
function __ZN10emscripten8functionIlJRNSt3__26vectorIsNS1_9allocatorIsEEEEiEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 107; //@line 419 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 421 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJlRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getCountEv($5)|0); //@line 422 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJlRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getTypesEv($5)|0); //@line 423 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $6; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $10; //@line 424 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 425 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $4; //@line 426 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0)); //@line 420 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z10threshold2RNSt3__26vectorIsNS_9allocatorIsEEEEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $13 = $0;
 $14 = $1;
 $25 = $13; //@line 225 "haar.cpp"
 $10 = $25; //@line 225 "haar.cpp"
 $11 = 0; //@line 225 "haar.cpp"
 $26 = $10; //@line 225 "haar.cpp"
 $27 = $11; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = HEAP32[$26>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = (($28) + ($27<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = HEAP16[$29>>1]|0; //@line 225 "haar.cpp"
 $31 = $30 << 16 >> 16; //@line 225 "haar.cpp"
 $15 = $31; //@line 225 "haar.cpp"
 $32 = $13; //@line 226 "haar.cpp"
 $2 = $32; //@line 226 "haar.cpp"
 $3 = 1; //@line 226 "haar.cpp"
 $33 = $2; //@line 226 "haar.cpp"
 $34 = $3; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$33>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = (($35) + ($34<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = HEAP16[$36>>1]|0; //@line 226 "haar.cpp"
 $38 = $37 << 16 >> 16; //@line 226 "haar.cpp"
 $16 = $38; //@line 226 "haar.cpp"
 $17 = 0; //@line 236 "haar.cpp"
 $39 = $16; //@line 237 "haar.cpp"
 $40 = (($39) - 1)|0; //@line 237 "haar.cpp"
 $18 = $40; //@line 237 "haar.cpp"
 L1: while(1) {
  $41 = $18; //@line 237 "haar.cpp"
  $42 = ($41|0)!=(0); //@line 237 "haar.cpp"
  if (!($42)) {
   label = 16;
   break;
  }
  $19 = 0; //@line 238 "haar.cpp"
  while(1) {
   $43 = $19; //@line 238 "haar.cpp"
   $44 = $18; //@line 238 "haar.cpp"
   $45 = $44<<1; //@line 238 "haar.cpp"
   $46 = ($43>>>0)<($45>>>0); //@line 238 "haar.cpp"
   if (!($46)) {
    break;
   }
   $47 = $19; //@line 239 "haar.cpp"
   $48 = (($47>>>0) / 2)&-1; //@line 239 "haar.cpp"
   $49 = $48&65535; //@line 239 "haar.cpp"
   $20 = $49; //@line 239 "haar.cpp"
   $50 = $19; //@line 241 "haar.cpp"
   $51 = (($50>>>0) % 2)&-1; //@line 241 "haar.cpp"
   $52 = ($51|0)==(0); //@line 241 "haar.cpp"
   $53 = $18; //@line 243 "haar.cpp"
   if ($52) {
    $54 = $20; //@line 243 "haar.cpp"
    $55 = $54 << 16 >> 16; //@line 243 "haar.cpp"
    $56 = (($53) - ($55))|0; //@line 243 "haar.cpp"
    $57 = $56&65535; //@line 243 "haar.cpp"
    $21 = $57; //@line 243 "haar.cpp"
    $58 = $18; //@line 244 "haar.cpp"
    $59 = $58&65535; //@line 244 "haar.cpp"
    $22 = $59; //@line 244 "haar.cpp"
   } else {
    $60 = $53&65535; //@line 247 "haar.cpp"
    $21 = $60; //@line 247 "haar.cpp"
    $61 = $18; //@line 248 "haar.cpp"
    $62 = $20; //@line 248 "haar.cpp"
    $63 = $62 << 16 >> 16; //@line 248 "haar.cpp"
    $64 = (($61) - ($63))|0; //@line 248 "haar.cpp"
    $65 = $64&65535; //@line 248 "haar.cpp"
    $22 = $65; //@line 248 "haar.cpp"
   }
   $23 = 0; //@line 252 "haar.cpp"
   while(1) {
    $66 = $23; //@line 252 "haar.cpp"
    $67 = $15; //@line 252 "haar.cpp"
    $68 = ($66>>>0)<($67>>>0); //@line 252 "haar.cpp"
    if (!($68)) {
     break;
    }
    $69 = $22; //@line 254 "haar.cpp"
    $70 = $69 << 16 >> 16; //@line 254 "haar.cpp"
    $71 = $16; //@line 254 "haar.cpp"
    $72 = Math_imul($70, $71)|0; //@line 254 "haar.cpp"
    $73 = $21; //@line 254 "haar.cpp"
    $74 = $73 << 16 >> 16; //@line 254 "haar.cpp"
    $75 = (($72) + ($74))|0; //@line 254 "haar.cpp"
    $24 = $75; //@line 254 "haar.cpp"
    $76 = $23; //@line 255 "haar.cpp"
    $77 = $16; //@line 255 "haar.cpp"
    $78 = $16; //@line 255 "haar.cpp"
    $79 = Math_imul($77, $78)|0; //@line 255 "haar.cpp"
    $80 = Math_imul($76, $79)|0; //@line 255 "haar.cpp"
    $81 = $24; //@line 255 "haar.cpp"
    $82 = (($81) + ($80))|0; //@line 255 "haar.cpp"
    $24 = $82; //@line 255 "haar.cpp"
    $83 = $24; //@line 256 "haar.cpp"
    $84 = (($83) + 2)|0; //@line 256 "haar.cpp"
    $24 = $84; //@line 256 "haar.cpp"
    $85 = $13; //@line 259 "haar.cpp"
    $86 = $24; //@line 259 "haar.cpp"
    $4 = $85; //@line 259 "haar.cpp"
    $5 = $86; //@line 259 "haar.cpp"
    $87 = $4; //@line 259 "haar.cpp"
    $88 = $5; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $89 = HEAP32[$87>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $90 = (($89) + ($88<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $91 = HEAP16[$90>>1]|0; //@line 259 "haar.cpp"
    $92 = $91 << 16 >> 16; //@line 259 "haar.cpp"
    $93 = ($92|0)!=(0); //@line 259 "haar.cpp"
    if ($93) {
     $94 = $13; //@line 260 "haar.cpp"
     $95 = $24; //@line 260 "haar.cpp"
     $6 = $94; //@line 260 "haar.cpp"
     $7 = $95; //@line 260 "haar.cpp"
     $96 = $6; //@line 260 "haar.cpp"
     $97 = $7; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $98 = HEAP32[$96>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $99 = (($98) + ($97<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $100 = HEAP16[$99>>1]|0; //@line 260 "haar.cpp"
     $101 = $100 << 16 >> 16; //@line 260 "haar.cpp"
     $102 = $17; //@line 260 "haar.cpp"
     $103 = (($102) + ($101))|0; //@line 260 "haar.cpp"
     $17 = $103; //@line 260 "haar.cpp"
     $104 = $13; //@line 261 "haar.cpp"
     $105 = $24; //@line 261 "haar.cpp"
     $8 = $104; //@line 261 "haar.cpp"
     $9 = $105; //@line 261 "haar.cpp"
     $106 = $8; //@line 261 "haar.cpp"
     $107 = $9; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $108 = HEAP32[$106>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $109 = (($108) + ($107<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$109>>1] = 0; //@line 261 "haar.cpp"
     $110 = $17; //@line 262 "haar.cpp"
     $111 = $14; //@line 262 "haar.cpp"
     $112 = ($110|0)>=($111|0); //@line 262 "haar.cpp"
     if ($112) {
      label = 12;
      break L1;
     }
    }
    $114 = $23; //@line 252 "haar.cpp"
    $115 = (($114) + 1)|0; //@line 252 "haar.cpp"
    $23 = $115; //@line 252 "haar.cpp"
   }
   $116 = $19; //@line 238 "haar.cpp"
   $117 = (($116) + 1)|0; //@line 238 "haar.cpp"
   $19 = $117; //@line 238 "haar.cpp"
  }
  $118 = $18; //@line 237 "haar.cpp"
  $119 = (($118) + -1)|0; //@line 237 "haar.cpp"
  $18 = $119; //@line 237 "haar.cpp"
 }
 if ((label|0) == 12) {
  $113 = $17; //@line 263 "haar.cpp"
  $12 = $113; //@line 263 "haar.cpp"
  $121 = $12; //@line 274 "haar.cpp"
  STACKTOP = sp;return ($121|0); //@line 274 "haar.cpp"
 }
 else if ((label|0) == 16) {
  $120 = $17; //@line 271 "haar.cpp"
  $12 = $120; //@line 271 "haar.cpp"
  $121 = $12; //@line 274 "haar.cpp"
  STACKTOP = sp;return ($121|0); //@line 274 "haar.cpp"
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIlJRNSt3__26vectorIsNS2_9allocatorIsEEEEiEE6invokeEPFlS7_iEPS6_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($8)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($10)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (FUNCTION_TABLE_iii[$7 & 127]($9,$11)|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$6>>2] = $12; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = (__ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($6)|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($13|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJlRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJlRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJlRNSt3__26vectorIsNS3_9allocatorIsEEEEiEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJlRNSt3__26vectorIsNS3_9allocatorIsEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (800|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 236 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 236 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 238 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 238 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 238 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return; //@line 880 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 84|0;
 $8 = sp + 16|0;
 $11 = sp + 72|0;
 $12 = sp + 111|0;
 $13 = sp + 8|0;
 $17 = sp + 110|0;
 $19 = sp;
 $21 = sp + 109|0;
 $27 = sp + 108|0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $32; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $24; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ((($33)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $34; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $35; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $36 = $22; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $36; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $20; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0; //@line 1545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $37; //@line 1545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $31; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $15; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $38; //@line 365 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$38>>2] = 0; //@line 441 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = ((($38)) + 4|0); //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$39>>2] = 0; //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = ((($38)) + 8|0); //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $40; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$11>>2] = 0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $10; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $11; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $9; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $43 = HEAP32[$42>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $13; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$8>>0]=HEAP8[$12>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $41; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$7>>2] = $43; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $6; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $8; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $7; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $46 = HEAP32[$45>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$44>>2] = $46; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $47 = $26; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $47; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $2; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = ((($48)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = HEAP32[$49>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = HEAP32[$48>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $50; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($52) - ($53))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($54|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $55; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $28; //@line 1203 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = ($56>>>0)>(0); //@line 1203 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($57)) {
  STACKTOP = sp;return; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $58 = $28; //@line 1205 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(108,($31|0),($58|0)); //@line 1205 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $70; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($31); //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $29; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $30; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($71|0);
  // unreachable;
 }
 $61 = $26; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = HEAP32[$61>>2]|0; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $26; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = ((($63)) + 4|0); //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$64>>2]|0; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $28; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_viiii(109,($31|0),($62|0),($65|0),($66|0)); //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $70; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($31); //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $29; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $30; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($71|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 881 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $42; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ((($50)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $51; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $40; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $53; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $39; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) - ($59))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = (($60|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($61) + 1)|0; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$35>>2] = $62; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $34; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = (__ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8max_sizeEv($63)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $64; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$35>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $36; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ($65>>>0)>($66>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $32 = $63; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $32; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $68; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $31; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $69; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = ((($70)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $71; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = $29; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $28; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = HEAP32[$73>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = HEAP32[$69>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $74; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $75; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = (($76) - ($77))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = (($78|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $79; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $37; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $36; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = (($81>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ($80>>>0)>=($82>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($83) {
  $84 = $36; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $84; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $85 = $37; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $86 = $85<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$38>>2] = $86; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $38; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $35; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $87 = $25; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = $26; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $22 = $87; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $23 = $88; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $89 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $90 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $19 = $24; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $20 = $89; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $21 = $90; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $91 = $20; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $92 = HEAP32[$91>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $93 = $21; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $94 = HEAP32[$93>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $95 = ($92>>>0)<($94>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $96 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $97 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $98 = $95 ? $96 : $97; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $99 = HEAP32[$98>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $99; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $100 = $33; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = $18; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = ((($101)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = HEAP32[$102>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = HEAP32[$101>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $103; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $104; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = (($105) - ($106))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = (($107|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $45; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEEC2EjjS6_($46,$100,$108,$109); //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $45; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = ((($46)) + 8|0); //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$111>>2]|0; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $112; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $114 = $44; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $114; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $110; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $113; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $115; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $118; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $116; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $117; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $119; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $122; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $120; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $121; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $123; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $124 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $125; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $126 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __THREW__ = 0;
 invoke_vii(96,($124|0),($126|0)); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 if ($128) {
  $134 = ___cxa_find_matching_catch_2()|0;
  $135 = tempRet0;
  $47 = $134; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $135; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $136 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $137 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($136|0);
  // unreachable;
 }
 $129 = ((($46)) + 8|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $130 = HEAP32[$129>>2]|0; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $131 = ((($130)) + 12|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$129>>2] = $131; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(110,($49|0),($46|0)); //@line 1577 "/usr/lib/emscripten/system/include/libcxx/vector"
 $132 = __THREW__; __THREW__ = 0;
 $133 = $132&1;
 if ($133) {
  $134 = ___cxa_find_matching_catch_2()|0;
  $135 = tempRet0;
  $47 = $134; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $135; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $136 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $137 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($136|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __Z16ihaarTransform2DRNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $23 = sp + 132|0;
 $26 = sp + 24|0;
 $24 = $0;
 $33 = $24; //@line 141 "haar.cpp"
 $22 = $33; //@line 141 "haar.cpp"
 $34 = $22; //@line 141 "haar.cpp"
 $35 = ((($34)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$35>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = HEAP32[$34>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $37; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($38) - ($39))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($40|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $24; //@line 141 "haar.cpp"
 $21 = $42; //@line 141 "haar.cpp"
 $43 = $21; //@line 141 "haar.cpp"
 $44 = ((($43)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$43>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $45; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($47) - ($48))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($49|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = (($50) - 1)|0; //@line 141 "haar.cpp"
 $52 = $41 & $51; //@line 141 "haar.cpp"
 $53 = ($52|0)==(0); //@line 141 "haar.cpp"
 if ($53) {
  $54 = $24; //@line 141 "haar.cpp"
  $17 = $54; //@line 141 "haar.cpp"
  $55 = $17; //@line 141 "haar.cpp"
  $56 = ((($55)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = HEAP32[$56>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $58; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = (($59) - ($60))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = (($61|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = ($62|0)!=(0); //@line 141 "haar.cpp"
  if ($63) {
   $25 = 0; //@line 145 "haar.cpp"
   while(1) {
    $64 = $25; //@line 145 "haar.cpp"
    $65 = $24; //@line 145 "haar.cpp"
    $9 = $65; //@line 145 "haar.cpp"
    $66 = $9; //@line 145 "haar.cpp"
    $67 = ((($66)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $68 = HEAP32[$67>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $69 = HEAP32[$66>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $70 = $68; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $71 = $69; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $72 = (($70) - ($71))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $73 = (($72|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $74 = ($64>>>0)<($73>>>0); //@line 145 "haar.cpp"
    if (!($74)) {
     label = 19;
     break;
    }
    $75 = $24; //@line 146 "haar.cpp"
    $8 = $75; //@line 146 "haar.cpp"
    $76 = $8; //@line 146 "haar.cpp"
    $77 = ((($76)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $78 = HEAP32[$77>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $79 = HEAP32[$76>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $80 = $78; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $81 = $79; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $82 = (($80) - ($81))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $83 = (($82|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($26,$83); //@line 146 "haar.cpp"
    $27 = 0; //@line 147 "haar.cpp"
    while(1) {
     $84 = $27; //@line 147 "haar.cpp"
     $85 = $24; //@line 147 "haar.cpp"
     $1 = $85; //@line 147 "haar.cpp"
     $86 = $1; //@line 147 "haar.cpp"
     $87 = ((($86)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $88 = HEAP32[$87>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $89 = HEAP32[$86>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $90 = $88; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $91 = $89; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $92 = (($90) - ($91))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $93 = (($92|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $94 = ($84>>>0)<($93>>>0); //@line 147 "haar.cpp"
     if (!($94)) {
      break;
     }
     $95 = $24; //@line 148 "haar.cpp"
     $96 = $27; //@line 148 "haar.cpp"
     $2 = $95; //@line 148 "haar.cpp"
     $3 = $96; //@line 148 "haar.cpp"
     $97 = $2; //@line 148 "haar.cpp"
     $98 = $3; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $99 = HEAP32[$97>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $100 = (($99) + (($98*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $101 = $25; //@line 148 "haar.cpp"
     $4 = $100; //@line 148 "haar.cpp"
     $5 = $101; //@line 148 "haar.cpp"
     $102 = $4; //@line 148 "haar.cpp"
     $103 = $5; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $104 = HEAP32[$102>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $105 = (($104) + ($103<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $106 = HEAP16[$105>>1]|0; //@line 148 "haar.cpp"
     $107 = $27; //@line 148 "haar.cpp"
     $6 = $26; //@line 148 "haar.cpp"
     $7 = $107; //@line 148 "haar.cpp"
     $108 = $6; //@line 148 "haar.cpp"
     $109 = $7; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $110 = HEAP32[$108>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $111 = (($110) + ($109<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$111>>1] = $106; //@line 148 "haar.cpp"
     $112 = $27; //@line 147 "haar.cpp"
     $113 = (($112) + 1)|0; //@line 147 "haar.cpp"
     $27 = $113; //@line 147 "haar.cpp"
    }
    __THREW__ = 0;
    $118 = (invoke_ii(87,($26|0))|0); //@line 151 "haar.cpp"
    $119 = __THREW__; __THREW__ = 0;
    $120 = $119&1;
    if ($120) {
     label = 9;
     break;
    }
    if ($118) {
     $31 = 0; //@line 154 "haar.cpp"
     while(1) {
      $121 = $31; //@line 154 "haar.cpp"
      $122 = $24; //@line 154 "haar.cpp"
      $10 = $122; //@line 154 "haar.cpp"
      $123 = $10; //@line 154 "haar.cpp"
      $124 = ((($123)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $125 = HEAP32[$124>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $126 = HEAP32[$123>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $127 = $125; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $128 = $126; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $129 = (($127) - ($128))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $130 = (($129|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $131 = ($121>>>0)<($130>>>0); //@line 154 "haar.cpp"
      if (!($131)) {
       break;
      }
      $132 = $31; //@line 155 "haar.cpp"
      $11 = $26; //@line 155 "haar.cpp"
      $12 = $132; //@line 155 "haar.cpp"
      $133 = $11; //@line 155 "haar.cpp"
      $134 = $12; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $135 = HEAP32[$133>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $136 = (($135) + ($134<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $137 = HEAP16[$136>>1]|0; //@line 155 "haar.cpp"
      $138 = $24; //@line 155 "haar.cpp"
      $139 = $31; //@line 155 "haar.cpp"
      $13 = $138; //@line 155 "haar.cpp"
      $14 = $139; //@line 155 "haar.cpp"
      $140 = $13; //@line 155 "haar.cpp"
      $141 = $14; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $142 = HEAP32[$140>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $143 = (($142) + (($141*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $144 = $25; //@line 155 "haar.cpp"
      $15 = $143; //@line 155 "haar.cpp"
      $16 = $144; //@line 155 "haar.cpp"
      $145 = $15; //@line 155 "haar.cpp"
      $146 = $16; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $147 = HEAP32[$145>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $148 = (($147) + ($146<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP16[$148>>1] = $137; //@line 155 "haar.cpp"
      $149 = $31; //@line 154 "haar.cpp"
      $150 = (($149) + 1)|0; //@line 154 "haar.cpp"
      $31 = $150; //@line 154 "haar.cpp"
     }
     $30 = 0; //@line 158 "haar.cpp"
    } else {
     $$expand_i1_val2 = 0; //@line 151 "haar.cpp"
     HEAP8[$23>>0] = $$expand_i1_val2; //@line 151 "haar.cpp"
     $30 = 1;
    }
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($26); //@line 158 "haar.cpp"
    $151 = $30;
    $switch = ($151>>>0)<(1);
    if (!($switch)) {
     label = 25;
     break;
    }
    $152 = $25; //@line 145 "haar.cpp"
    $153 = (($152) + 1)|0; //@line 145 "haar.cpp"
    $25 = $153; //@line 145 "haar.cpp"
   }
   if ((label|0) == 9) {
    $114 = ___cxa_find_matching_catch_2()|0;
    $115 = tempRet0;
    $28 = $114; //@line 165 "haar.cpp"
    $29 = $115; //@line 165 "haar.cpp"
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($26); //@line 158 "haar.cpp"
    $116 = $28; //@line 158 "haar.cpp"
    $117 = $29; //@line 158 "haar.cpp"
    ___resumeException($116|0);
    // unreachable;
   }
   else if ((label|0) == 19) {
    $32 = 0; //@line 161 "haar.cpp"
    while(1) {
     $154 = $32; //@line 161 "haar.cpp"
     $155 = $24; //@line 161 "haar.cpp"
     $18 = $155; //@line 161 "haar.cpp"
     $156 = $18; //@line 161 "haar.cpp"
     $157 = ((($156)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $158 = HEAP32[$157>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $159 = HEAP32[$156>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $160 = $158; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $161 = $159; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $162 = (($160) - ($161))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $163 = (($162|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $164 = ($154>>>0)<($163>>>0); //@line 161 "haar.cpp"
     if (!($164)) {
      label = 24;
      break;
     }
     $165 = $24; //@line 162 "haar.cpp"
     $166 = $32; //@line 162 "haar.cpp"
     $19 = $165; //@line 162 "haar.cpp"
     $20 = $166; //@line 162 "haar.cpp"
     $167 = $19; //@line 162 "haar.cpp"
     $168 = $20; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $169 = HEAP32[$167>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $170 = (($169) + (($168*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $171 = (__Z14ihaarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE($170)|0); //@line 162 "haar.cpp"
     if (!($171)) {
      label = 22;
      break;
     }
     $172 = $32; //@line 161 "haar.cpp"
     $173 = (($172) + 1)|0; //@line 161 "haar.cpp"
     $32 = $173; //@line 161 "haar.cpp"
    }
    if ((label|0) == 22) {
     $$expand_i1_val4 = 0; //@line 162 "haar.cpp"
     HEAP8[$23>>0] = $$expand_i1_val4; //@line 162 "haar.cpp"
     $$pre_trunc = HEAP8[$23>>0]|0; //@line 165 "haar.cpp"
     $174 = $$pre_trunc&1; //@line 165 "haar.cpp"
     STACKTOP = sp;return ($174|0); //@line 165 "haar.cpp"
    }
    else if ((label|0) == 24) {
     $$expand_i1_val6 = 1; //@line 164 "haar.cpp"
     HEAP8[$23>>0] = $$expand_i1_val6; //@line 164 "haar.cpp"
     $$pre_trunc = HEAP8[$23>>0]|0; //@line 165 "haar.cpp"
     $174 = $$pre_trunc&1; //@line 165 "haar.cpp"
     STACKTOP = sp;return ($174|0); //@line 165 "haar.cpp"
    }
   }
   else if ((label|0) == 25) {
    $$pre_trunc = HEAP8[$23>>0]|0; //@line 165 "haar.cpp"
    $174 = $$pre_trunc&1; //@line 165 "haar.cpp"
    STACKTOP = sp;return ($174|0); //@line 165 "haar.cpp"
   }
  }
 }
 $$expand_i1_val = 0; //@line 142 "haar.cpp"
 HEAP8[$23>>0] = $$expand_i1_val; //@line 142 "haar.cpp"
 $$pre_trunc = HEAP8[$23>>0]|0; //@line 165 "haar.cpp"
 $174 = $$pre_trunc&1; //@line 165 "haar.cpp"
 STACKTOP = sp;return ($174|0); //@line 165 "haar.cpp"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($2); //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 458 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0; //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = ($32|0)!=(0|0); //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($33)) {
  STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $29 = $31; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $29; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$34>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $34; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $35; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $27; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $37 = $28; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = ((($36)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = HEAP32[$38>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = ($37|0)!=($39|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($40)) {
   break;
  }
  $26 = $36; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $26; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ((($41)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $25; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = ((($36)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = HEAP32[$45>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = ((($46)) + -12|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$45>>2] = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $44; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $48; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $49; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $50; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $51; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $52; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $16; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($53); //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $14 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $14; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $55; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $56; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = HEAP32[$31>>2]|0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $4; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $59; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = ((($60)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $61; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $62; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = HEAP32[$63>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$59>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $64; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $65; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = (($66) - ($67))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = (($68|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $57; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $58; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $69; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $9; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $10; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $11; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $70; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $71; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $72; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $7; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $73; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $5; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($74); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 36|0;
 $8 = sp + 24|0;
 $11 = $0;
 $12 = $1;
 $15 = $11;
 $10 = $15; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $10; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $16; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$16>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = ((($16)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$17>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = ((($16)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $18; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$8>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $7; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $8; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = HEAP32[$20>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $19; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$5>>2] = $21; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $4; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $22; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $5; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $24 = HEAP32[$23>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$22>>2] = $24; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $12; //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = ($25>>>0)>(0); //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($26)) {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $27 = $12; //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(108,($15|0),($27|0)); //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 }
 $30 = $12; //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(111,($15|0),($30|0)); //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16; //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($17)|0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ($18>>>0)>($19>>>0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17); //@line 930 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $14 = $17; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = ((($21)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $22; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $16; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $24; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $25; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $10; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $26; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $27; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $7; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $8; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $28; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = ($29>>>0)>(2147483647); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt9bad_allocC2Ev($31); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  ___cxa_throw(($31|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
 } else {
  $32 = $8; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $33 = $32<<1; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $33; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $34 = $5; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $35 = (__Znwj($34)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $36 = ((($17)) + 4|0); //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$36>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$17>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = HEAP32[$17>>2]|0; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $16; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = (($37) + ($38<<1)|0); //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $4 = $17; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = $4; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = ((($40)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $3 = $41; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = $3; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $2 = $42; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $2; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$43>>2] = $39; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($17,0); //@line 933 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 934 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $9 = sp + 57|0;
 $17 = sp + 56|0;
 $14 = $0;
 $15 = $1;
 $18 = $14;
 $13 = $18; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $13; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ((($19)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $20; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $12; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $21; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $11; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $22; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($17,$18,1); //@line 982 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $16; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = ((($18)) + 4|0); //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = HEAP32[$24>>2]|0; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $25; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $10; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $23; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $8 = $26; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $27 = $7; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $28 = $8; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $27; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $28; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $29 = $4; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $30 = $5; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $29; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $30; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $31 = $3; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP16[$31>>1] = 0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $32 = ((($18)) + 4|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = HEAP32[$32>>2]|0; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $34 = ((($33)) + 2|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$32>>2] = $34; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $15; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = (($35) + -1)|0; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $15 = $36; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($17); //@line 986 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = $15; //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = ($37>>>0)>(0); //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($38)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 988 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $17; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = ((($22)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $16; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $24; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $15; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $25; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $13; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $26; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $27; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$19>>2] = 357913941; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = (4294967295 / 2)&-1; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $28; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $19; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $20; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $7; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $30 = $8; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $4 = $29; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $5 = $30; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $31 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $32 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $1 = $6; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $2 = $31; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $3 = $32; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = $2; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = HEAP32[$33>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = $3; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $36 = HEAP32[$35>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $37 = ($34>>>0)<($36>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $38 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $39 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $40 = $37 ? $38 : $39; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $41 = HEAP32[$40>>2]|0; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($41|0); //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $33 = $30; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $24 = $32; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$25>>2] = 0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $26 = $33; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $34 = $24; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $23 = $25; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $23; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $36 = HEAP32[$35>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $37 = $26; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $37; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $38 = $17; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $34; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$21>>2] = $36; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $38; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $39 = $20; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $21; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $40 = $19; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $41 = HEAP32[$40>>2]|0; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$39>>2] = $41; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = ((($39)) + 4|0); //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = $22; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $43; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $18; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$42>>2] = $44; //@line 2073 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $46 = ($45|0)!=(0); //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($46) {
   $6 = $31; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $47 = $6; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $48 = ((($47)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $5 = $48; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $49 = $5; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $4 = $49; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $50 = $4; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $51 = ((($50)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
   $52 = HEAP32[$51>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
   $53 = $28; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $12 = $52; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $13 = $53; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $54 = $12; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $55 = $13; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $9 = $54; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $10 = $55; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $11 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $56 = $9; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
   $57 = $10; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   $8 = $56; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   $58 = ($57>>>0)>(357913941); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt9bad_allocC2Ev($59); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    ___cxa_throw(($59|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
    // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
   } else {
    $60 = $10; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $61 = ($60*12)|0; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $7 = $61; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
    $62 = $7; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
    $63 = (__Znwj($62)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = HEAP32[$31>>2]|0; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $66 = $29; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $67 = (($65) + (($66*12)|0)|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $68 = ((($31)) + 8|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$68>>2] = $67; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $69 = ((($31)) + 4|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$69>>2] = $67; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = HEAP32[$31>>2]|0; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = $28; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = (($70) + (($71*12)|0)|0); //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $16 = $31; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $73 = $16; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $74 = ((($73)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $15 = $74; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = $15; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $14 = $75; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $76 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$76>>2] = $72; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 314 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $7 = sp + 300|0;
 $13 = sp + 276|0;
 $25 = sp + 228|0;
 $33 = sp + 196|0;
 $34 = sp + 16|0;
 $37 = sp + 184|0;
 $38 = sp + 326|0;
 $39 = sp + 8|0;
 $43 = sp + 325|0;
 $67 = sp;
 $72 = sp + 324|0;
 $82 = $0;
 $83 = $1;
 $84 = $82;
 __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE17__annotate_deleteEv($84); //@line 891 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $84; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $85 = $81; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $86 = ((($85)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $86; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $87 = $80; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $87; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $88 = $79; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $89 = HEAP32[$84>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = ((($84)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = HEAP32[$90>>2]|0; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = $83; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $93 = ((($92)) + 4|0); //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $74 = $88; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = $89; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $91; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $93; //@line 892 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $94 = $76; //@line 1616 "/usr/lib/emscripten/system/include/libcxx/memory"
  $95 = $75; //@line 1616 "/usr/lib/emscripten/system/include/libcxx/memory"
  $96 = ($94|0)!=($95|0); //@line 1616 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($96)) {
   break;
  }
  $97 = $74; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $98 = $77; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $99 = HEAP32[$98>>2]|0; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $100 = ((($99)) + -12|0); //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $73 = $100; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $101 = $73; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $102 = $76; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $103 = ((($102)) + -12|0); //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $76 = $103; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $28 = $103; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $104 = $28; //@line 264 "/usr/lib/emscripten/system/include/libcxx/utility"
  $27 = $104; //@line 264 "/usr/lib/emscripten/system/include/libcxx/utility"
  $105 = $27; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $69 = $97; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $101; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $105; //@line 1618 "/usr/lib/emscripten/system/include/libcxx/memory"
  $106 = $69; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $107 = $70; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $108 = $71; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $108; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $109 = $68; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$67>>0]=HEAP8[$72>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $106; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = $107; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $109; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $110 = $64; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $111 = $65; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $112 = $66; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $112; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $113 = $63; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $60 = $110; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $111; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = $113; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $114 = $61; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $115 = $62; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $115; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $116 = $59; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $57 = $114; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $116; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $117 = $57; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $118 = $58; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = $118; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $119 = $56; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $120 = ((($119)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = $120; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $121 = $55; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = $121; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $122 = $54; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $122; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $123 = $53; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $41 = $117; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = $123; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $124 = $41; //@line 1235 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = $124; //@line 365 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$124>>2] = 0; //@line 441 "/usr/lib/emscripten/system/include/libcxx/vector"
  $125 = ((($124)) + 4|0); //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$125>>2] = 0; //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
  $126 = ((($124)) + 8|0); //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
  ;HEAP8[$39>>0]=HEAP8[$43>>0]|0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $126; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$37>>2] = 0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
  $127 = $36; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $37; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  $128 = $35; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $129 = HEAP32[$128>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  $29 = $39; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$34>>0]=HEAP8[$38>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  $32 = $127; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$33>>2] = $129; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  $130 = $32; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
  $31 = $34; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
  $30 = $33; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
  $131 = $30; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $132 = HEAP32[$131>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$130>>2] = $132; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
  $133 = $58; //@line 1241 "/usr/lib/emscripten/system/include/libcxx/vector"
  $134 = HEAP32[$133>>2]|0; //@line 1241 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$117>>2] = $134; //@line 1241 "/usr/lib/emscripten/system/include/libcxx/vector"
  $135 = $58; //@line 1242 "/usr/lib/emscripten/system/include/libcxx/vector"
  $136 = ((($135)) + 4|0); //@line 1242 "/usr/lib/emscripten/system/include/libcxx/vector"
  $137 = HEAP32[$136>>2]|0; //@line 1242 "/usr/lib/emscripten/system/include/libcxx/vector"
  $138 = ((($117)) + 4|0); //@line 1242 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$138>>2] = $137; //@line 1242 "/usr/lib/emscripten/system/include/libcxx/vector"
  $139 = $58; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $139; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $140 = $46; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $141 = ((($140)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = $141; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $142 = $45; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = $142; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $143 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $144 = HEAP32[$143>>2]|0; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $117; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $145 = $49; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $146 = ((($145)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $146; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $147 = $48; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = $147; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $148 = $47; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$148>>2] = $144; //@line 1243 "/usr/lib/emscripten/system/include/libcxx/vector"
  $149 = $58; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $52 = $149; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $150 = $52; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $151 = ((($150)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $51 = $151; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $152 = $51; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $50 = $152; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $153 = $50; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$153>>2] = 0; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $154 = $58; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $155 = ((($154)) + 4|0); //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$155>>2] = 0; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $156 = $58; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$156>>2] = 0; //@line 1244 "/usr/lib/emscripten/system/include/libcxx/vector"
  $157 = $77; //@line 1619 "/usr/lib/emscripten/system/include/libcxx/memory"
  $158 = HEAP32[$157>>2]|0; //@line 1619 "/usr/lib/emscripten/system/include/libcxx/memory"
  $159 = ((($158)) + -12|0); //@line 1619 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$157>>2] = $159; //@line 1619 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $160 = $83; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $161 = ((($160)) + 4|0); //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $84; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $161; //@line 893 "/usr/lib/emscripten/system/include/libcxx/vector"
 $162 = $5; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $162; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $163 = $4; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $164 = HEAP32[$163>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$7>>2] = $164; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $165 = $6; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $2 = $165; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $166 = $2; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $167 = HEAP32[$166>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $168 = $5; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$168>>2] = $167; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $7; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $169 = $3; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $170 = HEAP32[$169>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $171 = $6; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$171>>2] = $170; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $172 = ((($84)) + 4|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $173 = $83; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $174 = ((($173)) + 8|0); //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $172; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $174; //@line 894 "/usr/lib/emscripten/system/include/libcxx/vector"
 $175 = $11; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $10 = $175; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $176 = $10; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $177 = HEAP32[$176>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$13>>2] = $177; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $178 = $12; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $8 = $178; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $179 = $8; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $180 = HEAP32[$179>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $181 = $11; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$181>>2] = $180; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $9 = $13; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $182 = $9; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $183 = HEAP32[$182>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $184 = $12; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$184>>2] = $183; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $16 = $84; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $185 = $16; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $186 = ((($185)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $186; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $187 = $15; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $187; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $188 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $189 = $83; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $189; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $190 = $19; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $191 = ((($190)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $191; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $192 = $18; //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $17 = $192; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $193 = $17; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $188; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $193; //@line 895 "/usr/lib/emscripten/system/include/libcxx/vector"
 $194 = $23; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = $194; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $195 = $22; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $196 = HEAP32[$195>>2]|0; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$25>>2] = $196; //@line 4453 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $197 = $24; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $20 = $197; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $198 = $20; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $199 = HEAP32[$198>>2]|0; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $200 = $23; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$200>>2] = $199; //@line 4454 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = $25; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $201 = $21; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $202 = HEAP32[$201>>2]|0; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $203 = $24; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$203>>2] = $202; //@line 4455 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $204 = $83; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $205 = ((($204)) + 4|0); //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $206 = HEAP32[$205>>2]|0; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $207 = $83; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$207>>2] = $206; //@line 896 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $84; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $208 = $26; //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $209 = ((($208)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $210 = HEAP32[$209>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $211 = HEAP32[$208>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $212 = $210; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $213 = $211; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $214 = (($212) - ($213))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $215 = (($214|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE14__annotate_newEj($84,$215); //@line 897 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = $84; //@line 898 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 899 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__214__split_bufferINS_6vectorIsNS_9allocatorIsEEEERNS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $36 = $33; //@line 341 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $37 = ((($36)) + 4|0); //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = HEAP32[$37>>2]|0; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $36; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $31 = $38; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $39 = $30; //@line 86 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $40 = $31; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $27 = $39; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $40; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $41 = $27; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $42 = $28; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $43 = ((($41)) + 8|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = HEAP32[$43>>2]|0; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = ($42|0)!=($44|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($45)) {
   break;
  }
  $26 = $41; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $46 = $26; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $47 = ((($46)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $25 = $47; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $48 = $25; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $24 = $48; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = ((($49)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = HEAP32[$50>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($41)) + 8|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = HEAP32[$52>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = ((($53)) + -12|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$52>>2] = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $51; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $21 = $55; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $56 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $56; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $57; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $58; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $59; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $60 = $16; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($60); //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $61 = HEAP32[$35>>2]|0; //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = ($61|0)!=(0|0); //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if (!($62)) {
  STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $14 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $63 = $14; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = ((($63)) + 12|0); //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = $64; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = $13; //@line 54 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $12 = $65; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $67 = ((($66)) + 4|0); //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = HEAP32[$67>>2]|0; //@line 2131 "/usr/lib/emscripten/system/include/libcxx/memory"
 $69 = HEAP32[$35>>2]|0; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $11 = $35; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = $11; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $10 = $70; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = $10; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = ((($71)) + 12|0); //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $9 = $72; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $73 = $9; //@line 57 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $8 = $73; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $8; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $75 = HEAP32[$74>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $76 = HEAP32[$70>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $77 = $75; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = $76; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = (($77) - ($78))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $80 = (($79|0) / 12)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $5 = $68; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $6 = $69; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $7 = $80; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $81 = $5; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $82 = $6; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $83 = $7; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $81; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $82; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $83; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $84 = $3; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $84; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $85 = $1; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($85); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $19; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $17; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = HEAP32[$25>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $26; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $21; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $5; //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $28; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $4; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $29; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = ((($30)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $31; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $32; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = HEAP32[$33>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$29>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $34; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = (($36) - ($37))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($38|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($27) + (($39*12)|0)|0); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $7; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = HEAP32[$41>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $42; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $6; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $8; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = ((($44)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$45>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $47; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($48) - ($49))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = (($50|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = (($43) + (($51*12)|0)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $10; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = HEAP32[$53>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $54; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $21; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $15; //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $56; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $14; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $57; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $13; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = ((($58)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $59; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $12; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $60; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $11; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = HEAP32[$61>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = HEAP32[$57>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = $62; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $63; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = (($64) - ($65))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = (($66|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = (($55) + (($67*12)|0)|0); //@line 849 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($21,$24,$40,$52,$68); //@line 848 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 850 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $19; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = HEAP32[$23>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $24; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $17; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = HEAP32[$26>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $6; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $29; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = ((($31)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $32; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $33; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = HEAP32[$34>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($37) - ($38))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($39|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($28) + (($40*12)|0)|0); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $8; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = HEAP32[$42>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $43; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $13; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $45; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $12; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $46; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $11; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = ((($47)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $48; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $10; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $49; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $9; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = HEAP32[$50>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$46>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $52; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($53) - ($54))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = (($55|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = (($44) + (($56*12)|0)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $15; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = HEAP32[$58>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $59; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $21; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($60) + (($61*12)|0)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($22,$25,$41,$57,$62); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 845 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return; //@line 839 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 52|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $18 = $12;
 $11 = $18; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $11; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ((($19)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $20; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $10; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $21; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $9; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $22; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $15; //@line 1022 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($17,$18,$23); //@line 1022 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $16; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $13; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $14; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = ((($18)) + 4|0); //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $24; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $25; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $26; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $27; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $6; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $5; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $28; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = $29; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = (($30) - ($31))|0; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $33 = (($32|0) / 2)&-1; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $33; //@line 1602 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $8; //@line 1603 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = ($34|0)>(0); //@line 1603 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($35)) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($17); //@line 1024 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1025 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $36 = $7; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 $37 = HEAP32[$36>>2]|0; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 $38 = $5; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 $39 = $8; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 $40 = $39<<1; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 _memcpy(($37|0),($38|0),($40|0))|0; //@line 1605 "/usr/lib/emscripten/system/include/libcxx/memory"
 $41 = $8; //@line 1606 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $7; //@line 1606 "/usr/lib/emscripten/system/include/libcxx/memory"
 $43 = HEAP32[$42>>2]|0; //@line 1606 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = (($43) + ($41<<1)|0); //@line 1606 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$42>>2] = $44; //@line 1606 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($17); //@line 1024 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 1025 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal7InvokerIbJRNSt3__26vectorIsNS2_9allocatorIsEEEEiEE6invokeEPFbS7_iEPS6_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $4; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($7)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (FUNCTION_TABLE_iii[$6 & 127]($8,$10)|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($12|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEiEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (812|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __Z15haarTransform2DRNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $23 = sp + 132|0;
 $27 = sp + 20|0;
 $24 = $0;
 $33 = $24; //@line 111 "haar.cpp"
 $22 = $33; //@line 111 "haar.cpp"
 $34 = $22; //@line 111 "haar.cpp"
 $35 = ((($34)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$35>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = HEAP32[$34>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $37; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($38) - ($39))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($40|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $24; //@line 111 "haar.cpp"
 $21 = $42; //@line 111 "haar.cpp"
 $43 = $21; //@line 111 "haar.cpp"
 $44 = ((($43)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$43>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $45; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($47) - ($48))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($49|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = (($50) - 1)|0; //@line 111 "haar.cpp"
 $52 = $41 & $51; //@line 111 "haar.cpp"
 $53 = ($52|0)==(0); //@line 111 "haar.cpp"
 if ($53) {
  $54 = $24; //@line 111 "haar.cpp"
  $13 = $54; //@line 111 "haar.cpp"
  $55 = $13; //@line 111 "haar.cpp"
  $56 = ((($55)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = HEAP32[$56>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $58; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = (($59) - ($60))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = (($61|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = ($62|0)!=(0); //@line 111 "haar.cpp"
  if ($63) {
   $25 = 0; //@line 117 "haar.cpp"
   while(1) {
    $64 = $25; //@line 117 "haar.cpp"
    $65 = $24; //@line 117 "haar.cpp"
    $12 = $65; //@line 117 "haar.cpp"
    $66 = $12; //@line 117 "haar.cpp"
    $67 = ((($66)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $68 = HEAP32[$67>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $69 = HEAP32[$66>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $70 = $68; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $71 = $69; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $72 = (($70) - ($71))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $73 = (($72|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $74 = ($64>>>0)<($73>>>0); //@line 117 "haar.cpp"
    if (!($74)) {
     break;
    }
    $75 = $24; //@line 118 "haar.cpp"
    $76 = $25; //@line 118 "haar.cpp"
    $3 = $75; //@line 118 "haar.cpp"
    $4 = $76; //@line 118 "haar.cpp"
    $77 = $3; //@line 118 "haar.cpp"
    $78 = $4; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $79 = HEAP32[$77>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $80 = (($79) + (($78*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
    $81 = (__Z13haarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE($80)|0); //@line 118 "haar.cpp"
    if (!($81)) {
     label = 7;
     break;
    }
    $82 = $25; //@line 117 "haar.cpp"
    $83 = (($82) + 1)|0; //@line 117 "haar.cpp"
    $25 = $83; //@line 117 "haar.cpp"
   }
   if ((label|0) == 7) {
    $$expand_i1_val2 = 0; //@line 118 "haar.cpp"
    HEAP8[$23>>0] = $$expand_i1_val2; //@line 118 "haar.cpp"
    $$pre_trunc = HEAP8[$23>>0]|0; //@line 137 "haar.cpp"
    $174 = $$pre_trunc&1; //@line 137 "haar.cpp"
    STACKTOP = sp;return ($174|0); //@line 137 "haar.cpp"
   }
   $26 = 0; //@line 122 "haar.cpp"
   while(1) {
    $84 = $26; //@line 122 "haar.cpp"
    $85 = $24; //@line 122 "haar.cpp"
    $1 = $85; //@line 122 "haar.cpp"
    $86 = $1; //@line 122 "haar.cpp"
    $87 = ((($86)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $88 = HEAP32[$87>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $89 = HEAP32[$86>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $90 = $88; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $91 = $89; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $92 = (($90) - ($91))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $93 = (($92|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $94 = ($84>>>0)<($93>>>0); //@line 122 "haar.cpp"
    if (!($94)) {
     label = 24;
     break;
    }
    $95 = $24; //@line 123 "haar.cpp"
    $2 = $95; //@line 123 "haar.cpp"
    $96 = $2; //@line 123 "haar.cpp"
    $97 = ((($96)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $98 = HEAP32[$97>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $99 = HEAP32[$96>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $100 = $98; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $101 = $99; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $102 = (($100) - ($101))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    $103 = (($102|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
    __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($27,$103); //@line 123 "haar.cpp"
    $28 = 0; //@line 124 "haar.cpp"
    while(1) {
     $104 = $28; //@line 124 "haar.cpp"
     $105 = $24; //@line 124 "haar.cpp"
     $5 = $105; //@line 124 "haar.cpp"
     $106 = $5; //@line 124 "haar.cpp"
     $107 = ((($106)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $108 = HEAP32[$107>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $109 = HEAP32[$106>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $110 = $108; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $111 = $109; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $112 = (($110) - ($111))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $113 = (($112|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
     $114 = ($104>>>0)<($113>>>0); //@line 124 "haar.cpp"
     if (!($114)) {
      break;
     }
     $115 = $24; //@line 125 "haar.cpp"
     $116 = $28; //@line 125 "haar.cpp"
     $6 = $115; //@line 125 "haar.cpp"
     $7 = $116; //@line 125 "haar.cpp"
     $117 = $6; //@line 125 "haar.cpp"
     $118 = $7; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $119 = HEAP32[$117>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $120 = (($119) + (($118*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $121 = $26; //@line 125 "haar.cpp"
     $8 = $120; //@line 125 "haar.cpp"
     $9 = $121; //@line 125 "haar.cpp"
     $122 = $8; //@line 125 "haar.cpp"
     $123 = $9; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $124 = HEAP32[$122>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $125 = (($124) + ($123<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $126 = HEAP16[$125>>1]|0; //@line 125 "haar.cpp"
     $127 = $28; //@line 125 "haar.cpp"
     $10 = $27; //@line 125 "haar.cpp"
     $11 = $127; //@line 125 "haar.cpp"
     $128 = $10; //@line 125 "haar.cpp"
     $129 = $11; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $130 = HEAP32[$128>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     $131 = (($130) + ($129<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
     HEAP16[$131>>1] = $126; //@line 125 "haar.cpp"
     $132 = $28; //@line 124 "haar.cpp"
     $133 = (($132) + 1)|0; //@line 124 "haar.cpp"
     $28 = $133; //@line 124 "haar.cpp"
    }
    __THREW__ = 0;
    $138 = (invoke_ii(86,($27|0))|0); //@line 128 "haar.cpp"
    $139 = __THREW__; __THREW__ = 0;
    $140 = $139&1;
    if ($140) {
     label = 14;
     break;
    }
    if ($138) {
     $32 = 0; //@line 131 "haar.cpp"
     while(1) {
      $141 = $32; //@line 131 "haar.cpp"
      $142 = $24; //@line 131 "haar.cpp"
      $14 = $142; //@line 131 "haar.cpp"
      $143 = $14; //@line 131 "haar.cpp"
      $144 = ((($143)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $145 = HEAP32[$144>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $146 = HEAP32[$143>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $147 = $145; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $148 = $146; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $149 = (($147) - ($148))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $150 = (($149|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
      $151 = ($141>>>0)<($150>>>0); //@line 131 "haar.cpp"
      if (!($151)) {
       break;
      }
      $152 = $32; //@line 132 "haar.cpp"
      $15 = $27; //@line 132 "haar.cpp"
      $16 = $152; //@line 132 "haar.cpp"
      $153 = $15; //@line 132 "haar.cpp"
      $154 = $16; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $155 = HEAP32[$153>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $156 = (($155) + ($154<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $157 = HEAP16[$156>>1]|0; //@line 132 "haar.cpp"
      $158 = $24; //@line 132 "haar.cpp"
      $159 = $32; //@line 132 "haar.cpp"
      $17 = $158; //@line 132 "haar.cpp"
      $18 = $159; //@line 132 "haar.cpp"
      $160 = $17; //@line 132 "haar.cpp"
      $161 = $18; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $162 = HEAP32[$160>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $163 = (($162) + (($161*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $164 = $26; //@line 132 "haar.cpp"
      $19 = $163; //@line 132 "haar.cpp"
      $20 = $164; //@line 132 "haar.cpp"
      $165 = $19; //@line 132 "haar.cpp"
      $166 = $20; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $167 = HEAP32[$165>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $168 = (($167) + ($166<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      HEAP16[$168>>1] = $157; //@line 132 "haar.cpp"
      $169 = $32; //@line 131 "haar.cpp"
      $170 = (($169) + 1)|0; //@line 131 "haar.cpp"
      $32 = $170; //@line 131 "haar.cpp"
     }
     $31 = 0; //@line 134 "haar.cpp"
    } else {
     $$expand_i1_val4 = 0; //@line 128 "haar.cpp"
     HEAP8[$23>>0] = $$expand_i1_val4; //@line 128 "haar.cpp"
     $31 = 1;
    }
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($27); //@line 134 "haar.cpp"
    $171 = $31;
    $switch = ($171>>>0)<(1);
    if (!($switch)) {
     label = 25;
     break;
    }
    $172 = $26; //@line 122 "haar.cpp"
    $173 = (($172) + 1)|0; //@line 122 "haar.cpp"
    $26 = $173; //@line 122 "haar.cpp"
   }
   if ((label|0) == 14) {
    $134 = ___cxa_find_matching_catch_2()|0;
    $135 = tempRet0;
    $29 = $134; //@line 137 "haar.cpp"
    $30 = $135; //@line 137 "haar.cpp"
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($27); //@line 134 "haar.cpp"
    $136 = $29; //@line 134 "haar.cpp"
    $137 = $30; //@line 134 "haar.cpp"
    ___resumeException($136|0);
    // unreachable;
   }
   else if ((label|0) == 24) {
    $$expand_i1_val6 = 1; //@line 136 "haar.cpp"
    HEAP8[$23>>0] = $$expand_i1_val6; //@line 136 "haar.cpp"
    $$pre_trunc = HEAP8[$23>>0]|0; //@line 137 "haar.cpp"
    $174 = $$pre_trunc&1; //@line 137 "haar.cpp"
    STACKTOP = sp;return ($174|0); //@line 137 "haar.cpp"
   }
   else if ((label|0) == 25) {
    $$pre_trunc = HEAP8[$23>>0]|0; //@line 137 "haar.cpp"
    $174 = $$pre_trunc&1; //@line 137 "haar.cpp"
    STACKTOP = sp;return ($174|0); //@line 137 "haar.cpp"
   }
  }
 }
 $$expand_i1_val = 0; //@line 112 "haar.cpp"
 HEAP8[$23>>0] = $$expand_i1_val; //@line 112 "haar.cpp"
 $$pre_trunc = HEAP8[$23>>0]|0; //@line 137 "haar.cpp"
 $174 = $$pre_trunc&1; //@line 137 "haar.cpp"
 STACKTOP = sp;return ($174|0); //@line 137 "haar.cpp"
}
function __ZN10emscripten8internal7InvokerIbJRNSt3__26vectorIsNS2_9allocatorIsEEEEEE6invokeEPFbS7_EPS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($5)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (FUNCTION_TABLE_ii[$4 & 127]($6)|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($7)|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($8|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIsNS4_9allocatorIsEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIsNS3_9allocatorIsEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (824|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEJNS3_INS4_IsNS5_IsEEEENS8_ISC_EEEEEE6invokeEPFSA_SE_EPSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $52 = sp + 12|0;
 $53 = sp + 8|0;
 $50 = $0;
 $51 = $1;
 $56 = $50; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $57 = $51; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $58 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEE12fromWireTypeEPS7_($57)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$53>>2] = $58; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __THREW__ = 0;
 $59 = (invoke_ii($56|0,($53|0))|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 do {
  if ($61) {
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = tempRet0;
   $54 = $95; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $55 = $96; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  } else {
   HEAP32[$52>>2] = $59; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   __THREW__ = 0;
   $62 = (invoke_ii(112,($52|0))|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $97 = ___cxa_find_matching_catch_2()|0;
    $98 = tempRet0;
    $54 = $97; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
    $55 = $98; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
    $25 = $52; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
    $99 = $25; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
    $22 = $99; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $23 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $100 = $22; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $21 = $100; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $101 = $21; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $20 = $101; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $102 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $103 = HEAP32[$102>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $24 = $103; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $104 = $23; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $17 = $100; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $105 = $17; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $16 = $105; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $106 = $16; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$106>>2] = $104; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $107 = $24; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    $108 = ($107|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    if (!($108)) {
     break;
    }
    $15 = $100; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $109 = $15; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $14 = $109; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $110 = $14; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $111 = $24; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $18 = $110; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $19 = $111; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $112 = $19; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    $113 = ($112|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    if ($113) {
     break;
    }
    __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($112); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZdlPv($112); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    break;
   }
   $49 = $52; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $65 = $49; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $46 = $65; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $47 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $66 = $46; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $45 = $66; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $67 = $45; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $44 = $67; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $68 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $69 = HEAP32[$68>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $48 = $69; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $70 = $47; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $41 = $66; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $71 = $41; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $40 = $71; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $72 = $40; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP32[$72>>2] = $70; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $73 = $48; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   $74 = ($73|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($74) {
    $39 = $66; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $75 = $39; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $38 = $75; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $76 = $38; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $77 = $48; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $42 = $76; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $43 = $77; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $78 = $43; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    $79 = ($78|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    if (!($79)) {
     __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($78); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
     __ZdlPv($78); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    }
   }
   $37 = $53; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $80 = $37; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $34 = $80; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $35 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $81 = $34; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $33 = $81; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $82 = $33; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $32 = $82; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $83 = $32; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $84 = HEAP32[$83>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $36 = $84; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $85 = $35; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $29 = $81; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $86 = $29; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $28 = $86; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $87 = $28; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP32[$87>>2] = $85; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $88 = $36; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   $89 = ($88|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   if (!($89)) {
    STACKTOP = sp;return ($62|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   }
   $27 = $81; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $90 = $27; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $26 = $90; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $91 = $26; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $92 = $36; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $30 = $91; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $31 = $92; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $93 = $31; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   $94 = ($93|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($94) {
    STACKTOP = sp;return ($62|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   }
   __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($93); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   __ZdlPv($93); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   STACKTOP = sp;return ($62|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  }
 } while(0);
 $13 = $53; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $114 = $13; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $114; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $115 = $10; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $115; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $116 = $9; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $116; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = HEAP32[$117>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = $118; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $11; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $115; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $5; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $120; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $4; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$121>>2] = $119; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $12; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = ($122|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($123)) {
  $129 = $54; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $130 = $55; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($129|0);
  // unreachable;
 }
 $3 = $115; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $124 = $3; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $124; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = $2; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $126 = $12; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $125; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $126; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $127 = $7; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $128 = ($127|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($128) {
  $129 = $54; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $130 = $55; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($129|0);
  // unreachable;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($127); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZdlPv($127); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $129 = $54; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $130 = $55; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ___resumeException($129|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEENS5_INS6_IsNS7_IsEEEENSA_ISE_EEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEENS5_INS6_IsNS7_IsEEEENSA_ISE_EEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIhNS3_9allocatorIhEEEENS3_14default_deleteIS8_EEEENS4_INS5_IsNS6_IsEEEENS9_ISD_EEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIhNS3_9allocatorIhEEEENS3_14default_deleteIS8_EEEENS4_INS5_IsNS6_IsEEEENS9_ISD_EEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (832|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEE12fromWireTypeEPS7_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $6 = sp + 20|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = $0;
 $12 = $11; //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $13 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeES7_($12)|0); //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $8 = $10; //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$9>>2] = $13; //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $14 = $8; //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $7 = $9; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $7; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $16 = HEAP32[$15>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $14; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$6>>2] = $16; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $5; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $6; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $19 = HEAP32[$18>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $17; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$3>>2] = $19; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $2; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $3; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $21 = $1; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = HEAP32[$21>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$20>>2] = $22; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = HEAP32[$10>>2]|0; //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($23|0); //@line 354 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEE10toWireTypeESA_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0; //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $7 = $5; //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $7; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $4; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $3; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = HEAP32[$9>>2]|0; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $10; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $7; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $2; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $11; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = $1; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$12>>2] = 0; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $6; //@line 2743 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeES7_($13)|0); //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($14|0); //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __Z11decodeImageNSt3__210unique_ptrINS_6vectorIsNS_9allocatorIsEEEENS_14default_deleteIS4_EEEEPjS8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $6 = sp + 596|0;
 $9 = sp + 584|0;
 $15 = sp + 560|0;
 $18 = sp + 548|0;
 $21 = sp + 536|0;
 $53 = sp + 408|0;
 $56 = sp + 396|0;
 $60 = sp + 380|0;
 $63 = sp + 368|0;
 $67 = sp + 8|0;
 $70 = sp + 618|0;
 $82 = sp;
 $87 = sp + 617|0;
 $98 = sp + 616|0;
 $126 = sp + 136|0;
 $129 = sp + 116|0;
 $134 = sp + 88|0;
 $136 = sp + 72|0;
 $137 = sp + 60|0;
 $143 = sp + 36|0;
 $144 = sp + 32|0;
 $146 = sp + 615|0;
 $152 = sp + 614|0;
 $127 = $1;
 $128 = $2;
 $125 = $0; //@line 348 "haar.cpp"
 $153 = $125; //@line 348 "haar.cpp"
 $124 = $153; //@line 2730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $154 = $124; //@line 2730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $154; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $155 = $123; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $156 = HEAP32[$155>>2]|0; //@line 2730 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($129,$156); //@line 348 "haar.cpp"
 $121 = $129; //@line 350 "haar.cpp"
 $122 = 0; //@line 350 "haar.cpp"
 $157 = $121; //@line 350 "haar.cpp"
 $158 = $122; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $159 = HEAP32[$157>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $160 = (($159) + ($158<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $161 = HEAP16[$160>>1]|0; //@line 350 "haar.cpp"
 $162 = $161 << 16 >> 16; //@line 350 "haar.cpp"
 $130 = $162; //@line 350 "haar.cpp"
 $119 = $129; //@line 351 "haar.cpp"
 $120 = 1; //@line 351 "haar.cpp"
 $163 = $119; //@line 351 "haar.cpp"
 $164 = $120; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $165 = HEAP32[$163>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $166 = (($165) + ($164<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
 $167 = HEAP16[$166>>1]|0; //@line 351 "haar.cpp"
 $168 = $167 << 16 >> 16; //@line 351 "haar.cpp"
 $133 = $168; //@line 351 "haar.cpp"
 $169 = $130; //@line 353 "haar.cpp"
 __THREW__ = 0;
 invoke_vii(113,($134|0),($169|0)); //@line 353 "haar.cpp"
 $170 = __THREW__; __THREW__ = 0;
 $171 = $170&1;
 if ($171) {
  $218 = ___cxa_find_matching_catch_2()|0;
  $219 = tempRet0;
  $131 = $218; //@line 401 "haar.cpp"
  $132 = $219; //@line 401 "haar.cpp"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
  $428 = $131; //@line 401 "haar.cpp"
  $429 = $132; //@line 401 "haar.cpp"
  ___resumeException($428|0);
  // unreachable;
 }
 $135 = 0; //@line 355 "haar.cpp"
 while(1) {
  $172 = $135; //@line 355 "haar.cpp"
  $173 = $130; //@line 355 "haar.cpp"
  $174 = ($172|0)<($173|0); //@line 355 "haar.cpp"
  if (!($174)) {
   label = 16;
   break;
  }
  $175 = $133; //@line 357 "haar.cpp"
  $176 = $133; //@line 358 "haar.cpp"
  __THREW__ = 0;
  invoke_vii(114,($137|0),($176|0)); //@line 358 "haar.cpp"
  $177 = __THREW__; __THREW__ = 0;
  $178 = $177&1;
  if ($178) {
   label = 10;
   break;
  }
  __THREW__ = 0;
  invoke_viii(115,($136|0),($175|0),($137|0)); //@line 356 "haar.cpp"
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   label = 11;
   break;
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($137); //@line 356 "haar.cpp"
  $138 = 0; //@line 361 "haar.cpp"
  while(1) {
   $181 = $138; //@line 361 "haar.cpp"
   $182 = $133; //@line 361 "haar.cpp"
   $183 = $133; //@line 361 "haar.cpp"
   $184 = Math_imul($182, $183)|0; //@line 361 "haar.cpp"
   $185 = ($181|0)<($184|0); //@line 361 "haar.cpp"
   if (!($185)) {
    break;
   }
   $186 = $138; //@line 362 "haar.cpp"
   $187 = $135; //@line 362 "haar.cpp"
   $188 = $133; //@line 362 "haar.cpp"
   $189 = Math_imul($187, $188)|0; //@line 362 "haar.cpp"
   $190 = $133; //@line 362 "haar.cpp"
   $191 = Math_imul($189, $190)|0; //@line 362 "haar.cpp"
   $192 = (($186) + ($191))|0; //@line 362 "haar.cpp"
   $193 = (($192) + 2)|0; //@line 362 "haar.cpp"
   $139 = $193; //@line 362 "haar.cpp"
   $194 = $138; //@line 364 "haar.cpp"
   $195 = $133; //@line 364 "haar.cpp"
   $196 = (($194|0) / ($195|0))&-1; //@line 364 "haar.cpp"
   $140 = $196; //@line 364 "haar.cpp"
   $197 = $138; //@line 365 "haar.cpp"
   $198 = $133; //@line 365 "haar.cpp"
   $199 = (($197|0) % ($198|0))&-1; //@line 365 "haar.cpp"
   $141 = $199; //@line 365 "haar.cpp"
   $200 = $139; //@line 367 "haar.cpp"
   $117 = $129; //@line 367 "haar.cpp"
   $118 = $200; //@line 367 "haar.cpp"
   $201 = $117; //@line 367 "haar.cpp"
   $202 = $118; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $203 = HEAP32[$201>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $204 = (($203) + ($202<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $205 = HEAP16[$204>>1]|0; //@line 367 "haar.cpp"
   $206 = $140; //@line 367 "haar.cpp"
   $115 = $136; //@line 367 "haar.cpp"
   $116 = $206; //@line 367 "haar.cpp"
   $207 = $115; //@line 367 "haar.cpp"
   $208 = $116; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $209 = HEAP32[$207>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $210 = (($209) + (($208*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $211 = $141; //@line 367 "haar.cpp"
   $101 = $210; //@line 367 "haar.cpp"
   $102 = $211; //@line 367 "haar.cpp"
   $212 = $101; //@line 367 "haar.cpp"
   $213 = $102; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $214 = HEAP32[$212>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   $215 = (($214) + ($213<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP16[$215>>1] = $205; //@line 367 "haar.cpp"
   $216 = $138; //@line 361 "haar.cpp"
   $217 = (($216) + 1)|0; //@line 361 "haar.cpp"
   $138 = $217; //@line 361 "haar.cpp"
  }
  $226 = $135; //@line 369 "haar.cpp"
  $99 = $134; //@line 369 "haar.cpp"
  $100 = $226; //@line 369 "haar.cpp"
  $227 = $99; //@line 369 "haar.cpp"
  $228 = $100; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
  $229 = HEAP32[$227>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
  $230 = (($229) + (($228*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $230; //@line 369 "haar.cpp"
  $72 = $136; //@line 369 "haar.cpp"
  $231 = $71; //@line 369 "haar.cpp"
  $232 = $72; //@line 1353 "/usr/lib/emscripten/system/include/libcxx/vector"
  $233 = ($231|0)!=($232|0); //@line 1353 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($233) {
   $234 = $72; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $68 = $231; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $69 = $234; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $235 = $68; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $236 = $69; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   ;HEAP8[$67>>0]=HEAP8[$70>>0]|0; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $65 = $235; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $66 = $236; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $237 = $72; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $238 = HEAP32[$237>>2]|0; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $239 = $72; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $240 = ((($239)) + 4|0); //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $241 = HEAP32[$240>>2]|0; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   __THREW__ = 0;
   invoke_viii(116,($231|0),($238|0),($241|0)); //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if ($243) {
    label = 12;
    break;
   }
  }
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($136); //@line 370 "haar.cpp"
  $244 = $135; //@line 355 "haar.cpp"
  $245 = (($244) + 1)|0; //@line 355 "haar.cpp"
  $135 = $245; //@line 355 "haar.cpp"
 }
 L17: do {
  if ((label|0) == 11) {
   $222 = ___cxa_find_matching_catch_2()|0;
   $223 = tempRet0;
   $131 = $222; //@line 401 "haar.cpp"
   $132 = $223; //@line 401 "haar.cpp"
   __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($137); //@line 356 "haar.cpp"
  }
  else if ((label|0) == 12) {
   $224 = ___cxa_find_matching_catch_2()|0;
   $225 = tempRet0;
   $131 = $224; //@line 401 "haar.cpp"
   $132 = $225; //@line 401 "haar.cpp"
   __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($136); //@line 370 "haar.cpp"
  }
  else if ((label|0) == 16) {
   $142 = $134; //@line 372 "haar.cpp"
   $246 = $142; //@line 372 "haar.cpp"
   $64 = $246; //@line 372 "haar.cpp"
   $247 = $64; //@line 372 "haar.cpp"
   $248 = HEAP32[$247>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $61 = $247; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $62 = $248; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $249 = $62; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $58 = $60; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $59 = $249; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $250 = $58; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $251 = $59; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$250>>2] = $251; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $252 = HEAP32[$60>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$63>>2] = $252; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   $253 = HEAP32[$63>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$143>>2] = $253; //@line 372 "haar.cpp"
   $254 = $142; //@line 372 "haar.cpp"
   $57 = $254; //@line 372 "haar.cpp"
   $255 = $57; //@line 372 "haar.cpp"
   $256 = ((($255)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $257 = HEAP32[$256>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $54 = $255; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $55 = $257; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $258 = $55; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $51 = $53; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $52 = $258; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $259 = $51; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   $260 = $52; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   HEAP32[$259>>2] = $260; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
   $261 = HEAP32[$53>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$56>>2] = $261; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   $262 = HEAP32[$56>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$144>>2] = $262; //@line 372 "haar.cpp"
   while(1) {
    $49 = $143; //@line 372 "haar.cpp"
    $50 = $144; //@line 372 "haar.cpp"
    $263 = $49; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $264 = $50; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $47 = $263; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $48 = $264; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $265 = $47; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $46 = $265; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $266 = $46; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $267 = HEAP32[$266>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $268 = $48; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $45 = $268; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $269 = $45; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $270 = HEAP32[$269>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $271 = ($267|0)==($270|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $272 = $271 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
    if (!($272)) {
     break;
    }
    $29 = $143; //@line 372 "haar.cpp"
    $273 = $29; //@line 372 "haar.cpp"
    $274 = HEAP32[$273>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $145 = $274; //@line 372 "haar.cpp"
    $275 = $145; //@line 373 "haar.cpp"
    __THREW__ = 0;
    (invoke_ii(106,($275|0))|0); //@line 373 "haar.cpp"
    $276 = __THREW__; __THREW__ = 0;
    $277 = $276&1;
    if ($277) {
     label = 10;
     break L17;
    }
    $28 = $143; //@line 372 "haar.cpp"
    $278 = $28; //@line 372 "haar.cpp"
    $279 = HEAP32[$278>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $280 = ((($279)) + 12|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$278>>2] = $280; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
   }
   $$expand_i1_val = 0; //@line 376 "haar.cpp"
   HEAP8[$146>>0] = $$expand_i1_val; //@line 376 "haar.cpp"
   __THREW__ = 0;
   $281 = (invoke_ii(43,12)|0); //@line 376 "haar.cpp"
   $282 = __THREW__; __THREW__ = 0;
   $283 = $282&1;
   if ($283) {
    label = 10;
   } else {
    $12 = $281; //@line 376 "haar.cpp"
    $284 = $12; //@line 376 "haar.cpp"
    $11 = $284; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
    $285 = $11; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
    $10 = $285; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$285>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
    $286 = ((($285)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$286>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
    $287 = ((($285)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $8 = $287; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    HEAP32[$9>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $288 = $8; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
    $7 = $9; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $289 = $7; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $290 = HEAP32[$289>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $5 = $288; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$6>>2] = $290; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $291 = $5; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $4 = $291; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
    $3 = $6; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $292 = $3; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $293 = HEAP32[$292>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$291>>2] = $293; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $20 = $126; //@line 376 "haar.cpp"
    HEAP32[$21>>2] = $281; //@line 376 "haar.cpp"
    $294 = $20; //@line 376 "haar.cpp"
    $19 = $21; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $295 = $19; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $296 = HEAP32[$295>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $17 = $294; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$18>>2] = $296; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $297 = $17; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
    $16 = $18; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $298 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $299 = HEAP32[$298>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $14 = $297; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$15>>2] = $299; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $300 = $14; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
    $13 = $15; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $301 = $13; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $302 = HEAP32[$301>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$300>>2] = $302; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
    $147 = 0; //@line 377 "haar.cpp"
    L25: while(1) {
     $303 = $147; //@line 377 "haar.cpp"
     $304 = $133; //@line 377 "haar.cpp"
     $305 = $133; //@line 377 "haar.cpp"
     $306 = Math_imul($304, $305)|0; //@line 377 "haar.cpp"
     $307 = ($303|0)<($306|0); //@line 377 "haar.cpp"
     if (!($307)) {
      break;
     }
     $308 = $147; //@line 378 "haar.cpp"
     $309 = $133; //@line 378 "haar.cpp"
     $310 = (($308|0) / ($309|0))&-1; //@line 378 "haar.cpp"
     $148 = $310; //@line 378 "haar.cpp"
     $311 = $147; //@line 379 "haar.cpp"
     $312 = $133; //@line 379 "haar.cpp"
     $313 = (($311|0) % ($312|0))&-1; //@line 379 "haar.cpp"
     $149 = $313; //@line 379 "haar.cpp"
     $150 = 0; //@line 380 "haar.cpp"
     while(1) {
      $314 = $150; //@line 380 "haar.cpp"
      $315 = $130; //@line 380 "haar.cpp"
      $316 = ($314|0)<($315|0); //@line 380 "haar.cpp"
      if (!($316)) {
       break;
      }
      $317 = $150; //@line 381 "haar.cpp"
      $22 = $134; //@line 381 "haar.cpp"
      $23 = $317; //@line 381 "haar.cpp"
      $318 = $22; //@line 381 "haar.cpp"
      $319 = $23; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $320 = HEAP32[$318>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $321 = (($320) + (($319*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $322 = $148; //@line 381 "haar.cpp"
      $24 = $321; //@line 381 "haar.cpp"
      $25 = $322; //@line 381 "haar.cpp"
      $323 = $24; //@line 381 "haar.cpp"
      $324 = $25; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $325 = HEAP32[$323>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $326 = (($325) + (($324*12)|0)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $327 = $149; //@line 381 "haar.cpp"
      $26 = $326; //@line 381 "haar.cpp"
      $27 = $327; //@line 381 "haar.cpp"
      $328 = $26; //@line 381 "haar.cpp"
      $329 = $27; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $330 = HEAP32[$328>>2]|0; //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $331 = (($330) + ($329<<1)|0); //@line 1499 "/usr/lib/emscripten/system/include/libcxx/vector"
      $332 = HEAP16[$331>>1]|0; //@line 381 "haar.cpp"
      $151 = $332; //@line 381 "haar.cpp"
      $333 = $151; //@line 383 "haar.cpp"
      $334 = $333 << 16 >> 16; //@line 383 "haar.cpp"
      $335 = ($334|0)>(255); //@line 383 "haar.cpp"
      if ($335) {
       $151 = 255; //@line 384 "haar.cpp"
      } else {
       $353 = $151; //@line 385 "haar.cpp"
       $354 = $353 << 16 >> 16; //@line 385 "haar.cpp"
       $355 = ($354|0)<(0); //@line 385 "haar.cpp"
       if ($355) {
        $151 = 0; //@line 386 "haar.cpp"
       }
      }
      $44 = $126; //@line 388 "haar.cpp"
      $356 = $44; //@line 388 "haar.cpp"
      $43 = $356; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $357 = $43; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $42 = $357; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $358 = $42; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
      $359 = HEAP32[$358>>2]|0; //@line 2729 "/usr/lib/emscripten/system/include/libcxx/memory"
      $360 = $151; //@line 388 "haar.cpp"
      $361 = $360&255; //@line 388 "haar.cpp"
      HEAP8[$152>>0] = $361; //@line 388 "haar.cpp"
      $96 = $359; //@line 388 "haar.cpp"
      $97 = $152; //@line 388 "haar.cpp"
      $362 = $96; //@line 388 "haar.cpp"
      $363 = ((($362)) + 4|0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $364 = HEAP32[$363>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $95 = $362; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $365 = $95; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $366 = ((($365)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $94 = $366; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $367 = $94; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
      $93 = $367; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $368 = $93; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
      $369 = HEAP32[$368>>2]|0; //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      $370 = ($364>>>0)<($369>>>0); //@line 1604 "/usr/lib/emscripten/system/include/libcxx/vector"
      if ($370) {
       __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($98,$362,1); //@line 1606 "/usr/lib/emscripten/system/include/libcxx/vector"
       $92 = $362; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $371 = $92; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $372 = ((($371)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $91 = $372; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $373 = $91; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
       $90 = $373; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $374 = $90; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
       $375 = ((($362)) + 4|0); //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $376 = HEAP32[$375>>2]|0; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $88 = $376; //@line 1608 "/usr/lib/emscripten/system/include/libcxx/vector"
       $377 = $88; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
       $378 = $97; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
       $73 = $378; //@line 1609 "/usr/lib/emscripten/system/include/libcxx/vector"
       $379 = $73; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $84 = $374; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $85 = $377; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $86 = $379; //@line 1607 "/usr/lib/emscripten/system/include/libcxx/vector"
       $380 = $84; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $381 = $85; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $382 = $86; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $83 = $382; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
       $383 = $83; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       ;HEAP8[$82>>0]=HEAP8[$87>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $79 = $380; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $80 = $381; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $81 = $383; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
       $384 = $79; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $385 = $80; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $386 = $81; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $78 = $386; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $387 = $78; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $75 = $384; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $76 = $385; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $77 = $387; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
       $388 = $76; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $389 = $77; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $74 = $389; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       $390 = $74; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       $391 = HEAP8[$390>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       HEAP8[$388>>0] = $391; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
       __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($98); //@line 1610 "/usr/lib/emscripten/system/include/libcxx/vector"
       $392 = ((($362)) + 4|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       $393 = HEAP32[$392>>2]|0; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       $394 = ((($393)) + 1|0); //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
       HEAP32[$392>>2] = $394; //@line 1611 "/usr/lib/emscripten/system/include/libcxx/vector"
      } else {
       $395 = $97; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $89 = $395; //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $396 = $89; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
       __THREW__ = 0;
       invoke_vii(117,($362|0),($396|0)); //@line 1614 "/usr/lib/emscripten/system/include/libcxx/vector"
       $397 = __THREW__; __THREW__ = 0;
       $398 = $397&1;
       if ($398) {
        label = 27;
        break L25;
       }
      }
      $399 = $150; //@line 380 "haar.cpp"
      $400 = (($399) + 1)|0; //@line 380 "haar.cpp"
      $150 = $400; //@line 380 "haar.cpp"
     }
     $401 = $147; //@line 377 "haar.cpp"
     $402 = (($401) + 1)|0; //@line 377 "haar.cpp"
     $147 = $402; //@line 377 "haar.cpp"
    }
    if ((label|0) == 27) {
     $336 = ___cxa_find_matching_catch_2()|0;
     $337 = tempRet0;
     $131 = $336; //@line 401 "haar.cpp"
     $132 = $337; //@line 401 "haar.cpp"
     $41 = $126; //@line 401 "haar.cpp"
     $338 = $41; //@line 401 "haar.cpp"
     $38 = $338; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $39 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $339 = $38; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
     $37 = $339; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $340 = $37; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $36 = $340; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $341 = $36; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $342 = HEAP32[$341>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $40 = $342; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
     $343 = $39; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $33 = $339; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $344 = $33; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $32 = $344; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     $345 = $32; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
     HEAP32[$345>>2] = $343; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
     $346 = $40; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
     $347 = ($346|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
     if (!($347)) {
      break;
     }
     $31 = $339; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
     $348 = $31; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
     $30 = $348; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $349 = $30; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
     $350 = $40; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
     $34 = $349; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
     $35 = $350; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
     $351 = $35; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
     $352 = ($351|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
     if ($352) {
      break;
     }
     __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($351); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
     __ZdlPv($351); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
     break;
    }
    $403 = $127; //@line 393 "haar.cpp"
    $404 = ($403|0)!=(0|0); //@line 393 "haar.cpp"
    if ($404) {
     $405 = $130; //@line 394 "haar.cpp"
     $406 = $127; //@line 394 "haar.cpp"
     HEAP32[$406>>2] = $405; //@line 394 "haar.cpp"
    }
    $407 = $128; //@line 396 "haar.cpp"
    $408 = ($407|0)!=(0|0); //@line 396 "haar.cpp"
    if ($408) {
     $409 = $133; //@line 397 "haar.cpp"
     $410 = $128; //@line 397 "haar.cpp"
     HEAP32[$410>>2] = $409; //@line 397 "haar.cpp"
    }
    $$expand_i1_val2 = 1; //@line 399 "haar.cpp"
    HEAP8[$146>>0] = $$expand_i1_val2; //@line 399 "haar.cpp"
    $$pre_trunc = HEAP8[$146>>0]|0; //@line 401 "haar.cpp"
    $411 = $$pre_trunc&1; //@line 401 "haar.cpp"
    if ($411) {
     __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($134); //@line 401 "haar.cpp"
     __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
     $427 = HEAP32[$126>>2]|0; //@line 401 "haar.cpp"
     STACKTOP = sp;return ($427|0); //@line 401 "haar.cpp"
    }
    $114 = $126; //@line 401 "haar.cpp"
    $412 = $114; //@line 401 "haar.cpp"
    $111 = $412; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $112 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $413 = $111; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
    $110 = $413; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $414 = $110; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $109 = $414; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $415 = $109; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $416 = HEAP32[$415>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $113 = $416; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
    $417 = $112; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $106 = $413; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $418 = $106; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $105 = $418; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    $419 = $105; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
    HEAP32[$419>>2] = $417; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
    $420 = $113; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    $421 = ($420|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
    if (!($421)) {
     __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($134); //@line 401 "haar.cpp"
     __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
     $427 = HEAP32[$126>>2]|0; //@line 401 "haar.cpp"
     STACKTOP = sp;return ($427|0); //@line 401 "haar.cpp"
    }
    $104 = $413; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $422 = $104; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $103 = $422; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $423 = $103; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
    $424 = $113; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $107 = $423; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $108 = $424; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
    $425 = $108; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    $426 = ($425|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    if ($426) {
     __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($134); //@line 401 "haar.cpp"
     __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
     $427 = HEAP32[$126>>2]|0; //@line 401 "haar.cpp"
     STACKTOP = sp;return ($427|0); //@line 401 "haar.cpp"
    }
    __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($425); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZdlPv($425); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($134); //@line 401 "haar.cpp"
    __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
    $427 = HEAP32[$126>>2]|0; //@line 401 "haar.cpp"
    STACKTOP = sp;return ($427|0); //@line 401 "haar.cpp"
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $220 = ___cxa_find_matching_catch_2()|0;
  $221 = tempRet0;
  $131 = $220; //@line 401 "haar.cpp"
  $132 = $221; //@line 401 "haar.cpp"
 }
 __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($134); //@line 401 "haar.cpp"
 __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($129); //@line 401 "haar.cpp"
 $428 = $131; //@line 401 "haar.cpp"
 $429 = $132; //@line 401 "haar.cpp"
 ___resumeException($428|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 36|0;
 $8 = sp + 24|0;
 $11 = $0;
 $12 = $1;
 $15 = $11;
 $10 = $15; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $10; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $16; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$16>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = ((($16)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$17>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = ((($16)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $18; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$8>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $7; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $8; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = HEAP32[$20>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $19; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$5>>2] = $21; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $4; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $22; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $5; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $24 = HEAP32[$23>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$22>>2] = $24; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $12; //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = ($25>>>0)>(0); //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($26)) {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $27 = $12; //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(118,($15|0),($27|0)); //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorINS1_IsNS_9allocatorIsEEEENS2_IS4_EEEENS2_IS6_EEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 }
 $30 = $12; //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(119,($15|0),($30|0)); //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorINS1_IsNS_9allocatorIsEEEENS2_IS4_EEEENS2_IS6_EEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2EjRKS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $11 = sp;
 $16 = sp + 141|0;
 $25 = sp + 140|0;
 $29 = sp + 44|0;
 $32 = sp + 32|0;
 $35 = $0;
 $36 = $1;
 $37 = $2;
 $40 = $35;
 $34 = $40; //@line 506 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $34; //@line 506 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $41; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$41>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = ((($41)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$42>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = ((($41)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $43; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$32>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $31; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $32; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $30; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $46 = HEAP32[$45>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $44; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$29>>2] = $46; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $47 = $28; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $47; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $26 = $29; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $48 = $26; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $49 = HEAP32[$48>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$47>>2] = $49; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $36; //@line 1100 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ($50>>>0)>(0); //@line 1100 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($51)) {
  STACKTOP = sp;return; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $52 = $36; //@line 1102 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(120,($40|0),($52|0)); //@line 1102 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $87 = ___cxa_find_matching_catch_2()|0;
  $88 = tempRet0;
  $38 = $87; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = $88; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($40); //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $89 = $38; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $90 = $39; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($89|0);
  // unreachable;
 }
 $55 = $36; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $37; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $40; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $55; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $56; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $21; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $57; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $20; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = ((($58)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $59; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $19; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $60; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $18; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $61; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($25,$57,1); //@line 1004 "/usr/lib/emscripten/system/include/libcxx/vector"
  $62 = $24; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = ((($57)) + 4|0); //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $64 = HEAP32[$63>>2]|0; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $17 = $64; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $65 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $23; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $62; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $65; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $15 = $66; //@line 1005 "/usr/lib/emscripten/system/include/libcxx/vector"
  $67 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = $15; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $69; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $12; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$11>>0]=HEAP8[$16>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $67; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $68; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $70; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $72 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $73 = $10; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $73; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $74 = $7; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $4 = $71; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $72; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $74; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $75 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $76 = $6; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $76; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $77 = $3; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  __THREW__ = 0;
  invoke_vii(96,($75|0),($77|0)); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   label = 6;
   break;
  }
  $80 = ((($57)) + 4|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
  $81 = HEAP32[$80>>2]|0; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
  $82 = ((($81)) + 12|0); //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$80>>2] = $82; //@line 1006 "/usr/lib/emscripten/system/include/libcxx/vector"
  $83 = $22; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $84 = (($83) + -1)|0; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
  $22 = $84; //@line 1007 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($25); //@line 1008 "/usr/lib/emscripten/system/include/libcxx/vector"
  $85 = $22; //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
  $86 = ($85>>>0)>(0); //@line 1009 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($86)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 6) {
  $87 = ___cxa_find_matching_catch_2()|0;
  $88 = tempRet0;
  $38 = $87; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = $88; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($40); //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $89 = $38; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  $90 = $39; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($89|0);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return; //@line 1105 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $7 = sp + 32|0;
 $10 = sp + 325|0;
 $26 = sp + 24|0;
 $29 = sp + 324|0;
 $41 = sp + 16|0;
 $44 = sp + 323|0;
 $51 = sp + 8|0;
 $54 = sp + 322|0;
 $62 = sp + 112|0;
 $65 = sp + 100|0;
 $74 = sp;
 $77 = sp + 321|0;
 $82 = sp + 40|0;
 $78 = $0;
 $79 = $1;
 $80 = $2;
 $85 = $78;
 $86 = $79; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $87 = $80; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = $86; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $87; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $88 = $75; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $89 = $76; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 ;HEAP8[$74>>0]=HEAP8[$77>>0]|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $72 = $88; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $73 = $89; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $90 = $73; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $91 = $72; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $92 = $90; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $93 = $91; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $94 = (($92) - ($93))|0; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $95 = (($94|0) / 12)&-1; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $81 = $95; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $96 = $81; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = $85; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = $71; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $97; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $70; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $98; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = $69; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = ((($99)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $100; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = $68; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $101; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $102 = $67; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $103 = HEAP32[$102>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = HEAP32[$98>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $103; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $104; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = (($105) - ($106))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = (($107|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = ($96>>>0)<=($108>>>0); //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($109)) {
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE10deallocateEv($85); //@line 1410 "/usr/lib/emscripten/system/include/libcxx/vector"
  $213 = $81; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $61 = $85; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$62>>2] = $213; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $214 = $61; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $215 = (__ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8max_sizeEv($214)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = $215; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
  $216 = HEAP32[$62>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  $217 = $63; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  $218 = ($216>>>0)>($217>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($218) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($214); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
   // unreachable;
  }
  $59 = $214; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $219 = $59; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = $219; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
  $220 = $58; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $220; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $221 = $57; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $222 = ((($221)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = $222; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $223 = $56; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = $223; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $224 = $55; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $225 = HEAP32[$224>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $226 = HEAP32[$220>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $227 = $225; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $228 = $226; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $229 = (($227) - ($228))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $230 = (($229|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $64 = $230; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $231 = $64; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $232 = $63; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $233 = (($232>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $234 = ($231>>>0)>=($233>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($234) {
   $235 = $63; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
   $60 = $235; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $236 = $64; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $237 = $236<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$65>>2] = $237; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $52 = $65; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $53 = $62; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $238 = $52; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $239 = $53; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   ;HEAP8[$51>>0]=HEAP8[$54>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $49 = $238; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $50 = $239; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $240 = $49; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $241 = $50; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $46 = $51; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $47 = $240; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $48 = $241; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $242 = $47; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $243 = HEAP32[$242>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $244 = $48; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $245 = HEAP32[$244>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $246 = ($243>>>0)<($245>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $247 = $50; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $248 = $49; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $249 = $246 ? $247 : $248; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $250 = HEAP32[$249>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $60 = $250; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  }
  $251 = $60; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8allocateEj($85,$251); //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $252 = $79; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $253 = $80; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $254 = $81; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($85,$252,$253,$254); //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $110 = $80; //@line 1394 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$82>>2] = $110; //@line 1394 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = 0; //@line 1395 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = $81; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $85; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $66; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = ((($112)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = HEAP32[$113>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = HEAP32[$112>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $114; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $117 = $115; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $118 = (($116) - ($117))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $119 = (($118|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $120 = ($111>>>0)>($119>>>0); //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($120) {
  $83 = 1; //@line 1398 "/usr/lib/emscripten/system/include/libcxx/vector"
  $121 = $79; //@line 1399 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$82>>2] = $121; //@line 1399 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = $85; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $122 = $45; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $123 = ((($122)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $124 = HEAP32[$123>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $125 = HEAP32[$122>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $126 = $124; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $127 = $125; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $128 = (($126) - ($127))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $129 = (($128|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = $82; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $129; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $130 = $42; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $131 = $43; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  ;HEAP8[$41>>0]=HEAP8[$44>>0]|0; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $39 = $130; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $40 = $131; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $132 = $40; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $133 = $39; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $134 = HEAP32[$133>>2]|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $135 = (($134) + (($132*12)|0)|0); //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$133>>2] = $135; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 $136 = $79; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $137 = HEAP32[$82>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $138 = HEAP32[$85>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $136; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $137; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $138; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $139 = $36; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = $139; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $140 = $35; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $141 = $37; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $23 = $141; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $142 = $23; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $143 = $38; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $22 = $143; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $144 = $22; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $32 = $140; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = $142; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = $144; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 while(1) {
  $145 = $32; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $146 = $33; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $147 = ($145|0)!=($146|0); //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $148 = $34; //@line 1740 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  if (!($147)) {
   break;
  }
  $149 = $32; //@line 1740 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $30 = $148; //@line 1740 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $31 = $149; //@line 1740 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $150 = $30; //@line 1740 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $151 = $31; //@line 1353 "/usr/lib/emscripten/system/include/libcxx/vector"
  $152 = ($150|0)!=($151|0); //@line 1353 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($152) {
   $153 = $31; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $27 = $150; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $28 = $153; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $154 = $27; //@line 1355 "/usr/lib/emscripten/system/include/libcxx/vector"
   $155 = $28; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   ;HEAP8[$26>>0]=HEAP8[$29>>0]|0; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $24 = $154; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $25 = $155; //@line 379 "/usr/lib/emscripten/system/include/libcxx/vector"
   $156 = $31; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $157 = HEAP32[$156>>2]|0; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $158 = $31; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $159 = ((($158)) + 4|0); //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   $160 = HEAP32[$159>>2]|0; //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
   __ZNSt3__26vectorIsNS_9allocatorIsEEE6assignIPsEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($150,$157,$160); //@line 1356 "/usr/lib/emscripten/system/include/libcxx/vector"
  }
  $161 = $32; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $162 = ((($161)) + 12|0); //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $32 = $162; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $163 = $34; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $164 = ((($163)) + 12|0); //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $34 = $164; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 }
 $84 = $148; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $165 = $83; //@line 1403 "/usr/lib/emscripten/system/include/libcxx/vector"
 $166 = $165&1; //@line 1403 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($166) {
  $167 = HEAP32[$82>>2]|0; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $168 = $80; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $169 = $81; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $85; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $170 = $21; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $171 = ((($170)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $172 = HEAP32[$171>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $173 = HEAP32[$170>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $174 = $172; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $175 = $173; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $176 = (($174) - ($175))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $177 = (($176|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $178 = (($169) - ($177))|0; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($85,$167,$168,$178); //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $179 = $84; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $85; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $179; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $180 = $18; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $180; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $181 = $17; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $182 = ((($181)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $183 = HEAP32[$182>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $184 = HEAP32[$181>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $185 = $183; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $186 = $184; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $187 = (($185) - ($186))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $188 = (($187|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $188; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $189 = $19; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $180; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $189; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $190 = $15; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $191 = $16; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $192 = ((($190)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $193 = HEAP32[$192>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $194 = ($191|0)!=($193|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($194)) {
   break;
  }
  $14 = $190; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $195 = $14; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $196 = ((($195)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $196; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $197 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $197; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $198 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $199 = ((($190)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $200 = HEAP32[$199>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $201 = ((($200)) + -12|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$199>>2] = $201; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $11 = $201; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $202 = $11; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $198; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $9 = $202; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $203 = $8; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $204 = $9; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $203; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $204; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $205 = $5; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $206 = $6; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $205; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $206; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $207 = $4; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($207); //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $208 = $20; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(121,($180|0),($208|0)); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 $209 = __THREW__; __THREW__ = 0;
 $210 = $209&1;
 if ($210) {
  $211 = ___cxa_find_matching_catch_3(0|0)|0;
  $212 = tempRet0;
  ___clang_call_terminate($211); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $42; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ((($50)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $51; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $40; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $53; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $39; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) - ($59))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = (($60) + 1)|0; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$35>>2] = $61; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $34; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($62)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $63; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = HEAP32[$35>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = $36; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = ($64>>>0)>($65>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($66) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($62); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $32 = $62; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $32; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $67; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $31; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $68; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = ((($69)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $70; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = $29; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $71; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $28; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = HEAP32[$72>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $74 = HEAP32[$68>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = $73; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $74; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = (($75) - ($76))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $77; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = $37; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = $36; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = (($79>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = ($78>>>0)>=($80>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($81) {
  $82 = $36; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $82; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $83 = $37; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $84 = $83<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$38>>2] = $84; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $38; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $35; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $85 = $25; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $86 = $26; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $22 = $85; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $23 = $86; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $87 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $19 = $24; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $20 = $87; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $21 = $88; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $89 = $20; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $90 = HEAP32[$89>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $91 = $21; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $92 = HEAP32[$91>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $93 = ($90>>>0)<($92>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $94 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $95 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $96 = $93 ? $94 : $95; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $97 = HEAP32[$96>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $97; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $98 = $33; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = $18; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = ((($99)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = HEAP32[$100>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = HEAP32[$99>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = $101; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = $102; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = (($103) - ($104))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $45; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($46,$98,$105,$106); //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = $45; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = ((($46)) + 8|0); //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = HEAP32[$108>>2]|0; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $109; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $111 = $44; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $111; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $107; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $110; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $112; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $114 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $115 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $115; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $116 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $113; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $114; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $116; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $119; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $117; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $118; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $120; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $122; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $124 = HEAP8[$123>>0]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP8[$121>>0] = $124; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = ((($46)) + 8|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $126 = HEAP32[$125>>2]|0; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $127 = ((($126)) + 1|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$125>>2] = $127; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(45,($49|0),($46|0)); //@line 1577 "/usr/lib/emscripten/system/include/libcxx/vector"
 $128 = __THREW__; __THREW__ = 0;
 $129 = $128&1;
 if ($129) {
  $130 = ___cxa_find_matching_catch_2()|0;
  $131 = tempRet0;
  $47 = $130; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $131; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $132 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $133 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($132|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_6vectorINS1_IsNS_9allocatorIsEEEENS2_IS4_EEEENS2_IS6_EEED2Ev($2); //@line 1252 "/usr/lib/emscripten/system/include/libcxx/iterator"
 STACKTOP = sp;return; //@line 1252 "/usr/lib/emscripten/system/include/libcxx/iterator"
}
function __ZNSt3__213__vector_baseINS_6vectorINS1_IsNS_9allocatorIsEEEENS2_IS4_EEEENS2_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0; //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = ($32|0)!=(0|0); //@line 450 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($33)) {
  STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $29 = $31; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $29; //@line 452 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = HEAP32[$34>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $34; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $35; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $27; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $37 = $28; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = ((($36)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = HEAP32[$38>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = ($37|0)!=($39|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($40)) {
   break;
  }
  $26 = $36; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $26; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ((($41)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $42; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $25; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $24 = $43; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $24; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = ((($36)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = HEAP32[$45>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $47 = ((($46)) + -12|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$45>>2] = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $47; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $23; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $44; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $48; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $20; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $21; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $49; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $50; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $17; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $18; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $51; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $52; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $16; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEED2Ev($53); //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $14 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $14; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $55; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $56; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $57 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $58 = HEAP32[$31>>2]|0; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $31; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $4; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $59; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $3; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = ((($60)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $61; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $2; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $62; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = HEAP32[$63>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$59>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $64; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $65; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = (($66) - ($67))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = (($68|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $57; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $58; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $69; //@line 453 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $9; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $71 = $10; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $11; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $70; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $71; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $72; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $7; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $73; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $5; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($74); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE6assignIPsEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $8 = sp + 24|0;
 $11 = sp + 296|0;
 $34 = sp + 16|0;
 $37 = sp + 295|0;
 $44 = sp + 8|0;
 $47 = sp + 294|0;
 $55 = sp + 104|0;
 $58 = sp + 92|0;
 $67 = sp;
 $70 = sp + 293|0;
 $75 = sp + 32|0;
 $71 = $0;
 $72 = $1;
 $73 = $2;
 $78 = $71;
 $79 = $72; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $73; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $79; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $80; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $68; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $82 = $69; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 ;HEAP8[$67>>0]=HEAP8[$70>>0]|0; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $65 = $81; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $66 = $82; //@line 519 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $83 = $66; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $84 = $65; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $85 = $83; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $86 = $84; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $87 = (($85) - ($86))|0; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $88 = (($87|0) / 2)&-1; //@line 511 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $74 = $88; //@line 1391 "/usr/lib/emscripten/system/include/libcxx/vector"
 $89 = $74; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = $78; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = $64; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $90; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = $63; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = $91; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = $62; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $93 = ((($92)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = $93; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $94 = $61; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $94; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $60; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = HEAP32[$95>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = HEAP32[$91>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $96; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = $97; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = (($98) - ($99))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = (($100|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = ($89>>>0)<=($101>>>0); //@line 1392 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($102)) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE10deallocateEv($78); //@line 1410 "/usr/lib/emscripten/system/include/libcxx/vector"
  $200 = $74; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = $78; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$55>>2] = $200; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $201 = $54; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $202 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($201)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = $202; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
  $203 = HEAP32[$55>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  $204 = $56; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  $205 = ($203>>>0)>($204>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($205) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($201); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
   // unreachable;
  }
  $52 = $201; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $206 = $52; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $51 = $206; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
  $207 = $51; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
  $50 = $207; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $208 = $50; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $209 = ((($208)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $49 = $209; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $210 = $49; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $210; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $211 = $48; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $212 = HEAP32[$211>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $213 = HEAP32[$207>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $214 = $212; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $215 = $213; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $216 = (($214) - ($215))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $217 = (($216|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $217; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
  $218 = $57; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $219 = $56; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $220 = (($219>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  $221 = ($218>>>0)>=($220>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
  if ($221) {
   $222 = $56; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
   $53 = $222; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  } else {
   $223 = $57; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $224 = $223<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   HEAP32[$58>>2] = $224; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $45 = $58; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $46 = $55; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $225 = $45; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $226 = $46; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   ;HEAP8[$44>>0]=HEAP8[$47>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $42 = $225; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $43 = $226; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $227 = $42; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $228 = $43; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $39 = $44; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $40 = $227; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $41 = $228; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $229 = $40; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $230 = HEAP32[$229>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $231 = $41; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $232 = HEAP32[$231>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $233 = ($230>>>0)<($232>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $234 = $43; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $235 = $42; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $236 = $233 ? $234 : $235; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $237 = HEAP32[$236>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
   $53 = $237; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  }
  $238 = $53; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($78,$238); //@line 1411 "/usr/lib/emscripten/system/include/libcxx/vector"
  $239 = $72; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $240 = $73; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $241 = $74; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($78,$239,$240,$241); //@line 1412 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $103 = $73; //@line 1394 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$75>>2] = $103; //@line 1394 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = 0; //@line 1395 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = $74; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $78; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $59; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = ((($105)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = HEAP32[$106>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = HEAP32[$105>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $107; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $108; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = (($109) - ($110))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = (($111|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = ($104>>>0)>($112>>>0); //@line 1396 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($113) {
  $76 = 1; //@line 1398 "/usr/lib/emscripten/system/include/libcxx/vector"
  $114 = $72; //@line 1399 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$75>>2] = $114; //@line 1399 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $78; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $115 = $38; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $116 = ((($115)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $117 = HEAP32[$116>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $118 = HEAP32[$115>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $119 = $117; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $120 = $118; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $121 = (($119) - ($120))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $122 = (($121|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $75; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $122; //@line 1400 "/usr/lib/emscripten/system/include/libcxx/vector"
  $123 = $35; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $124 = $36; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  ;HEAP8[$34>>0]=HEAP8[$37>>0]|0; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $32 = $123; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $33 = $124; //@line 492 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $125 = $33; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $126 = $32; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $127 = HEAP32[$126>>2]|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $128 = (($127) + ($125<<1)|0); //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$126>>2] = $128; //@line 484 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 $129 = $72; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $130 = HEAP32[$75>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $131 = HEAP32[$78>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $129; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $130; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $131; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $132 = $29; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $28 = $132; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $133 = $28; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $134 = $30; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $22 = $134; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $135 = $22; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $136 = $31; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $23 = $136; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $137 = $23; //@line 1703 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $24 = $133; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $25 = $135; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $26 = $137; //@line 1765 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $138 = $25; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $139 = $24; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $140 = $138; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $141 = $139; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $142 = (($140) - ($141))|0; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $143 = (($142|0) / 2)&-1; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $27 = $143; //@line 1754 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $144 = $27; //@line 1755 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $145 = ($144>>>0)>(0); //@line 1755 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 if ($145) {
  $146 = $26; //@line 1756 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $147 = $24; //@line 1756 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $148 = $27; //@line 1756 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $149 = $148<<1; //@line 1756 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  _memmove(($146|0),($147|0),($149|0))|0; //@line 1756 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 }
 $150 = $26; //@line 1757 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $151 = $27; //@line 1757 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $152 = (($150) + ($151<<1)|0); //@line 1757 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $77 = $152; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/vector"
 $153 = $76; //@line 1403 "/usr/lib/emscripten/system/include/libcxx/vector"
 $154 = $153&1; //@line 1403 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($154) {
  $155 = HEAP32[$75>>2]|0; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $156 = $73; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $157 = $74; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $3 = $78; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $158 = $3; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  $159 = ((($158)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $160 = HEAP32[$159>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $161 = HEAP32[$158>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $162 = $160; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $163 = $161; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $164 = (($162) - ($163))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $165 = (($164|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
  $166 = (($157) - ($165))|0; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($78,$155,$156,$166); //@line 1404 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $167 = $77; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $78; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $167; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $168 = $19; //@line 1406 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $168; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $169 = $18; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $170 = ((($169)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $171 = HEAP32[$170>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $172 = HEAP32[$169>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $173 = $171; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $174 = $172; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $175 = (($173) - ($174))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $176 = (($175|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $176; //@line 812 "/usr/lib/emscripten/system/include/libcxx/vector"
 $177 = $20; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $168; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $177; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 $178 = $16; //@line 813 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $179 = $17; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $180 = ((($178)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $181 = HEAP32[$180>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $182 = ($179|0)!=($181|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($182)) {
   break;
  }
  $15 = $178; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $183 = $15; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $184 = ((($183)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $184; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $185 = $14; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $185; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $186 = $13; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $187 = ((($178)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $188 = HEAP32[$187>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $189 = ((($188)) + -2|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$187>>2] = $189; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $12 = $189; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $190 = $12; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $186; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $10 = $190; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $191 = $9; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $192 = $10; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$8>>0]=HEAP8[$11>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $191; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $192; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $193 = $6; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $194 = $7; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $193; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $194; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $195 = $21; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(80,($168|0),($195|0)); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 $196 = __THREW__; __THREW__ = 0;
 $197 = $196&1;
 if ($197) {
  $198 = ___cxa_find_matching_catch_3(0|0)|0;
  $199 = tempRet0;
  ___clang_call_terminate($198); //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 814 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  STACKTOP = sp;return; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = sp;
 $17 = sp + 105|0;
 $31 = sp + 104|0;
 $26 = $0;
 $27 = $1;
 $28 = $2;
 $29 = $3;
 $32 = $26;
 $25 = $32; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $25; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ((($33)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $34; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $24; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $35; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $36 = $23; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $36; //@line 1021 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $29; //@line 1022 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($31,$32,$37); //@line 1022 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $30; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $27; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $28; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = ((($32)) + 4|0); //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $38; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = $39; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $40; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $41; //@line 1023 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $42 = $20; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $21; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = ($42|0)!=($43|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($44)) {
   break;
  }
  $45 = $19; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $22; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = HEAP32[$46>>2]|0; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $47; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $48 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $20; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $45; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $48; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $49; //@line 1586 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $15; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $16; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $52; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $13; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $50; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $51; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $53; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $54 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $55 = $10; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $56 = $11; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $56; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $8; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $5 = $54; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $55; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $57; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $6; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $7; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $59; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $60 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($58,$60); //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $20; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = ((($61)) + 12|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $62; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $22; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = HEAP32[$63>>2]|0; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = ((($64)) + 12|0); //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$63>>2] = $65; //@line 1585 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($31); //@line 1024 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 1025 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $15 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $15; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = HEAP32[$19>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $20; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $13; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = HEAP32[$22>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $12; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $18; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $6; //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $25; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $26; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = ((($27)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $28; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $29; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $31 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = HEAP32[$26>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $31; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $32; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = (($33) - ($34))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = (($35|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = (($24) + (($36*12)|0)|0); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $8; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = HEAP32[$38>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $39; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $41 = $17; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = (($40) + (($41*12)|0)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $10; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = HEAP32[$43>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $44; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $9; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $18; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $11; //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($46)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = HEAP32[$47>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = HEAP32[$46>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $48; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $49; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = (($50) - ($51))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = (($52|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($45) + (($53*12)|0)|0); //@line 859 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($18,$21,$37,$42,$54); //@line 858 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 860 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $24 = sp;
 $27 = sp + 148|0;
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0; //@line 940 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = ($40|0)!=(0|0); //@line 940 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($41)) {
  STACKTOP = sp;return; //@line 946 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $36 = $39; //@line 942 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $36; //@line 942 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $42; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $35; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ((($43)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$43>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $45; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($47) - ($48))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($49|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $50; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $42; //@line 739 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $34; //@line 739 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$51>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $51; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $52; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $32; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $54 = $33; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = ((($53)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = HEAP32[$55>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = ($54|0)!=($56|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($57)) {
   break;
  }
  $31 = $53; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = $31; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = ((($58)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $59; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $30; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $29 = $60; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $29; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = ((($53)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = HEAP32[$62>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $64 = ((($63)) + -12|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$62>>2] = $64; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $28 = $64; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $65 = $28; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $25 = $61; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $65; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $66 = $25; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = $26; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $22 = $66; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = $67; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $22; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = $23; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $68; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $21 = $69; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $21; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($70); //@line 1803 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $71 = $37; //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(121,($42|0),($71|0)); //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = __THREW__; __THREW__ = 0;
 $73 = $72&1;
 if ($73) {
  $74 = ___cxa_find_matching_catch_3(0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74); //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $19 = $42; //@line 741 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $39; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $18; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = ((($76)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $77; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = $17; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $78; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $79 = $16; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $80 = HEAP32[$39>>2]|0; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $39; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $15; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $81; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = $14; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $82; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = $13; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $84 = ((($83)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $84; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $85 = $12; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $85; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $86 = $11; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $87 = HEAP32[$86>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $88 = HEAP32[$82>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $89 = $87; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = $88; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = (($89) - ($90))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = (($91|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $79; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $80; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $92; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $93 = $8; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $9; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $10; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $93; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $94; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $95; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = $6; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $96; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $97 = $4; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($97); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 $3 = $39; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = $3; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = ((($98)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $99; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $100 = $2; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $1 = $100; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $101 = $1; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$101>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = ((($39)) + 4|0); //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$102>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$39>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 946 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16; //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = (__ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8max_sizeEv($17)|0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ($18>>>0)>($19>>>0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17); //@line 930 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $14 = $17; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = ((($21)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $22; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $16; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $24; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $25; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $10; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $26; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $27; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $7; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $8; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $28; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = ($29>>>0)>(357913941); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt9bad_allocC2Ev($31); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  ___cxa_throw(($31|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
 } else {
  $32 = $8; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $33 = ($32*12)|0; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $33; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $34 = $5; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $35 = (__Znwj($34)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $36 = ((($17)) + 4|0); //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$36>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$17>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = HEAP32[$17>>2]|0; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $16; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = (($37) + (($38*12)|0)|0); //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $4 = $17; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = $4; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = ((($40)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $3 = $41; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = $3; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $2 = $42; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $2; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$43>>2] = $39; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE14__annotate_newEj($17,0); //@line 933 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 934 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $24 = sp;
 $27 = sp + 148|0;
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0; //@line 940 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = ($40|0)!=(0|0); //@line 940 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($41)) {
  STACKTOP = sp;return; //@line 946 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $36 = $39; //@line 942 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $36; //@line 942 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $42; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = $35; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = ((($43)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = HEAP32[$44>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = HEAP32[$43>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $45; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $46; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = (($47) - ($48))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = (($49|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $50; //@line 738 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $42; //@line 739 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = $34; //@line 739 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$51>>2]|0; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = $51; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $52; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $32; //@line 369 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $54 = $33; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = ((($53)) + 4|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = HEAP32[$55>>2]|0; //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = ($54|0)!=($56|0); //@line 424 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($57)) {
   break;
  }
  $31 = $53; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = $31; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $59 = ((($58)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $59; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $60 = $30; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
  $29 = $60; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $29; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = ((($53)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $63 = HEAP32[$62>>2]|0; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $64 = ((($63)) + -2|0); //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$62>>2] = $64; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $28 = $64; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $65 = $28; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $25 = $61; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $65; //@line 425 "/usr/lib/emscripten/system/include/libcxx/vector"
  $66 = $25; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = $26; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $22 = $66; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = $67; //@line 1536 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $22; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = $23; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $68; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
  $21 = $69; //@line 1668 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $70 = $37; //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(80,($42|0),($70|0)); //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch_3(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73); //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 740 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $19 = $42; //@line 741 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $39; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = $18; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = ((($75)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $76; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $17; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $77; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $78 = $16; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $79 = HEAP32[$39>>2]|0; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $39; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $15; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $80; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $14; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $81; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = $13; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ((($82)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $83; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $84 = $12; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $84; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $85 = $11; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $86 = HEAP32[$85>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $87 = HEAP32[$81>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $88 = $86; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $89 = $87; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $90 = (($88) - ($89))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $91 = (($90|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $78; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $79; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $91; //@line 943 "/usr/lib/emscripten/system/include/libcxx/vector"
 $92 = $5; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $93 = $6; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $7; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $92; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $93; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $94; //@line 1496 "/usr/lib/emscripten/system/include/libcxx/memory"
 $95 = $3; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $95; //@line 1739 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = $1; //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($96); //@line 176 "/usr/lib/emscripten/system/include/libcxx/new"
 $10 = $39; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $97 = $10; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $98 = ((($97)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $98; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $99 = $9; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $99; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $100 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$100>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = ((($39)) + 4|0); //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$101>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$39>>2] = 0; //@line 944 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 946 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16; //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = (__ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE8max_sizeEv($17)|0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 $20 = ($18>>>0)>($19>>>0); //@line 929 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17); //@line 930 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $14 = $17; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $14; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = ((($21)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $22; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $13; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $23; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $16; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $24; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $25; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $10; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $26; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $27; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = 0; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $7; //@line 1488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $29 = $8; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $28; //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = ($29>>>0)>(357913941); //@line 1730 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZNSt9bad_allocC2Ev($31); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  ___cxa_throw(($31|0),(424|0),(21|0)); //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
  // unreachable; //@line 1732 "/usr/lib/emscripten/system/include/libcxx/memory"
 } else {
  $32 = $8; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $33 = ($32*12)|0; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $33; //@line 1736 "/usr/lib/emscripten/system/include/libcxx/memory"
  $34 = $5; //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $35 = (__Znwj($34)|0); //@line 168 "/usr/lib/emscripten/system/include/libcxx/new"
  $36 = ((($17)) + 4|0); //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$36>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$17>>2] = $35; //@line 931 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = HEAP32[$17>>2]|0; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $16; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $39 = (($37) + (($38*12)|0)|0); //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $4 = $17; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $40 = $4; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = ((($40)) + 8|0); //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $3 = $41; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = $3; //@line 357 "/usr/lib/emscripten/system/include/libcxx/vector"
  $2 = $42; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $2; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$43>>2] = $39; //@line 932 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE14__annotate_newEj($17,0); //@line 933 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 934 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 80|0;
 $8 = sp + 68|0;
 $16 = sp;
 $19 = sp + 97|0;
 $27 = sp + 96|0;
 $24 = $0;
 $25 = $1;
 $28 = $24;
 $23 = $28; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $23; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = ((($29)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $30; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $22; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $31; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $21; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $26 = $32; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($27,$28,1); //@line 982 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $26; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $34 = ((($28)) + 4|0); //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = HEAP32[$34>>2]|0; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $20 = $35; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $20; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $33; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $36; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = $17; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $18; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$16>>0]=HEAP8[$19>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $37; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $38; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $14; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $15; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $39; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $40; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $13; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $41; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $11; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $42; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $10; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $9 = $43; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$43>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = ((($43)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$44>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = ((($43)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $7 = $45; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$8>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $7; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $6 = $8; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $48 = HEAP32[$47>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $46; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$5>>2] = $48; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $4; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $49; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $5; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $51 = HEAP32[$50>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$49>>2] = $51; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($28)) + 4|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $53 = HEAP32[$52>>2]|0; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = ((($53)) + 12|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$52>>2] = $54; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = $25; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = (($55) + -1)|0; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $56; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE24__RAII_IncreaseAnnotator6__doneEv($27); //@line 986 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $25; //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = ($57>>>0)>(0); //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($58)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 988 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return; //@line 880 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 881 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $17; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = ((($22)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $16; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $24; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $15; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $25; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $13; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $26; //@line 1540 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $11; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $27; //@line 1678 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$19>>2] = 357913941; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = (4294967295 / 2)&-1; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = $28; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $19; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $20; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $7; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $30 = $8; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $4 = $29; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $5 = $30; //@line 2580 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $31 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $32 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $1 = $6; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $2 = $31; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $3 = $32; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = $2; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = HEAP32[$33>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = $3; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $36 = HEAP32[$35>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $37 = ($34>>>0)<($36>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $38 = $5; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $39 = $4; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $40 = $37 ? $38 : $39; //@line 2572 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $41 = HEAP32[$40>>2]|0; //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($41|0); //@line 952 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $19; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = HEAP32[$23>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $24; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $18; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = $17; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = HEAP32[$26>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $16; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $22; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $6; //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $5 = $29; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $5; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $4; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $32 = ((($31)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $3 = $32; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $3; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $33; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $2; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = HEAP32[$34>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = HEAP32[$30>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $35; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $36; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = (($37) - ($38))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = (($39|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = (($28) + (($40*12)|0)|0); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 $8 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $42 = $8; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $43 = HEAP32[$42>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $43; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $44 = $7; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $45 = $13; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $12 = $45; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = $12; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $11 = $46; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = $11; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = ((($47)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $48; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = $10; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $49; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $9; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $51 = HEAP32[$50>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = HEAP32[$46>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $52; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($53) - ($54))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = (($55|0) / 12)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = (($44) + (($56*12)|0)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $15 = $22; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $15; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = HEAP32[$58>>2]|0; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $59; //@line 682 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = $14; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $21; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($60) + (($61*12)|0)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($22,$25,$41,$57,$62); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 845 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNKSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return; //@line 839 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEJjjRNS4_IhNS5_IhEEEEEE6invokeEPFSA_jjSD_EjjPSC_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $32 = sp + 8|0;
 $28 = $0;
 $29 = $1;
 $30 = $2;
 $31 = $3;
 $35 = $28; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $36 = $29; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $37 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($36)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $38 = $30; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $39 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($38)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $40 = $31; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $41 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_($40)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $42 = (FUNCTION_TABLE_iiii[$35 & 127]($37,$39,$41)|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$32>>2] = $42; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __THREW__ = 0;
 $43 = (invoke_ii(122,($32|0))|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $61 = ___cxa_find_matching_catch_2()|0;
  $62 = tempRet0;
  $33 = $61; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $34 = $62; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $32; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $63 = $15; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = $63; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $12; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $64; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = $11; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $65; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $10; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = HEAP32[$66>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $67; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $13; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $64; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = $7; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $69; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $6; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$70>>2] = $68; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $14; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $72 = ($71|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($72)) {
   $78 = $33; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $79 = $34; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   ___resumeException($78|0);
   // unreachable;
  }
  $5 = $64; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $73 = $5; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $73; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $74 = $4; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $75 = $14; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $74; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $75; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $76 = $9; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $77 = ($76|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($77) {
   $78 = $33; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $79 = $34; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   ___resumeException($78|0);
   // unreachable;
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($76); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($76); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $78 = $33; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $79 = $34; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($78|0);
  // unreachable;
 } else {
  $27 = $32; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $46 = $27; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $24 = $46; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $25 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $24; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = $47; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $48 = $23; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $22 = $48; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $22; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = HEAP32[$49>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $26 = $50; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $25; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $19 = $47; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = $19; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $52; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $18; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$53>>2] = $51; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $54 = $26; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $55 = ($54|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($55)) {
   STACKTOP = sp;return ($43|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  }
  $17 = $47; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $56 = $17; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $56; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $16; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $26; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $57; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $21 = $58; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $21; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $60 = ($59|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($60) {
   STACKTOP = sp;return ($43|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  }
  __ZNSt3__26vectorIsNS_9allocatorIsEEED2Ev($59); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($59); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  STACKTOP = sp;return ($43|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIsNS4_9allocatorIsEEEENS4_14default_deleteIS9_EEEEjjRNS6_IhNS7_IhEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIsNS4_9allocatorIsEEEENS4_14default_deleteIS9_EEEEjjRNS6_IhNS7_IhEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIsNS3_9allocatorIsEEEENS3_14default_deleteIS8_EEEEjjRNS5_IhNS6_IhEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIsNS3_9allocatorIsEEEENS3_14default_deleteIS8_EEEEjjRNS5_IhNS6_IhEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (840|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEE10toWireTypeESA_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0; //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $7 = $5; //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $7; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $4; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $3; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = HEAP32[$9>>2]|0; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $10; //@line 2741 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $7; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $2; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $11; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = $1; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$12>>2] = 0; //@line 2742 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $6; //@line 2743 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIsNS2_9allocatorIsEEEEE10toWireTypeES7_($13)|0); //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($14|0); //@line 350 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 36|0;
 $8 = sp + 24|0;
 $11 = $0;
 $12 = $1;
 $15 = $11;
 $10 = $15; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $10; //@line 502 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $16; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$16>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = ((($16)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$17>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = ((($16)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $18; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$8>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $19 = $7; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
 $6 = $8; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = HEAP32[$20>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $19; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$5>>2] = $21; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $4; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $22; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $5; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $24 = HEAP32[$23>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$22>>2] = $24; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $25 = $12; //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 $26 = ($25>>>0)>(0); //@line 1071 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($26)) {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $27 = $12; //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(120,($15|0),($27|0)); //@line 1073 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 }
 $30 = $12; //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(123,($15|0),($30|0)); //@line 1074 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $13 = $33; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $34; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($15); //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = $13; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $14; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1076 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = $42; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = ((($50)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $51; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $41; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = $52; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $53 = $40; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $53; //@line 1572 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = $39; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ((($54)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = HEAP32[$55>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = HEAP32[$54>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $56; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = $57; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $60 = (($58) - ($59))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $61 = (($60|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = (($61) + 1)|0; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$35>>2] = $62; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $34; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($63)|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $64; //@line 961 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$35>>2]|0; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $36; //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = ($65>>>0)>($66>>>0); //@line 962 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63); //@line 963 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable;
 }
 $32 = $63; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = $32; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $68; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $31; //@line 643 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $69; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $30; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = ((($70)) + 8|0); //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $71; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = $29; //@line 360 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $72; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $28; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = HEAP32[$73>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $75 = HEAP32[$69>>2]|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $76 = $74; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $77 = $75; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $78 = (($76) - ($77))|0; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $79 = (($78|0) / 2)&-1; //@line 372 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $79; //@line 964 "/usr/lib/emscripten/system/include/libcxx/vector"
 $80 = $37; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $81 = $36; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = (($81>>>0) / 2)&-1; //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ($80>>>0)>=($82>>>0); //@line 965 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($83) {
  $84 = $36; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $84; //@line 966 "/usr/lib/emscripten/system/include/libcxx/vector"
 } else {
  $85 = $37; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $86 = $85<<1; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$38>>2] = $86; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $38; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $35; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $87 = $25; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $88 = $26; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $22 = $87; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $23 = $88; //@line 2645 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $89 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $90 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $19 = $24; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $20 = $89; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $21 = $90; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $91 = $20; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $92 = HEAP32[$91>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $93 = $21; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $94 = HEAP32[$93>>2]|0; //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $95 = ($92>>>0)<($94>>>0); //@line 708 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $96 = $23; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $97 = $22; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $98 = $95 ? $96 : $97; //@line 2637 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $99 = HEAP32[$98>>2]|0; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $99; //@line 967 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $100 = $33; //@line 968 "/usr/lib/emscripten/system/include/libcxx/vector"
 $18 = $49; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $101 = $18; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $102 = ((($101)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = HEAP32[$102>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = HEAP32[$101>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $103; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $106 = $104; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = (($105) - ($106))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $108 = (($107|0) / 2)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $109 = $45; //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($46,$100,$108,$109); //@line 1573 "/usr/lib/emscripten/system/include/libcxx/vector"
 $110 = $45; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = ((($46)) + 8|0); //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = HEAP32[$111>>2]|0; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $17 = $112; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $17; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
 $114 = $44; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $114; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $115 = $16; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $110; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $113; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $115; //@line 1575 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = $12; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $117 = $13; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $118 = $14; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $118; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
 $119 = $11; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $116; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $8 = $117; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $119; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $7; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $121 = $8; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $122 = $9; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $122; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $3 = $120; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $121; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $123; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
 $124 = $4; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $125 = $5; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $125; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $126 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $127 = HEAP16[$126>>1]|0; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP16[$124>>1] = $127; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $128 = ((($46)) + 8|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $129 = HEAP32[$128>>2]|0; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 $130 = ((($129)) + 2|0); //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$128>>2] = $130; //@line 1576 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(82,($49|0),($46|0)); //@line 1577 "/usr/lib/emscripten/system/include/libcxx/vector"
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $47 = $133; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = $134; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $135 = $47; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  $136 = $48; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($135|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($46); //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
  STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 84|0;
 $8 = sp + 16|0;
 $11 = sp + 72|0;
 $12 = sp + 111|0;
 $13 = sp + 8|0;
 $17 = sp + 110|0;
 $19 = sp;
 $21 = sp + 109|0;
 $27 = sp + 108|0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $24 = $32; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $33 = $24; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ((($33)) + 8|0); //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $34; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $23; //@line 354 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $35; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $36 = $22; //@line 2488 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $36; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $20; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0; //@line 1545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $37; //@line 1545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $31; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $27; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $15; //@line 1197 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $38; //@line 365 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$38>>2] = 0; //@line 441 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = ((($38)) + 4|0); //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$39>>2] = 0; //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
 $40 = ((($38)) + 8|0); //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $40; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$11>>2] = 0; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $10; //@line 443 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $11; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $9; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $43 = HEAP32[$42>>2]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $3 = $13; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$8>>0]=HEAP8[$12>>0]|0; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $41; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$7>>2] = $43; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $6; //@line 2435 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $8; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $4 = $7; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $4; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $46 = HEAP32[$45>>2]|0; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$44>>2] = $46; //@line 2258 "/usr/lib/emscripten/system/include/libcxx/memory"
 $47 = $26; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $47; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = $2; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $49 = ((($48)) + 4|0); //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $50 = HEAP32[$49>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $51 = HEAP32[$48>>2]|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $52 = $50; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $53 = $51; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $54 = (($52) - ($53))|0; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = (($54|0) / 12)&-1; //@line 640 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $55; //@line 1202 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = $28; //@line 1203 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = ($56>>>0)>(0); //@line 1203 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($57)) {
  STACKTOP = sp;return; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $58 = $28; //@line 1205 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_vii(120,($31|0),($58|0)); //@line 1205 "/usr/lib/emscripten/system/include/libcxx/vector"
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $70; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($31); //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $29; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $30; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($71|0);
  // unreachable;
 }
 $61 = $26; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $62 = HEAP32[$61>>2]|0; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $63 = $26; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $64 = ((($63)) + 4|0); //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $65 = HEAP32[$64>>2]|0; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $28; //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 __THREW__ = 0;
 invoke_viiii(124,($31|0),($62|0),($65|0),($66|0)); //@line 1206 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $70; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__213__vector_baseINS_6vectorIsNS_9allocatorIsEEEENS2_IS4_EEED2Ev($31); //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $71 = $29; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  $72 = $30; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
  ___resumeException($71|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1208 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 80|0;
 $8 = sp + 68|0;
 $16 = sp;
 $19 = sp + 97|0;
 $27 = sp + 96|0;
 $24 = $0;
 $25 = $1;
 $28 = $24;
 $23 = $28; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $23; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = ((($29)) + 8|0); //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $22 = $30; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $22; //@line 351 "/usr/lib/emscripten/system/include/libcxx/vector"
 $21 = $31; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $32 = $21; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $26 = $32; //@line 979 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($27,$28,1); //@line 982 "/usr/lib/emscripten/system/include/libcxx/vector"
  $33 = $26; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $34 = ((($28)) + 4|0); //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $35 = HEAP32[$34>>2]|0; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $20 = $35; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $20; //@line 1067 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $33; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $36; //@line 983 "/usr/lib/emscripten/system/include/libcxx/vector"
  $37 = $17; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  $38 = $18; //@line 1503 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$16>>0]=HEAP8[$19>>0]|0; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $37; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $38; //@line 1502 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $14; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $15; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $39; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $40; //@line 1656 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $13; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $41; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = $11; //@line 1748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $10 = $42; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $43 = $10; //@line 484 "/usr/lib/emscripten/system/include/libcxx/vector"
  $9 = $43; //@line 363 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$43>>2] = 0; //@line 432 "/usr/lib/emscripten/system/include/libcxx/vector"
  $44 = ((($43)) + 4|0); //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$44>>2] = 0; //@line 433 "/usr/lib/emscripten/system/include/libcxx/vector"
  $45 = ((($43)) + 8|0); //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $7 = $45; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$8>>2] = 0; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $46 = $7; //@line 434 "/usr/lib/emscripten/system/include/libcxx/vector"
  $6 = $8; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = $6; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $48 = HEAP32[$47>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $46; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$5>>2] = $48; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $4; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
  $3 = $49; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $5; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $2; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $51 = HEAP32[$50>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$49>>2] = $51; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($28)) + 4|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $53 = HEAP32[$52>>2]|0; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $54 = ((($53)) + 12|0); //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$52>>2] = $54; //@line 984 "/usr/lib/emscripten/system/include/libcxx/vector"
  $55 = $25; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $56 = (($55) + -1)|0; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $56; //@line 985 "/usr/lib/emscripten/system/include/libcxx/vector"
  __ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($27); //@line 986 "/usr/lib/emscripten/system/include/libcxx/vector"
  $57 = $25; //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  $58 = ($57>>>0)>(0); //@line 987 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($58)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 988 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEJRNS4_IsNS5_IsEEEEEE6invokeEPFSA_SD_EPSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $28 = sp + 8|0;
 $26 = $0;
 $27 = $1;
 $31 = $26; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $32 = $27; //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $33 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIsNS2_9allocatorIsEEEEE12fromWireTypeEPS6_($32)|0); //@line 330 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $34 = (FUNCTION_TABLE_ii[$31 & 127]($33)|0); //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$28>>2] = $34; //@line 329 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __THREW__ = 0;
 $35 = (invoke_ii(112,($28|0))|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  $29 = $53; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $30 = $54; //@line 333 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = $28; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $55 = $13; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $10 = $55; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $56 = $10; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $56; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $9; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $57; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $8; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = HEAP32[$58>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $59; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $60 = $11; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $56; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = $5; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $61; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $62 = $4; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$62>>2] = $60; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $63 = $12; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = ($63|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($64)) {
   $70 = $29; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $71 = $30; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   ___resumeException($70|0);
   // unreachable;
  }
  $3 = $56; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $65 = $3; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $65; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $2; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $67 = $12; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $6 = $66; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $67; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $7; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $69 = ($68|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($69) {
   $70 = $29; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   $71 = $30; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
   ___resumeException($70|0);
   // unreachable;
  }
  __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($68); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($68); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $29; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $71 = $30; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  ___resumeException($70|0);
  // unreachable;
 } else {
  $25 = $28; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $38 = $25; //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $22 = $38; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $39 = $22; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
  $21 = $39; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $40 = $21; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $40; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $41 = $20; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $42 = HEAP32[$41>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $24 = $42; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
  $43 = $23; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $39; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $44 = $17; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $44; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  $45 = $16; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$45>>2] = $43; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
  $46 = $24; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  $47 = ($46|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
  if (!($47)) {
   STACKTOP = sp;return ($35|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  }
  $15 = $39; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $48 = $15; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $14 = $48; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $49 = $14; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $24; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $49; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $19 = $50; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $19; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ($51|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($52) {
   STACKTOP = sp;return ($35|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  }
  __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($51); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZdlPv($51); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
  STACKTOP = sp;return ($35|0); //@line 328 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEERNS6_IsNS7_IsEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 203 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210unique_ptrINS4_6vectorIhNS4_9allocatorIhEEEENS4_14default_deleteIS9_EEEERNS6_IsNS7_IsEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIhNS3_9allocatorIhEEEENS3_14default_deleteIS8_EEEERNS5_IsNS6_IsEEEEEEEE3getEv()|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210unique_ptrINS3_6vectorIhNS3_9allocatorIhEEEENS3_14default_deleteIS8_EEEERNS5_IsNS6_IsEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (856|0); //@line 187 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __Z3eots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 28 "startstepstop.cpp"
 $4 = $3 << 16 >> 16; //@line 28 "startstepstop.cpp"
 $5 = ($4|0)<(0); //@line 28 "startstepstop.cpp"
 $6 = $2; //@line 29 "startstepstop.cpp"
 $7 = $6 << 16 >> 16; //@line 29 "startstepstop.cpp"
 if ($5) {
  $8 = (Math_abs(($7|0))|0); //@line 29 "startstepstop.cpp"
  $9 = $8<<1; //@line 29 "startstepstop.cpp"
  $10 = (($9) + 1)|0; //@line 29 "startstepstop.cpp"
  $11 = $10&65535; //@line 29 "startstepstop.cpp"
  $1 = $11; //@line 29 "startstepstop.cpp"
  $14 = $1; //@line 32 "startstepstop.cpp"
  STACKTOP = sp;return ($14|0); //@line 32 "startstepstop.cpp"
 } else {
  $12 = $7<<1; //@line 31 "startstepstop.cpp"
  $13 = $12&65535; //@line 31 "startstepstop.cpp"
  $1 = $13; //@line 31 "startstepstop.cpp"
  $14 = $1; //@line 32 "startstepstop.cpp"
  STACKTOP = sp;return ($14|0); //@line 32 "startstepstop.cpp"
 }
 return (0)|0;
}
function __Z11encodeShortRNSt3__26vectorIbNS_9allocatorIbEEEEs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 42|0;
 $9 = sp + 41|0;
 $10 = sp + 40|0;
 $11 = sp + 39|0;
 $12 = sp + 38|0;
 $13 = sp + 37|0;
 $14 = sp + 36|0;
 $15 = sp + 35|0;
 $16 = sp + 34|0;
 $17 = sp + 33|0;
 $18 = sp + 32|0;
 $19 = sp + 31|0;
 $20 = sp + 30|0;
 $21 = sp + 29|0;
 $24 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $25 = $3; //@line 51 "startstepstop.cpp"
 $26 = (__Z3eots($25)|0); //@line 51 "startstepstop.cpp"
 $4 = $26; //@line 51 "startstepstop.cpp"
 $27 = $3; //@line 53 "startstepstop.cpp"
 $28 = $27 << 16 >> 16; //@line 53 "startstepstop.cpp"
 $29 = ($28|0)<(0); //@line 53 "startstepstop.cpp"
 $30 = $3; //@line 54 "startstepstop.cpp"
 $31 = $30 << 16 >> 16; //@line 54 "startstepstop.cpp"
 if ($29) {
  $32 = (Math_abs(($31|0))|0); //@line 54 "startstepstop.cpp"
  $33 = $32<<1; //@line 54 "startstepstop.cpp"
  $34 = (($33) + 1)|0; //@line 54 "startstepstop.cpp"
  $35 = $34&65535; //@line 54 "startstepstop.cpp"
  $4 = $35; //@line 54 "startstepstop.cpp"
 } else {
  $36 = $31<<1; //@line 56 "startstepstop.cpp"
  $37 = $36&65535; //@line 56 "startstepstop.cpp"
  $4 = $37; //@line 56 "startstepstop.cpp"
 }
 $5 = 0; //@line 59 "startstepstop.cpp"
 $38 = $4; //@line 60 "startstepstop.cpp"
 $39 = $38 << 16 >> 16; //@line 60 "startstepstop.cpp"
 $40 = ($39|0)<(0); //@line 60 "startstepstop.cpp"
 if ($40) {
  $41 = (___cxa_allocate_exception(8)|0); //@line 61 "startstepstop.cpp"
  __THREW__ = 0;
  invoke_vii(125,($41|0),(12430|0)); //@line 61 "startstepstop.cpp"
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if (!($43)) {
   ___cxa_throw(($41|0),(456|0),(27|0)); //@line 61 "startstepstop.cpp"
   // unreachable; //@line 61 "startstepstop.cpp"
  }
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $6 = $44; //@line 102 "startstepstop.cpp"
  $7 = $45; //@line 102 "startstepstop.cpp"
  ___cxa_free_exception(($41|0)); //@line 61 "startstepstop.cpp"
  $111 = $6; //@line 61 "startstepstop.cpp"
  $112 = $7; //@line 61 "startstepstop.cpp"
  ___resumeException($111|0);
  // unreachable;
 }
 $46 = $4; //@line 62 "startstepstop.cpp"
 $47 = $46 << 16 >> 16; //@line 62 "startstepstop.cpp"
 $48 = ($47|0)<(8); //@line 62 "startstepstop.cpp"
 do {
  if ($48) {
   $49 = $2; //@line 63 "startstepstop.cpp"
   HEAP8[$8>>0] = 0; //@line 63 "startstepstop.cpp"
   __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($49,$8); //@line 63 "startstepstop.cpp"
   $5 = 3; //@line 64 "startstepstop.cpp"
  } else {
   $50 = $4; //@line 65 "startstepstop.cpp"
   $51 = $50 << 16 >> 16; //@line 65 "startstepstop.cpp"
   $52 = ($51|0)<(40); //@line 65 "startstepstop.cpp"
   if ($52) {
    $53 = $2; //@line 66 "startstepstop.cpp"
    HEAP8[$9>>0] = 1; //@line 66 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($53,$9); //@line 66 "startstepstop.cpp"
    $54 = $2; //@line 67 "startstepstop.cpp"
    HEAP8[$10>>0] = 0; //@line 67 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($54,$10); //@line 67 "startstepstop.cpp"
    $5 = 5; //@line 68 "startstepstop.cpp"
    $55 = $4; //@line 69 "startstepstop.cpp"
    $56 = $55 << 16 >> 16; //@line 69 "startstepstop.cpp"
    $57 = (($56) - 8)|0; //@line 69 "startstepstop.cpp"
    $58 = $57&65535; //@line 69 "startstepstop.cpp"
    $4 = $58; //@line 69 "startstepstop.cpp"
    break;
   }
   $59 = $4; //@line 70 "startstepstop.cpp"
   $60 = $59 << 16 >> 16; //@line 70 "startstepstop.cpp"
   $61 = ($60|0)<(168); //@line 70 "startstepstop.cpp"
   if ($61) {
    $62 = $2; //@line 71 "startstepstop.cpp"
    HEAP8[$11>>0] = 1; //@line 71 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($62,$11); //@line 71 "startstepstop.cpp"
    $63 = $2; //@line 72 "startstepstop.cpp"
    HEAP8[$12>>0] = 1; //@line 72 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($63,$12); //@line 72 "startstepstop.cpp"
    $64 = $2; //@line 73 "startstepstop.cpp"
    HEAP8[$13>>0] = 0; //@line 73 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($64,$13); //@line 73 "startstepstop.cpp"
    $5 = 7; //@line 74 "startstepstop.cpp"
    $65 = $4; //@line 75 "startstepstop.cpp"
    $66 = $65 << 16 >> 16; //@line 75 "startstepstop.cpp"
    $67 = (($66) - 40)|0; //@line 75 "startstepstop.cpp"
    $68 = $67&65535; //@line 75 "startstepstop.cpp"
    $4 = $68; //@line 75 "startstepstop.cpp"
    break;
   }
   $69 = $4; //@line 77 "startstepstop.cpp"
   $70 = $69 << 16 >> 16; //@line 77 "startstepstop.cpp"
   $71 = ($70|0)<(680); //@line 77 "startstepstop.cpp"
   if ($71) {
    $72 = $2; //@line 78 "startstepstop.cpp"
    HEAP8[$14>>0] = 1; //@line 78 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($72,$14); //@line 78 "startstepstop.cpp"
    $73 = $2; //@line 79 "startstepstop.cpp"
    HEAP8[$15>>0] = 1; //@line 79 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($73,$15); //@line 79 "startstepstop.cpp"
    $74 = $2; //@line 80 "startstepstop.cpp"
    HEAP8[$16>>0] = 1; //@line 80 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($74,$16); //@line 80 "startstepstop.cpp"
    $75 = $2; //@line 81 "startstepstop.cpp"
    HEAP8[$17>>0] = 0; //@line 81 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($75,$17); //@line 81 "startstepstop.cpp"
    $5 = 9; //@line 82 "startstepstop.cpp"
    $76 = $4; //@line 83 "startstepstop.cpp"
    $77 = $76 << 16 >> 16; //@line 83 "startstepstop.cpp"
    $78 = (($77) - 168)|0; //@line 83 "startstepstop.cpp"
    $79 = $78&65535; //@line 83 "startstepstop.cpp"
    $4 = $79; //@line 83 "startstepstop.cpp"
    break;
   }
   $80 = $4; //@line 84 "startstepstop.cpp"
   $81 = $80 << 16 >> 16; //@line 84 "startstepstop.cpp"
   $82 = ($81|0)<(2727); //@line 84 "startstepstop.cpp"
   if ($82) {
    $83 = $2; //@line 85 "startstepstop.cpp"
    HEAP8[$18>>0] = 1; //@line 85 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($83,$18); //@line 85 "startstepstop.cpp"
    $84 = $2; //@line 86 "startstepstop.cpp"
    HEAP8[$19>>0] = 1; //@line 86 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($84,$19); //@line 86 "startstepstop.cpp"
    $85 = $2; //@line 87 "startstepstop.cpp"
    HEAP8[$20>>0] = 1; //@line 87 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($85,$20); //@line 87 "startstepstop.cpp"
    $86 = $2; //@line 88 "startstepstop.cpp"
    HEAP8[$21>>0] = 1; //@line 88 "startstepstop.cpp"
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($86,$21); //@line 88 "startstepstop.cpp"
    $5 = 11; //@line 89 "startstepstop.cpp"
    $87 = $4; //@line 90 "startstepstop.cpp"
    $88 = $87 << 16 >> 16; //@line 90 "startstepstop.cpp"
    $89 = (($88) - 680)|0; //@line 90 "startstepstop.cpp"
    $90 = $89&65535; //@line 90 "startstepstop.cpp"
    $4 = $90; //@line 90 "startstepstop.cpp"
    break;
   }
   $91 = (___cxa_allocate_exception(8)|0); //@line 92 "startstepstop.cpp"
   __THREW__ = 0;
   invoke_vii(125,($91|0),(12490|0)); //@line 92 "startstepstop.cpp"
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   if (!($93)) {
    ___cxa_throw(($91|0),(456|0),(27|0)); //@line 92 "startstepstop.cpp"
    // unreachable; //@line 92 "startstepstop.cpp"
   }
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = tempRet0;
   $6 = $94; //@line 102 "startstepstop.cpp"
   $7 = $95; //@line 102 "startstepstop.cpp"
   ___cxa_free_exception(($91|0)); //@line 92 "startstepstop.cpp"
   $111 = $6; //@line 61 "startstepstop.cpp"
   $112 = $7; //@line 61 "startstepstop.cpp"
   ___resumeException($111|0);
   // unreachable;
  }
 } while(0);
 $22 = 0; //@line 96 "startstepstop.cpp"
 while(1) {
  $96 = $22; //@line 96 "startstepstop.cpp"
  $97 = $5; //@line 96 "startstepstop.cpp"
  $98 = ($96|0)<($97|0); //@line 96 "startstepstop.cpp"
  if (!($98)) {
   break;
  }
  $99 = $22; //@line 97 "startstepstop.cpp"
  $100 = 1 << $99; //@line 97 "startstepstop.cpp"
  $23 = $100; //@line 97 "startstepstop.cpp"
  $101 = $2; //@line 98 "startstepstop.cpp"
  $102 = $23; //@line 98 "startstepstop.cpp"
  $103 = $4; //@line 98 "startstepstop.cpp"
  $104 = $103 << 16 >> 16; //@line 98 "startstepstop.cpp"
  $105 = $102 & $104; //@line 98 "startstepstop.cpp"
  $106 = ($105|0)!=(0); //@line 98 "startstepstop.cpp"
  $107 = $106&1; //@line 98 "startstepstop.cpp"
  HEAP8[$24>>0] = $107; //@line 98 "startstepstop.cpp"
  __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($101,$24); //@line 98 "startstepstop.cpp"
  $108 = $22; //@line 96 "startstepstop.cpp"
  $109 = (($108) + 1)|0; //@line 96 "startstepstop.cpp"
  $22 = $109; //@line 96 "startstepstop.cpp"
 }
 $110 = $5; //@line 101 "startstepstop.cpp"
 STACKTOP = sp;return ($110|0); //@line 101 "startstepstop.cpp"
}
function __Z6encodeRNSt3__26vectorIsNS_9allocatorIsEEEE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $29 = sp + 192|0;
 $32 = sp + 180|0;
 $36 = sp + 164|0;
 $39 = sp + 152|0;
 $43 = sp + 136|0;
 $46 = sp + 124|0;
 $49 = sp + 112|0;
 $65 = sp + 48|0;
 $68 = sp + 36|0;
 $71 = sp + 24|0;
 $73 = sp + 310|0;
 $75 = sp + 12|0;
 $76 = sp + 8|0;
 $72 = $0;
 $$expand_i1_val = 0; //@line 105 "startstepstop.cpp"
 HEAP8[$73>>0] = $$expand_i1_val; //@line 105 "startstepstop.cpp"
 $80 = (__Znwj(12)|0); //@line 105 "startstepstop.cpp"
 $70 = $80; //@line 105 "startstepstop.cpp"
 $81 = $70; //@line 105 "startstepstop.cpp"
 $69 = $81; //@line 2169 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$81>>2] = 0; //@line 2551 "/usr/lib/emscripten/system/include/libcxx/vector"
 $82 = ((($81)) + 4|0); //@line 2552 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$82>>2] = 0; //@line 2552 "/usr/lib/emscripten/system/include/libcxx/vector"
 $83 = ((($81)) + 8|0); //@line 2553 "/usr/lib/emscripten/system/include/libcxx/vector"
 $67 = $83; //@line 2553 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$68>>2] = 0; //@line 2553 "/usr/lib/emscripten/system/include/libcxx/vector"
 $84 = $67; //@line 2553 "/usr/lib/emscripten/system/include/libcxx/vector"
 $66 = $68; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $85 = $66; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $86 = HEAP32[$85>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = $84; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$65>>2] = $86; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $87 = $64; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $63 = $87; //@line 2251 "/usr/lib/emscripten/system/include/libcxx/memory"
 $62 = $65; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $88 = $62; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $89 = HEAP32[$88>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$87>>2] = $89; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $48 = $71; //@line 105 "startstepstop.cpp"
 HEAP32[$49>>2] = $80; //@line 105 "startstepstop.cpp"
 $90 = $48; //@line 105 "startstepstop.cpp"
 $47 = $49; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $91 = $47; //@line 2206 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $92 = HEAP32[$91>>2]|0; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $90; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$46>>2] = $92; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $93 = $45; //@line 2609 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = $46; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $94 = $44; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $95 = HEAP32[$94>>2]|0; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $42 = $93; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$43>>2] = $95; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $96 = $42; //@line 2431 "/usr/lib/emscripten/system/include/libcxx/memory"
 $41 = $43; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $97 = $41; //@line 2214 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $98 = HEAP32[$97>>2]|0; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$96>>2] = $98; //@line 2252 "/usr/lib/emscripten/system/include/libcxx/memory"
 $99 = $72; //@line 110 "startstepstop.cpp"
 $74 = $99; //@line 110 "startstepstop.cpp"
 $100 = $74; //@line 110 "startstepstop.cpp"
 $40 = $100; //@line 110 "startstepstop.cpp"
 $101 = $40; //@line 110 "startstepstop.cpp"
 $102 = HEAP32[$101>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $37 = $101; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $38 = $102; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $103 = $38; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = $36; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $35 = $103; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $104 = $34; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $105 = $35; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$104>>2] = $105; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $106 = HEAP32[$36>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$39>>2] = $106; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 $107 = HEAP32[$39>>2]|0; //@line 1466 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$75>>2] = $107; //@line 110 "startstepstop.cpp"
 $108 = $74; //@line 110 "startstepstop.cpp"
 $33 = $108; //@line 110 "startstepstop.cpp"
 $109 = $33; //@line 110 "startstepstop.cpp"
 $110 = ((($109)) + 4|0); //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $111 = HEAP32[$110>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $30 = $109; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $31 = $111; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $112 = $31; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $29; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $28 = $112; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $113 = $27; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 $114 = $28; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 HEAP32[$113>>2] = $114; //@line 1247 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $115 = HEAP32[$29>>2]|0; //@line 1445 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$32>>2] = $115; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 $116 = HEAP32[$32>>2]|0; //@line 1482 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$76>>2] = $116; //@line 110 "startstepstop.cpp"
 while(1) {
  $10 = $75; //@line 110 "startstepstop.cpp"
  $11 = $76; //@line 110 "startstepstop.cpp"
  $117 = $10; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $118 = $11; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $8 = $117; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $9 = $118; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $119 = $8; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $7 = $119; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $120 = $7; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $121 = HEAP32[$120>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $122 = $9; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $6 = $122; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $123 = $6; //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $124 = HEAP32[$123>>2]|0; //@line 1238 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $125 = ($121|0)==($124|0); //@line 1314 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $126 = $125 ^ 1; //@line 1366 "/usr/lib/emscripten/system/include/libcxx/iterator"
  if (!($126)) {
   label = 8;
   break;
  }
  $5 = $75; //@line 110 "startstepstop.cpp"
  $127 = $5; //@line 110 "startstepstop.cpp"
  $128 = HEAP32[$127>>2]|0; //@line 1182 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $129 = HEAP16[$128>>1]|0; //@line 110 "startstepstop.cpp"
  $77 = $129; //@line 110 "startstepstop.cpp"
  $3 = $71; //@line 112 "startstepstop.cpp"
  $130 = $3; //@line 112 "startstepstop.cpp"
  $2 = $130; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  $131 = $2; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  $1 = $131; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $132 = $1; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $133 = HEAP32[$132>>2]|0; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  $134 = $77; //@line 112 "startstepstop.cpp"
  __THREW__ = 0;
  (invoke_iii(126,($133|0),($134|0))|0); //@line 112 "startstepstop.cpp"
  $135 = __THREW__; __THREW__ = 0;
  $136 = $135&1;
  if ($136) {
   break;
  }
  $4 = $75; //@line 110 "startstepstop.cpp"
  $137 = $4; //@line 110 "startstepstop.cpp"
  $138 = HEAP32[$137>>2]|0; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $139 = ((($138)) + 2|0); //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$137>>2] = $139; //@line 1198 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 if ((label|0) == 8) {
  $26 = $71; //@line 121 "startstepstop.cpp"
  $157 = $26; //@line 121 "startstepstop.cpp"
  $25 = $157; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  $158 = $25; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  $24 = $158; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $159 = $24; //@line 2485 "/usr/lib/emscripten/system/include/libcxx/memory"
  $160 = HEAP32[$159>>2]|0; //@line 2728 "/usr/lib/emscripten/system/include/libcxx/memory"
  __THREW__ = 0;
  (invoke_iii(126,($160|0),1362)|0); //@line 121 "startstepstop.cpp"
  $161 = __THREW__; __THREW__ = 0;
  $162 = $161&1;
  if (!($162)) {
   $$expand_i1_val2 = 1; //@line 124 "startstepstop.cpp"
   HEAP8[$73>>0] = $$expand_i1_val2; //@line 124 "startstepstop.cpp"
   $$pre_trunc = HEAP8[$73>>0]|0; //@line 125 "startstepstop.cpp"
   $163 = $$pre_trunc&1; //@line 125 "startstepstop.cpp"
   if ($163) {
    $179 = HEAP32[$71>>2]|0; //@line 125 "startstepstop.cpp"
    STACKTOP = sp;return ($179|0); //@line 125 "startstepstop.cpp"
   }
   $61 = $71; //@line 125 "startstepstop.cpp"
   $164 = $61; //@line 125 "startstepstop.cpp"
   $58 = $164; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $59 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $165 = $58; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
   $57 = $165; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $166 = $57; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $56 = $166; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $167 = $56; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $168 = HEAP32[$167>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $60 = $168; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
   $169 = $59; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $53 = $165; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $170 = $53; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $52 = $170; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   $171 = $52; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
   HEAP32[$171>>2] = $169; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
   $172 = $60; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   $173 = ($172|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
   if (!($173)) {
    $179 = HEAP32[$71>>2]|0; //@line 125 "startstepstop.cpp"
    STACKTOP = sp;return ($179|0); //@line 125 "startstepstop.cpp"
   }
   $51 = $165; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $174 = $51; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $50 = $174; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $175 = $50; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
   $176 = $60; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $54 = $175; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $55 = $176; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
   $177 = $55; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   $178 = ($177|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($178) {
    $179 = HEAP32[$71>>2]|0; //@line 125 "startstepstop.cpp"
    STACKTOP = sp;return ($179|0); //@line 125 "startstepstop.cpp"
   }
   __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($177); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   __ZdlPv($177); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
   $179 = HEAP32[$71>>2]|0; //@line 125 "startstepstop.cpp"
   STACKTOP = sp;return ($179|0); //@line 125 "startstepstop.cpp"
  }
 }
 $140 = ___cxa_find_matching_catch_2()|0;
 $141 = tempRet0;
 $78 = $140; //@line 125 "startstepstop.cpp"
 $79 = $141; //@line 125 "startstepstop.cpp"
 $23 = $71; //@line 125 "startstepstop.cpp"
 $142 = $23; //@line 125 "startstepstop.cpp"
 $20 = $142; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $21 = 0; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $143 = $20; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/memory"
 $19 = $143; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $144 = $19; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $18 = $144; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $145 = $18; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $146 = HEAP32[$145>>2]|0; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $22 = $146; //@line 2748 "/usr/lib/emscripten/system/include/libcxx/memory"
 $147 = $21; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $143; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $148 = $15; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = $148; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 $149 = $14; //@line 2484 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$149>>2] = $147; //@line 2749 "/usr/lib/emscripten/system/include/libcxx/memory"
 $150 = $22; //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 $151 = ($150|0)!=(0|0); //@line 2750 "/usr/lib/emscripten/system/include/libcxx/memory"
 if (!($151)) {
  $180 = $78; //@line 125 "startstepstop.cpp"
  $181 = $79; //@line 125 "startstepstop.cpp"
  ___resumeException($180|0);
  // unreachable;
 }
 $13 = $143; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $152 = $13; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = $152; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $153 = $12; //@line 2487 "/usr/lib/emscripten/system/include/libcxx/memory"
 $154 = $22; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $153; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $17 = $154; //@line 2751 "/usr/lib/emscripten/system/include/libcxx/memory"
 $155 = $17; //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $156 = ($155|0)==(0|0); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($156) {
  $180 = $78; //@line 125 "startstepstop.cpp"
  $181 = $79; //@line 125 "startstepstop.cpp"
  ___resumeException($180|0);
  // unreachable;
 }
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($155); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 __ZdlPv($155); //@line 2545 "/usr/lib/emscripten/system/include/libcxx/memory"
 $180 = $78; //@line 125 "startstepstop.cpp"
 $181 = $79; //@line 125 "startstepstop.cpp"
 ___resumeException($180|0);
 // unreachable;
 return (0)|0;
}
function _compress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$023$i = 0, $$024$i = 0, $$1$i = 0, $$125$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $6 = ((($4)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 36|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 40|0);
 HEAP32[$8>>2] = 0;
 $9 = (_deflateInit_($4,-1,12554,56)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$023$i = $9;
  STACKTOP = sp;return ($$023$i|0);
 }
 $11 = ((($4)) + 12|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 16|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$4>>2] = $2;
 $13 = ((($4)) + 4|0);
 HEAP32[$13>>2] = 0;
 $$0$i = $5;$$024$i = $3;$14 = 0;
 while(1) {
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP32[$12>>2] = $$0$i;
   $$1$i = 0;
  } else {
   $$1$i = $$0$i;
  }
  $16 = HEAP32[$13>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   HEAP32[$13>>2] = $$024$i;
   $$125$i = 0;
  } else {
   $$125$i = $$024$i;
  }
  $18 = ($$125$i|0)!=(0);
  $19 = $18 ? 0 : 4;
  $20 = (_deflate($4,$19)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   break;
  }
  $$pre$i = HEAP32[$12>>2]|0;
  $$0$i = $$1$i;$$024$i = $$125$i;$14 = $$pre$i;
 }
 $22 = ((($4)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$1>>2] = $23;
 (_deflateEnd($4)|0);
 $24 = ($20|0)==(1);
 $25 = $24 ? 0 : $20;
 $$023$i = $25;
 STACKTOP = sp;return ($$023$i|0);
}
function _compressBound($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 12;
 $2 = $0 >>> 14;
 $3 = $0 >>> 25;
 $4 = (($0) + 13)|0;
 $5 = (($4) + ($1))|0;
 $6 = (($5) + ($2))|0;
 $7 = (($6) + ($3))|0;
 return ($7|0);
}
function _deflateInit_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_deflateInit2_($0,$1,8,15,8,0,$2,$3)|0);
 return ($4|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$0120 = 0, $$0 = 0, $$0118 = 0, $$0120 = 0, $$121 = 0, $$122 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond123 = 0, $or$cond19 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $$0 = -6;
  return ($$0|0);
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = ($9<<24>>24)!=(49);
 $11 = ($7|0)!=(56);
 $or$cond = $11 | $10;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 127;
  $17 = ((($0)) + 40|0);
  HEAP32[$17>>2] = 0;
  $39 = 127;
 } else {
  $39 = $15;
 }
 $18 = ((($0)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$18>>2] = 128;
 }
 $21 = ($1|0)==(-1);
 $$ = $21 ? 6 : $1;
 $22 = ($3|0)<(0);
 if ($22) {
  $23 = (0 - ($3))|0;
  $$0118 = 0;$$0120 = $23;
 } else {
  $24 = ($3|0)>(15);
  $25 = (($3) + -16)|0;
  $$121 = $24 ? $25 : $3;
  $$122 = $24 ? 2 : 1;
  $$0118 = $$122;$$0120 = $$121;
 }
 $$off = (($4) + -1)|0;
 $26 = ($$off>>>0)>(8);
 $27 = ($2|0)!=(8);
 $or$cond5 = $27 | $26;
 $28 = $$0120 & -8;
 $29 = ($28|0)!=(8);
 $30 = $or$cond5 | $29;
 $31 = ($$>>>0)>(9);
 $32 = $31 | $30;
 $33 = ($5>>>0)>(4);
 $34 = $33 | $32;
 if ($34) {
  $$0 = -2;
  return ($$0|0);
 }
 $35 = ($$0120|0)==(8);
 $36 = ($$0118|0)!=(1);
 $or$cond19 = $35 & $36;
 if ($or$cond19) {
  $$0 = -2;
  return ($$0|0);
 }
 $$$0120 = $35 ? 9 : $$0120;
 $37 = ((($0)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $40 = (FUNCTION_TABLE_iiii[$39 & 127]($38,1,5828)|0);
 $41 = ($40|0)==(0|0);
 if ($41) {
  $$0 = -4;
  return ($$0|0);
 }
 $42 = ((($0)) + 28|0);
 HEAP32[$42>>2] = $40;
 HEAP32[$40>>2] = $0;
 $43 = ((($40)) + 4|0);
 HEAP32[$43>>2] = 42;
 $44 = ((($40)) + 24|0);
 HEAP32[$44>>2] = $$0118;
 $45 = ((($40)) + 28|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($40)) + 48|0);
 HEAP32[$46>>2] = $$$0120;
 $47 = 1 << $$$0120;
 $48 = ((($40)) + 44|0);
 HEAP32[$48>>2] = $47;
 $49 = (($47) + -1)|0;
 $50 = ((($40)) + 52|0);
 HEAP32[$50>>2] = $49;
 $51 = (($4) + 7)|0;
 $52 = ((($40)) + 80|0);
 HEAP32[$52>>2] = $51;
 $53 = 1 << $51;
 $54 = ((($40)) + 76|0);
 HEAP32[$54>>2] = $53;
 $55 = (($53) + -1)|0;
 $56 = ((($40)) + 84|0);
 HEAP32[$56>>2] = $55;
 $57 = (($4) + 9)|0;
 $58 = (($57>>>0) / 3)&-1;
 $59 = ((($40)) + 88|0);
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[$14>>2]|0;
 $61 = HEAP32[$37>>2]|0;
 $62 = (FUNCTION_TABLE_iiii[$60 & 127]($61,$47,2)|0);
 $63 = ((($40)) + 56|0);
 HEAP32[$63>>2] = $62;
 $64 = HEAP32[$14>>2]|0;
 $65 = HEAP32[$37>>2]|0;
 $66 = HEAP32[$48>>2]|0;
 $67 = (FUNCTION_TABLE_iiii[$64 & 127]($65,$66,2)|0);
 $68 = ((($40)) + 64|0);
 HEAP32[$68>>2] = $67;
 $69 = HEAP32[$14>>2]|0;
 $70 = HEAP32[$37>>2]|0;
 $71 = HEAP32[$54>>2]|0;
 $72 = (FUNCTION_TABLE_iiii[$69 & 127]($70,$71,2)|0);
 $73 = ((($40)) + 68|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($40)) + 5824|0);
 HEAP32[$74>>2] = 0;
 $75 = (($4) + 6)|0;
 $76 = 1 << $75;
 $77 = ((($40)) + 5788|0);
 HEAP32[$77>>2] = $76;
 $78 = HEAP32[$14>>2]|0;
 $79 = HEAP32[$37>>2]|0;
 $80 = (FUNCTION_TABLE_iiii[$78 & 127]($79,$76,4)|0);
 $81 = ((($40)) + 8|0);
 HEAP32[$81>>2] = $80;
 $82 = HEAP32[$77>>2]|0;
 $83 = $82 << 2;
 $84 = ((($40)) + 12|0);
 HEAP32[$84>>2] = $83;
 $85 = HEAP32[$63>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$68>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$73>>2]|0;
   $90 = ($89|0)==(0|0);
   $91 = ($80|0)==(0|0);
   $or$cond123 = $90 | $91;
   if (!($or$cond123)) {
    $93 = $82 >>> 1;
    $94 = (($80) + ($93<<1)|0);
    $95 = ((($40)) + 5796|0);
    HEAP32[$95>>2] = $94;
    $96 = ($82*3)|0;
    $97 = (($80) + ($96)|0);
    $98 = ((($40)) + 5784|0);
    HEAP32[$98>>2] = $97;
    $99 = ((($40)) + 132|0);
    HEAP32[$99>>2] = $$;
    $100 = ((($40)) + 136|0);
    HEAP32[$100>>2] = $5;
    $101 = ((($40)) + 36|0);
    HEAP8[$101>>0] = 8;
    $102 = (_deflateResetKeep($0)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$0 = $102;
     return ($$0|0);
    }
    $104 = HEAP32[$42>>2]|0;
    $105 = ((($104)) + 44|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 << 1;
    $108 = ((($104)) + 60|0);
    HEAP32[$108>>2] = $107;
    $109 = ((($104)) + 76|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + -1)|0;
    $112 = ((($104)) + 68|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) + ($111<<1)|0);
    HEAP16[$114>>1] = 0;
    $115 = $110 << 1;
    $116 = (($115) + -2)|0;
    _memset(($113|0),0,($116|0))|0;
    $117 = ((($104)) + 132|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (((864 + (($118*12)|0)|0)) + 2|0);
    $120 = HEAP16[$119>>1]|0;
    $121 = $120&65535;
    $122 = ((($104)) + 128|0);
    HEAP32[$122>>2] = $121;
    $123 = (864 + (($118*12)|0)|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = $124&65535;
    $126 = ((($104)) + 140|0);
    HEAP32[$126>>2] = $125;
    $127 = (((864 + (($118*12)|0)|0)) + 4|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128&65535;
    $130 = ((($104)) + 144|0);
    HEAP32[$130>>2] = $129;
    $131 = (((864 + (($118*12)|0)|0)) + 6|0);
    $132 = HEAP16[$131>>1]|0;
    $133 = $132&65535;
    $134 = ((($104)) + 124|0);
    HEAP32[$134>>2] = $133;
    $135 = ((($104)) + 108|0);
    HEAP32[$135>>2] = 0;
    $136 = ((($104)) + 92|0);
    HEAP32[$136>>2] = 0;
    $137 = ((($104)) + 116|0);
    HEAP32[$137>>2] = 0;
    $138 = ((($104)) + 5812|0);
    HEAP32[$138>>2] = 0;
    $139 = ((($104)) + 120|0);
    HEAP32[$139>>2] = 2;
    $140 = ((($104)) + 96|0);
    HEAP32[$140>>2] = 2;
    $141 = ((($104)) + 104|0);
    HEAP32[$141>>2] = 0;
    $142 = ((($104)) + 72|0);
    HEAP32[$142>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 HEAP32[$43>>2] = 666;
 $92 = HEAP32[(1616)>>2]|0;
 HEAP32[$13>>2] = $92;
 (_deflateEnd($0)|0);
 $$0 = -4;
 return ($$0|0);
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$in = 0, $$in30 = 0, $$in31 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $$pre27 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = -2;
  return ($$0|0);
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==($0|0);
 if (!($12)) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($9)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 switch ($14|0) {
 case 666: case 113: case 103: case 91: case 73: case 69: case 57: case 42:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $15 = ((($9)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$in = $9;
 } else {
  $18 = ((($0)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$6 & 255]($19,$16);
  $$pre = HEAP32[$8>>2]|0;
  $$in = $$pre;
 }
 $20 = ((($$in)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$in30 = $$in;
 } else {
  $23 = HEAP32[$5>>2]|0;
  $24 = ((($0)) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vii[$23 & 255]($25,$21);
  $$pre24 = HEAP32[$8>>2]|0;
  $$in30 = $$pre24;
 }
 $26 = ((($$in30)) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$in31 = $$in30;
 } else {
  $29 = HEAP32[$5>>2]|0;
  $30 = ((($0)) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$29 & 255]($31,$27);
  $$pre25 = HEAP32[$8>>2]|0;
  $$in31 = $$pre25;
 }
 $32 = ((($$in31)) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $$pre27 = ((($0)) + 40|0);
  $$pre$phiZ2D = $$pre27;$40 = $$in31;
 } else {
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($0)) + 40|0);
  $37 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vii[$35 & 255]($37,$33);
  $$pre26 = HEAP32[$8>>2]|0;
  $$pre$phiZ2D = $36;$40 = $$pre26;
 }
 $38 = HEAP32[$5>>2]|0;
 $39 = HEAP32[$$pre$phiZ2D>>2]|0;
 FUNCTION_TABLE_vii[$38 & 255]($39,$40);
 HEAP32[$8>>2] = 0;
 $41 = ($14|0)==(113);
 $42 = $41 ? -3 : 0;
 $$0 = $42;
 return ($$0|0);
}
function _deflateResetKeep($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = -2;
  return ($$0|0);
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==($0|0);
 if (!($12)) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($9)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 switch ($14|0) {
 case 666: case 113: case 103: case 91: case 73: case 69: case 57: case 42:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $15 = ((($0)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 44|0);
 HEAP32[$18>>2] = 2;
 $19 = ((($9)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($9)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($9)) + 16|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($9)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = (0 - ($24))|0;
  HEAP32[$23>>2] = $26;
  $27 = $26;
 } else {
  $27 = $24;
 }
 $28 = ($27|0)==(2);
 $29 = ($27|0)!=(0);
 $30 = $29 ? 42 : 113;
 $31 = $28 ? 57 : $30;
 HEAP32[$13>>2] = $31;
 if ($28) {
  $32 = (_crc32(0,0,0)|0);
  $35 = $32;
 } else {
  $33 = (_adler32(0,0,0)|0);
  $35 = $33;
 }
 $34 = ((($0)) + 48|0);
 HEAP32[$34>>2] = $35;
 $36 = ((($9)) + 40|0);
 HEAP32[$36>>2] = 0;
 __tr_init($9);
 $$0 = 0;
 return ($$0|0);
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$0211 = 0, $$$i = 0, $$$i223 = 0, $$$i227 = 0, $$0211 = 0, $$0217 = 0, $$0249 = 0, $$1 = 0, $$1215 = 0, $$1215$ = 0, $$2 = 0, $$218 = 0, $$219 = 0, $$220 = 0, $$2216 = 0, $$222 = 0, $$245 = 0, $$phi$trans$insert = 0, $$phi$trans$insert238 = 0;
 var $$pre230 = 0, $$pre231 = 0, $$pre233 = 0, $$pre234 = 0, $$pre236 = 0, $$pre237 = 0, $$pre239 = 0, $$pre241 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond221 = 0, $or$cond229 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -5)|0;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 $$ = $7 ? $6 : $4;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 5820|0);
 $12 = ((($0)) + 108|0);
 $13 = ((($0)) + 92|0);
 $14 = ($1|0)!=(4);
 $15 = ($1|0)==(0);
 $16 = ($1|0)==(4);
 $17 = ((($0)) + 20|0);
 $18 = ((($0)) + 8|0);
 $19 = ((($0)) + 56|0);
 $20 = HEAP32[$11>>2]|0;
 $21 = (($20) + 42)|0;
 $22 = $21 >> 3;
 $23 = ((($8)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24>>>0)<($22>>>0);
 L1: do {
  if ($25) {
   $$1 = 0;$156 = $8;
  } else {
   $$0249 = 0;$27 = $22;$28 = $24;$33 = $8;
   while(1) {
    $26 = (($28) - ($27))|0;
    $29 = HEAP32[$12>>2]|0;
    $30 = HEAP32[$13>>2]|0;
    $31 = (($29) - ($30))|0;
    $32 = ((($33)) + 4|0);
    $34 = HEAP32[$32>>2]|0;
    $35 = (($31) + ($34))|0;
    $36 = ($35>>>0)<(65535);
    $$218 = $36 ? $35 : 65535;
    $37 = ($$218>>>0)>($26>>>0);
    $$1215 = $37 ? $26 : $$218;
    $38 = ($$1215>>>0)<($$>>>0);
    if ($38) {
     $39 = ($$1215|0)==(0);
     $or$cond = $14 & $39;
     $or$cond3 = $15 | $or$cond;
     $or$cond3$not = $or$cond3 ^ 1;
     $40 = ($$1215|0)==($35|0);
     $or$cond229 = $40 & $or$cond3$not;
     if (!($or$cond229)) {
      $$1 = $$0249;$156 = $33;
      break L1;
     }
    }
    $41 = ($$1215|0)==($35|0);
    $$245 = $16 & $41;
    $42 = $$245&1;
    __tr_stored_block($0,0,0,$42);
    $43 = $$1215&255;
    $44 = HEAP32[$17>>2]|0;
    $45 = (($44) + -4)|0;
    $46 = HEAP32[$18>>2]|0;
    $47 = (($46) + ($45)|0);
    HEAP8[$47>>0] = $43;
    $48 = $$1215 >>> 8;
    $49 = $48&255;
    $50 = HEAP32[$17>>2]|0;
    $51 = (($50) + -3)|0;
    $52 = HEAP32[$18>>2]|0;
    $53 = (($52) + ($51)|0);
    HEAP8[$53>>0] = $49;
    $54 = $$1215 ^ -1;
    $55 = $54&255;
    $56 = HEAP32[$17>>2]|0;
    $57 = (($56) + -2)|0;
    $58 = HEAP32[$18>>2]|0;
    $59 = (($58) + ($57)|0);
    HEAP8[$59>>0] = $55;
    $60 = $54 >>> 8;
    $61 = $60&255;
    $62 = HEAP32[$17>>2]|0;
    $63 = (($62) + -1)|0;
    $64 = HEAP32[$18>>2]|0;
    $65 = (($64) + ($63)|0);
    HEAP8[$65>>0] = $61;
    $66 = HEAP32[$0>>2]|0;
    $67 = ((($66)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    __tr_flush_bits($68);
    $69 = ((($68)) + 20|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($66)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($70>>>0)>($72>>>0);
    $$$i = $73 ? $72 : $70;
    $74 = ($$$i|0)==(0);
    if (!($74)) {
     $75 = ((($66)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($68)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     _memcpy(($76|0),($78|0),($$$i|0))|0;
     $79 = HEAP32[$75>>2]|0;
     $80 = (($79) + ($$$i)|0);
     HEAP32[$75>>2] = $80;
     $81 = HEAP32[$77>>2]|0;
     $82 = (($81) + ($$$i)|0);
     HEAP32[$77>>2] = $82;
     $83 = ((($66)) + 20|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + ($$$i))|0;
     HEAP32[$83>>2] = $85;
     $86 = HEAP32[$71>>2]|0;
     $87 = (($86) - ($$$i))|0;
     HEAP32[$71>>2] = $87;
     $88 = HEAP32[$69>>2]|0;
     $89 = (($88) - ($$$i))|0;
     HEAP32[$69>>2] = $89;
     $90 = ($89|0)==(0);
     if ($90) {
      $91 = ((($68)) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      HEAP32[$77>>2] = $92;
     }
    }
    $93 = ($31|0)==(0);
    if ($93) {
     $$2216 = $$1215;
    } else {
     $94 = ($31>>>0)>($$1215>>>0);
     $$1215$ = $94 ? $$1215 : $31;
     $95 = HEAP32[$0>>2]|0;
     $96 = ((($95)) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = HEAP32[$19>>2]|0;
     $99 = HEAP32[$13>>2]|0;
     $100 = (($98) + ($99)|0);
     _memcpy(($97|0),($100|0),($$1215$|0))|0;
     $101 = HEAP32[$0>>2]|0;
     $102 = ((($101)) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + ($$1215$)|0);
     HEAP32[$102>>2] = $104;
     $105 = ((($101)) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($106) - ($$1215$))|0;
     HEAP32[$105>>2] = $107;
     $108 = ((($101)) + 20|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) + ($$1215$))|0;
     HEAP32[$108>>2] = $110;
     $111 = HEAP32[$13>>2]|0;
     $112 = (($111) + ($$1215$))|0;
     HEAP32[$13>>2] = $112;
     $113 = (($$1215) - ($$1215$))|0;
     $$2216 = $113;
    }
    $114 = ($$2216|0)==(0);
    if (!($114)) {
     $115 = HEAP32[$0>>2]|0;
     $116 = ((($115)) + 12|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ((($115)) + 4|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119>>>0)>($$2216>>>0);
     $$$i223 = $120 ? $$2216 : $119;
     $121 = ($$$i223|0)==(0);
     if ($121) {
      $140 = $115;$142 = $117;
     } else {
      $122 = (($119) - ($$$i223))|0;
      HEAP32[$118>>2] = $122;
      $123 = HEAP32[$115>>2]|0;
      _memcpy(($117|0),($123|0),($$$i223|0))|0;
      $124 = ((($115)) + 28|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($125)) + 24|0);
      $127 = HEAP32[$126>>2]|0;
      switch ($127|0) {
      case 1:  {
       $128 = ((($115)) + 48|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (_adler32($129,$117,$$$i223)|0);
       HEAP32[$128>>2] = $130;
       break;
      }
      case 2:  {
       $131 = ((($115)) + 48|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (_crc32($132,$117,$$$i223)|0);
       HEAP32[$131>>2] = $133;
       break;
      }
      default: {
      }
      }
      $134 = HEAP32[$115>>2]|0;
      $135 = (($134) + ($$$i223)|0);
      HEAP32[$115>>2] = $135;
      $136 = ((($115)) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (($137) + ($$$i223))|0;
      HEAP32[$136>>2] = $138;
      $$pre230 = HEAP32[$0>>2]|0;
      $$phi$trans$insert = ((($$pre230)) + 12|0);
      $$pre231 = HEAP32[$$phi$trans$insert>>2]|0;
      $140 = $$pre230;$142 = $$pre231;
     }
     $139 = ((($140)) + 12|0);
     $141 = (($142) + ($$2216)|0);
     HEAP32[$139>>2] = $141;
     $143 = ((($140)) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($144) - ($$2216))|0;
     HEAP32[$143>>2] = $145;
     $146 = ((($140)) + 20|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + ($$2216))|0;
     HEAP32[$146>>2] = $148;
    }
    $$pre233 = HEAP32[$0>>2]|0;
    if ($$245) {
     $$1 = $42;$156 = $$pre233;
     break L1;
    }
    $149 = HEAP32[$11>>2]|0;
    $150 = (($149) + 42)|0;
    $151 = $150 >> 3;
    $152 = ((($$pre233)) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153>>>0)<($151>>>0);
    if ($154) {
     $$1 = $42;$156 = $$pre233;
     break;
    } else {
     $$0249 = $42;$27 = $151;$28 = $153;$33 = $$pre233;
    }
   }
  }
 } while(0);
 $155 = ((($156)) + 4|0);
 $157 = HEAP32[$155>>2]|0;
 $158 = (($10) - ($157))|0;
 $159 = ($158|0)==(0);
 if ($159) {
  $$pre236 = HEAP32[$12>>2]|0;
  $199 = $$pre236;
 } else {
  $160 = HEAP32[$5>>2]|0;
  $161 = ($158>>>0)<($160>>>0);
  if ($161) {
   $168 = ((($0)) + 60|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = HEAP32[$12>>2]|0;
   $171 = (($169) - ($170))|0;
   $172 = ($171>>>0)>($158>>>0);
   if (!($172)) {
    $173 = (($170) - ($160))|0;
    HEAP32[$12>>2] = $173;
    $174 = HEAP32[$19>>2]|0;
    $175 = (($174) + ($160)|0);
    _memcpy(($174|0),($175|0),($173|0))|0;
    $176 = ((($0)) + 5808|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177>>>0)<(2);
    if ($178) {
     $179 = (($177) + 1)|0;
     HEAP32[$176>>2] = $179;
    }
   }
   $180 = HEAP32[$19>>2]|0;
   $181 = HEAP32[$12>>2]|0;
   $182 = (($180) + ($181)|0);
   $183 = HEAP32[$0>>2]|0;
   $184 = HEAP32[$183>>2]|0;
   $185 = (0 - ($158))|0;
   $186 = (($184) + ($185)|0);
   _memcpy(($182|0),($186|0),($158|0))|0;
   $187 = HEAP32[$12>>2]|0;
   $188 = (($187) + ($158))|0;
   HEAP32[$12>>2] = $188;
   $$pre234 = HEAP32[$5>>2]|0;
   $189 = $188;$193 = $$pre234;
  } else {
   $162 = ((($0)) + 5808|0);
   HEAP32[$162>>2] = 2;
   $163 = HEAP32[$19>>2]|0;
   $164 = HEAP32[$156>>2]|0;
   $165 = (0 - ($160))|0;
   $166 = (($164) + ($165)|0);
   _memcpy(($163|0),($166|0),($160|0))|0;
   $167 = HEAP32[$5>>2]|0;
   HEAP32[$12>>2] = $167;
   $189 = $167;$193 = $167;
  }
  HEAP32[$13>>2] = $189;
  $190 = ((($0)) + 5812|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (($193) - ($191))|0;
  $194 = ($158>>>0)>($192>>>0);
  $$219 = $194 ? $192 : $158;
  $195 = (($$219) + ($191))|0;
  HEAP32[$190>>2] = $195;
  $199 = $189;
 }
 $196 = ((($0)) + 5824|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ($197>>>0)<($199>>>0);
 if ($198) {
  HEAP32[$196>>2] = $199;
 }
 $200 = ($$1|0)==(0);
 if (!($200)) {
  $$0217 = 3;
  return ($$0217|0);
 }
 $201 = ($1|0)!=(0);
 switch ($1|0) {
 case 0: case 4:  {
  break;
 }
 default: {
  $202 = HEAP32[$0>>2]|0;
  $203 = ((($202)) + 4|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)==(0);
  if ($205) {
   $206 = HEAP32[$13>>2]|0;
   $207 = ($199|0)==($206|0);
   if ($207) {
    $$0217 = 1;
    return ($$0217|0);
   }
  }
 }
 }
 $208 = ((($0)) + 60|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($209) - ($199))|0;
 $211 = (($210) + -1)|0;
 $212 = HEAP32[$0>>2]|0;
 $213 = ((($212)) + 4|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214>>>0)>($211>>>0);
 if ($215) {
  $216 = HEAP32[$13>>2]|0;
  $217 = HEAP32[$5>>2]|0;
  $218 = ($216|0)<($217|0);
  if ($218) {
   $$0211 = $211;$230 = $214;$233 = $212;
  } else {
   $219 = (($216) - ($217))|0;
   HEAP32[$13>>2] = $219;
   $220 = (($199) - ($217))|0;
   HEAP32[$12>>2] = $220;
   $221 = HEAP32[$19>>2]|0;
   $222 = (($221) + ($217)|0);
   _memcpy(($221|0),($222|0),($220|0))|0;
   $223 = ((($0)) + 5808|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ($224>>>0)<(2);
   if ($225) {
    $226 = (($224) + 1)|0;
    HEAP32[$223>>2] = $226;
   }
   $227 = HEAP32[$5>>2]|0;
   $228 = (($227) + ($211))|0;
   $$pre237 = HEAP32[$0>>2]|0;
   $$phi$trans$insert238 = ((($$pre237)) + 4|0);
   $$pre239 = HEAP32[$$phi$trans$insert238>>2]|0;
   $$0211 = $228;$230 = $$pre239;$233 = $$pre237;
  }
 } else {
  $$0211 = $211;$230 = $214;$233 = $212;
 }
 $229 = ($$0211>>>0)>($230>>>0);
 $$$0211 = $229 ? $230 : $$0211;
 $231 = ($$$0211|0)==(0);
 if ($231) {
  $$pre241 = HEAP32[$12>>2]|0;
  $258 = $$pre241;
 } else {
  $232 = ((($233)) + 4|0);
  $234 = HEAP32[$19>>2]|0;
  $235 = HEAP32[$12>>2]|0;
  $236 = (($234) + ($235)|0);
  $237 = (($230) - ($$$0211))|0;
  HEAP32[$232>>2] = $237;
  $238 = HEAP32[$233>>2]|0;
  _memcpy(($236|0),($238|0),($$$0211|0))|0;
  $239 = ((($233)) + 28|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 24|0);
  $242 = HEAP32[$241>>2]|0;
  switch ($242|0) {
  case 1:  {
   $243 = ((($233)) + 48|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (_adler32($244,$236,$$$0211)|0);
   HEAP32[$243>>2] = $245;
   break;
  }
  case 2:  {
   $246 = ((($233)) + 48|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (_crc32($247,$236,$$$0211)|0);
   HEAP32[$246>>2] = $248;
   break;
  }
  default: {
  }
  }
  $249 = HEAP32[$233>>2]|0;
  $250 = (($249) + ($$$0211)|0);
  HEAP32[$233>>2] = $250;
  $251 = ((($233)) + 8|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + ($$$0211))|0;
  HEAP32[$251>>2] = $253;
  $254 = HEAP32[$12>>2]|0;
  $255 = (($254) + ($$$0211))|0;
  HEAP32[$12>>2] = $255;
  $258 = $255;
 }
 $256 = HEAP32[$196>>2]|0;
 $257 = ($256>>>0)<($258>>>0);
 if ($257) {
  HEAP32[$196>>2] = $258;
 }
 $259 = HEAP32[$11>>2]|0;
 $260 = (($259) + 42)|0;
 $261 = $260 >> 3;
 $262 = HEAP32[$2>>2]|0;
 $263 = (($262) - ($261))|0;
 $264 = ($263>>>0)>(65535);
 $$220 = $264 ? 65535 : $263;
 $265 = HEAP32[$5>>2]|0;
 $266 = ($$220>>>0)>($265>>>0);
 $267 = $266 ? $265 : $$220;
 $268 = HEAP32[$13>>2]|0;
 $269 = (($258) - ($268))|0;
 $270 = ($269>>>0)<($267>>>0);
 if ($270) {
  $271 = ($269|0)!=(0);
  $or$cond7 = $16 | $271;
  $or$cond9 = $201 & $or$cond7;
  if ($or$cond9) {
   $272 = HEAP32[$0>>2]|0;
   $273 = ((($272)) + 4|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = ($274|0)!=(0);
   $276 = ($269>>>0)>($$220>>>0);
   $or$cond221 = $276 | $275;
   if ($or$cond221) {
    $$2 = 0;
   } else {
    label = 49;
   }
  } else {
   $$2 = 0;
  }
 } else {
  label = 49;
 }
 if ((label|0) == 49) {
  $277 = ($269>>>0)>($$220>>>0);
  $278 = $277 ? $$220 : $269;
  if ($16) {
   $279 = HEAP32[$0>>2]|0;
   $280 = ((($279)) + 4|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ($281|0)==(0);
   $283 = ($278|0)==($269|0);
   $$222 = $283 & $282;
   $285 = $$222;
  } else {
   $285 = 0;
  }
  $284 = $285&1;
  $286 = HEAP32[$19>>2]|0;
  $287 = (($286) + ($268)|0);
  __tr_stored_block($0,$287,$278,$284);
  $288 = HEAP32[$13>>2]|0;
  $289 = (($288) + ($278))|0;
  HEAP32[$13>>2] = $289;
  $290 = HEAP32[$0>>2]|0;
  $291 = ((($290)) + 28|0);
  $292 = HEAP32[$291>>2]|0;
  __tr_flush_bits($292);
  $293 = ((($292)) + 20|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ((($290)) + 16|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ($294>>>0)>($296>>>0);
  $$$i227 = $297 ? $296 : $294;
  $298 = ($$$i227|0)==(0);
  if ($298) {
   $$2 = $284;
  } else {
   $299 = ((($290)) + 12|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ((($292)) + 16|0);
   $302 = HEAP32[$301>>2]|0;
   _memcpy(($300|0),($302|0),($$$i227|0))|0;
   $303 = HEAP32[$299>>2]|0;
   $304 = (($303) + ($$$i227)|0);
   HEAP32[$299>>2] = $304;
   $305 = HEAP32[$301>>2]|0;
   $306 = (($305) + ($$$i227)|0);
   HEAP32[$301>>2] = $306;
   $307 = ((($290)) + 20|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = (($308) + ($$$i227))|0;
   HEAP32[$307>>2] = $309;
   $310 = HEAP32[$295>>2]|0;
   $311 = (($310) - ($$$i227))|0;
   HEAP32[$295>>2] = $311;
   $312 = HEAP32[$293>>2]|0;
   $313 = (($312) - ($$$i227))|0;
   HEAP32[$293>>2] = $313;
   $314 = ($313|0)==(0);
   if ($314) {
    $315 = ((($292)) + 8|0);
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$301>>2] = $316;
    $$2 = $284;
   } else {
    $$2 = $284;
   }
  }
 }
 $317 = ($$2|0)!=(0);
 $318 = $317 ? 2 : 0;
 $$0217 = $318;
 return ($$0217|0);
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i140 = 0, $$0 = 0, $$0135 = 0, $$137 = 0, $$pn = 0, $$pr = 0, $$pre = 0, $$pre143 = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$pre149 = 0, $$sink = 0, $$sink$in = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond136 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 108|0);
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 52|0);
 $11 = ((($0)) + 64|0);
 $12 = ((($0)) + 44|0);
 $13 = ((($0)) + 96|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 5792|0);
 $16 = ((($0)) + 5796|0);
 $17 = ((($0)) + 5784|0);
 $18 = ((($0)) + 5788|0);
 $19 = ((($0)) + 128|0);
 $20 = ((($0)) + 92|0);
 while(1) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21>>>0)<(262);
  if ($22) {
   _fill_window($0);
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23>>>0)<(262);
   $or$cond = $3 & $24;
   if ($or$cond) {
    $$0 = 0;
    label = 39;
    break;
   }
   $25 = ($23|0)==(0);
   if ($25) {
    label = 24;
    break;
   }
   $26 = ($23>>>0)>(2);
   if ($26) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $27 = HEAP32[$4>>2]|0;
   $28 = HEAP32[$5>>2]|0;
   $29 = $27 << $28;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + 2)|0;
   $32 = HEAP32[$7>>2]|0;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 ^ $29;
   $37 = HEAP32[$8>>2]|0;
   $38 = $36 & $37;
   HEAP32[$4>>2] = $38;
   $39 = HEAP32[$9>>2]|0;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = HEAP32[$10>>2]|0;
   $43 = $42 & $30;
   $44 = HEAP32[$11>>2]|0;
   $45 = (($44) + ($43<<1)|0);
   HEAP16[$45>>1] = $41;
   $46 = $41&65535;
   $47 = $30&65535;
   HEAP16[$40>>1] = $47;
   $48 = ($41<<16>>16)==(0);
   if ($48) {
    label = 9;
   } else {
    $49 = (($30) - ($46))|0;
    $50 = HEAP32[$12>>2]|0;
    $51 = (($50) + -262)|0;
    $52 = ($49>>>0)>($51>>>0);
    if ($52) {
     label = 9;
    } else {
     $53 = (_longest_match($0,$46)|0);
     HEAP32[$13>>2] = $53;
     $54 = $53;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$13>>2]|0;
   $54 = $$pr;
  }
  $55 = ($54>>>0)>(2);
  do {
   if ($55) {
    $56 = (($54) + 253)|0;
    $57 = $56&255;
    $58 = HEAP32[$6>>2]|0;
    $59 = HEAP32[$14>>2]|0;
    $60 = (($58) - ($59))|0;
    $61 = $60&65535;
    $62 = HEAP32[$15>>2]|0;
    $63 = HEAP32[$16>>2]|0;
    $64 = (($63) + ($62<<1)|0);
    HEAP16[$64>>1] = $61;
    $65 = (($62) + 1)|0;
    HEAP32[$15>>2] = $65;
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + ($62)|0);
    HEAP8[$67>>0] = $57;
    $68 = (($60) + 65535)|0;
    $69 = $56 & 255;
    $70 = (13073 + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 | 256;
    $74 = (($73) + 1)|0;
    $75 = (((($0)) + 148|0) + ($74<<2)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = (($76) + 1)<<16>>16;
    HEAP16[$75>>1] = $77;
    $78 = $68 & 65535;
    $79 = ($78>>>0)<(256);
    $80 = $78 >>> 7;
    $81 = (($80) + 256)|0;
    $$pn = $79 ? $78 : $81;
    $$sink$in = (12561 + ($$pn)|0);
    $$sink = HEAP8[$$sink$in>>0]|0;
    $82 = $$sink&255;
    $83 = (((($0)) + 2440|0) + ($82<<2)|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = (($84) + 1)<<16>>16;
    HEAP16[$83>>1] = $85;
    $86 = HEAP32[$15>>2]|0;
    $87 = HEAP32[$18>>2]|0;
    $88 = (($87) + -1)|0;
    $89 = ($86|0)==($88|0);
    $90 = $89&1;
    $91 = HEAP32[$13>>2]|0;
    $92 = HEAP32[$2>>2]|0;
    $93 = (($92) - ($91))|0;
    HEAP32[$2>>2] = $93;
    $94 = HEAP32[$19>>2]|0;
    $95 = ($91>>>0)<=($94>>>0);
    $96 = ($93>>>0)>(2);
    $or$cond136 = $96 & $95;
    if (!($or$cond136)) {
     $117 = HEAP32[$6>>2]|0;
     $118 = (($117) + ($91))|0;
     HEAP32[$6>>2] = $118;
     HEAP32[$13>>2] = 0;
     $119 = HEAP32[$7>>2]|0;
     $120 = (($119) + ($118)|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     HEAP32[$4>>2] = $122;
     $123 = HEAP32[$5>>2]|0;
     $124 = $122 << $123;
     $125 = (($118) + 1)|0;
     $126 = (($119) + ($125)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = $128 ^ $124;
     $130 = HEAP32[$8>>2]|0;
     $131 = $129 & $130;
     HEAP32[$4>>2] = $131;
     $$0135 = $90;$161 = $118;
     break;
    }
    $97 = (($91) + -1)|0;
    HEAP32[$13>>2] = $97;
    $$pre = HEAP32[$6>>2]|0;
    $$pre143 = HEAP32[$4>>2]|0;
    $$pre144 = HEAP32[$5>>2]|0;
    $$pre145 = HEAP32[$7>>2]|0;
    $$pre146 = HEAP32[$8>>2]|0;
    $$pre147 = HEAP32[$9>>2]|0;
    $$pre148 = HEAP32[$10>>2]|0;
    $$pre149 = HEAP32[$11>>2]|0;
    $101 = $$pre143;$114 = $97;$99 = $$pre;
    while(1) {
     $98 = (($99) + 1)|0;
     HEAP32[$6>>2] = $98;
     $100 = $101 << $$pre144;
     $102 = (($99) + 3)|0;
     $103 = (($$pre145) + ($102)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104&255;
     $106 = $105 ^ $100;
     $107 = $106 & $$pre146;
     HEAP32[$4>>2] = $107;
     $108 = (($$pre147) + ($107<<1)|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $$pre148 & $98;
     $111 = (($$pre149) + ($110<<1)|0);
     HEAP16[$111>>1] = $109;
     $112 = $98&65535;
     HEAP16[$108>>1] = $112;
     $113 = (($114) + -1)|0;
     HEAP32[$13>>2] = $113;
     $115 = ($113|0)==(0);
     if ($115) {
      break;
     } else {
      $101 = $107;$114 = $113;$99 = $98;
     }
    }
    $116 = (($99) + 2)|0;
    HEAP32[$6>>2] = $116;
    $$0135 = $90;$161 = $116;
   } else {
    $132 = HEAP32[$6>>2]|0;
    $133 = HEAP32[$7>>2]|0;
    $134 = (($133) + ($132)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = HEAP32[$15>>2]|0;
    $137 = HEAP32[$16>>2]|0;
    $138 = (($137) + ($136<<1)|0);
    HEAP16[$138>>1] = 0;
    $139 = (($136) + 1)|0;
    HEAP32[$15>>2] = $139;
    $140 = HEAP32[$17>>2]|0;
    $141 = (($140) + ($136)|0);
    HEAP8[$141>>0] = $135;
    $142 = $135&255;
    $143 = (((($0)) + 148|0) + ($142<<2)|0);
    $144 = HEAP16[$143>>1]|0;
    $145 = (($144) + 1)<<16>>16;
    HEAP16[$143>>1] = $145;
    $146 = HEAP32[$15>>2]|0;
    $147 = HEAP32[$18>>2]|0;
    $148 = (($147) + -1)|0;
    $149 = ($146|0)==($148|0);
    $150 = $149&1;
    $151 = HEAP32[$2>>2]|0;
    $152 = (($151) + -1)|0;
    HEAP32[$2>>2] = $152;
    $153 = HEAP32[$6>>2]|0;
    $154 = (($153) + 1)|0;
    HEAP32[$6>>2] = $154;
    $$0135 = $150;$161 = $154;
   }
  } while(0);
  $155 = ($$0135|0)==(0);
  if ($155) {
   continue;
  }
  $156 = HEAP32[$20>>2]|0;
  $157 = ($156|0)>(-1);
  if ($157) {
   $158 = HEAP32[$7>>2]|0;
   $159 = (($158) + ($156)|0);
   $162 = $159;
  } else {
   $162 = 0;
  }
  $160 = (($161) - ($156))|0;
  __tr_flush_block($0,$162,$160,0);
  $163 = HEAP32[$6>>2]|0;
  HEAP32[$20>>2] = $163;
  $164 = HEAP32[$0>>2]|0;
  $165 = ((($164)) + 28|0);
  $166 = HEAP32[$165>>2]|0;
  __tr_flush_bits($166);
  $167 = ((($166)) + 20|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ((($164)) + 16|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($168>>>0)>($170>>>0);
  $$$i = $171 ? $170 : $168;
  $172 = ($$$i|0)==(0);
  if (!($172)) {
   $173 = ((($164)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($166)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   _memcpy(($174|0),($176|0),($$$i|0))|0;
   $177 = HEAP32[$173>>2]|0;
   $178 = (($177) + ($$$i)|0);
   HEAP32[$173>>2] = $178;
   $179 = HEAP32[$175>>2]|0;
   $180 = (($179) + ($$$i)|0);
   HEAP32[$175>>2] = $180;
   $181 = ((($164)) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + ($$$i))|0;
   HEAP32[$181>>2] = $183;
   $184 = HEAP32[$169>>2]|0;
   $185 = (($184) - ($$$i))|0;
   HEAP32[$169>>2] = $185;
   $186 = HEAP32[$167>>2]|0;
   $187 = (($186) - ($$$i))|0;
   HEAP32[$167>>2] = $187;
   $188 = ($187|0)==(0);
   if ($188) {
    $189 = ((($166)) + 8|0);
    $190 = HEAP32[$189>>2]|0;
    HEAP32[$175>>2] = $190;
   }
  }
  $191 = HEAP32[$0>>2]|0;
  $192 = ((($191)) + 16|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)==(0);
  if ($194) {
   $$0 = 0;
   label = 39;
   break;
  }
 }
 if ((label|0) == 24) {
  $195 = HEAP32[$6>>2]|0;
  $196 = ($195>>>0)<(2);
  $$ = $196 ? $195 : 2;
  $197 = ((($0)) + 5812|0);
  HEAP32[$197>>2] = $$;
  $198 = ($1|0)==(4);
  if ($198) {
   $199 = HEAP32[$20>>2]|0;
   $200 = ($199|0)>(-1);
   if ($200) {
    $201 = HEAP32[$7>>2]|0;
    $202 = (($201) + ($199)|0);
    $204 = $202;
   } else {
    $204 = 0;
   }
   $203 = (($195) - ($199))|0;
   __tr_flush_block($0,$204,$203,1);
   $205 = HEAP32[$6>>2]|0;
   HEAP32[$20>>2] = $205;
   $206 = HEAP32[$0>>2]|0;
   $207 = ((($206)) + 28|0);
   $208 = HEAP32[$207>>2]|0;
   __tr_flush_bits($208);
   $209 = ((($208)) + 20|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($206)) + 16|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($210>>>0)>($212>>>0);
   $$$i138 = $213 ? $212 : $210;
   $214 = ($$$i138|0)==(0);
   if (!($214)) {
    $215 = ((($206)) + 12|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ((($208)) + 16|0);
    $218 = HEAP32[$217>>2]|0;
    _memcpy(($216|0),($218|0),($$$i138|0))|0;
    $219 = HEAP32[$215>>2]|0;
    $220 = (($219) + ($$$i138)|0);
    HEAP32[$215>>2] = $220;
    $221 = HEAP32[$217>>2]|0;
    $222 = (($221) + ($$$i138)|0);
    HEAP32[$217>>2] = $222;
    $223 = ((($206)) + 20|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = (($224) + ($$$i138))|0;
    HEAP32[$223>>2] = $225;
    $226 = HEAP32[$211>>2]|0;
    $227 = (($226) - ($$$i138))|0;
    HEAP32[$211>>2] = $227;
    $228 = HEAP32[$209>>2]|0;
    $229 = (($228) - ($$$i138))|0;
    HEAP32[$209>>2] = $229;
    $230 = ($229|0)==(0);
    if ($230) {
     $231 = ((($208)) + 8|0);
     $232 = HEAP32[$231>>2]|0;
     HEAP32[$217>>2] = $232;
    }
   }
   $233 = HEAP32[$0>>2]|0;
   $234 = ((($233)) + 16|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ($235|0)==(0);
   $$137 = $236 ? 2 : 3;
   $$0 = $$137;
   return ($$0|0);
  }
  $237 = HEAP32[$15>>2]|0;
  $238 = ($237|0)==(0);
  if (!($238)) {
   $239 = HEAP32[$20>>2]|0;
   $240 = ($239|0)>(-1);
   if ($240) {
    $241 = HEAP32[$7>>2]|0;
    $242 = (($241) + ($239)|0);
    $244 = $242;
   } else {
    $244 = 0;
   }
   $243 = (($195) - ($239))|0;
   __tr_flush_block($0,$244,$243,0);
   $245 = HEAP32[$6>>2]|0;
   HEAP32[$20>>2] = $245;
   $246 = HEAP32[$0>>2]|0;
   $247 = ((($246)) + 28|0);
   $248 = HEAP32[$247>>2]|0;
   __tr_flush_bits($248);
   $249 = ((($248)) + 20|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ((($246)) + 16|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($250>>>0)>($252>>>0);
   $$$i140 = $253 ? $252 : $250;
   $254 = ($$$i140|0)==(0);
   if (!($254)) {
    $255 = ((($246)) + 12|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ((($248)) + 16|0);
    $258 = HEAP32[$257>>2]|0;
    _memcpy(($256|0),($258|0),($$$i140|0))|0;
    $259 = HEAP32[$255>>2]|0;
    $260 = (($259) + ($$$i140)|0);
    HEAP32[$255>>2] = $260;
    $261 = HEAP32[$257>>2]|0;
    $262 = (($261) + ($$$i140)|0);
    HEAP32[$257>>2] = $262;
    $263 = ((($246)) + 20|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = (($264) + ($$$i140))|0;
    HEAP32[$263>>2] = $265;
    $266 = HEAP32[$251>>2]|0;
    $267 = (($266) - ($$$i140))|0;
    HEAP32[$251>>2] = $267;
    $268 = HEAP32[$249>>2]|0;
    $269 = (($268) - ($$$i140))|0;
    HEAP32[$249>>2] = $269;
    $270 = ($269|0)==(0);
    if ($270) {
     $271 = ((($248)) + 8|0);
     $272 = HEAP32[$271>>2]|0;
     HEAP32[$257>>2] = $272;
    }
   }
   $273 = HEAP32[$0>>2]|0;
   $274 = ((($273)) + 16|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($275|0)==(0);
   if ($276) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i173 = 0, $$$i175 = 0, $$$i177 = 0, $$172 = 0, $$2 = 0, $$neg181 = 0, $$pn = 0, $$pr = 0, $$pr179 = 0, $$pre = 0, $$sink = 0, $$sink$in = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond185 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 108|0);
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 52|0);
 $11 = ((($0)) + 64|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 120|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 100|0);
 $16 = ((($0)) + 5792|0);
 $17 = ((($0)) + 5796|0);
 $18 = ((($0)) + 5784|0);
 $19 = ((($0)) + 5788|0);
 $20 = ((($0)) + 104|0);
 $21 = ((($0)) + 92|0);
 $22 = ((($0)) + 128|0);
 $23 = ((($0)) + 44|0);
 $24 = ((($0)) + 136|0);
 L1: while(1) {
  $$pr = HEAP32[$2>>2]|0;
  $25 = $$pr;
  while(1) {
   $26 = ($25>>>0)<(262);
   if ($26) {
    _fill_window($0);
    $27 = HEAP32[$2>>2]|0;
    $28 = ($27>>>0)<(262);
    $or$cond = $3 & $28;
    if ($or$cond) {
     $$2 = 0;
     label = 55;
     break L1;
    }
    $29 = ($27|0)==(0);
    if ($29) {
     label = 38;
     break L1;
    }
    $30 = ($27>>>0)>(2);
    if ($30) {
     label = 8;
    } else {
     $31 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $31;
     $32 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $32;
     HEAP32[$12>>2] = 2;
     $350 = 2;
     label = 16;
    }
   } else {
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     label = 0;
     $33 = HEAP32[$4>>2]|0;
     $34 = HEAP32[$5>>2]|0;
     $35 = $33 << $34;
     $36 = HEAP32[$6>>2]|0;
     $37 = (($36) + 2)|0;
     $38 = HEAP32[$7>>2]|0;
     $39 = (($38) + ($37)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = $41 ^ $35;
     $43 = HEAP32[$8>>2]|0;
     $44 = $42 & $43;
     HEAP32[$4>>2] = $44;
     $45 = HEAP32[$9>>2]|0;
     $46 = (($45) + ($44<<1)|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = HEAP32[$10>>2]|0;
     $49 = $48 & $36;
     $50 = HEAP32[$11>>2]|0;
     $51 = (($50) + ($49<<1)|0);
     HEAP16[$51>>1] = $47;
     $52 = $47&65535;
     $53 = $36&65535;
     HEAP16[$46>>1] = $53;
     $54 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $54;
     $55 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $55;
     HEAP32[$12>>2] = 2;
     $56 = ($47<<16>>16)==(0);
     if ($56) {
      $350 = 2;
      label = 16;
     } else {
      $57 = HEAP32[$22>>2]|0;
      $58 = ($54>>>0)<($57>>>0);
      if ($58) {
       $59 = HEAP32[$6>>2]|0;
       $60 = (($59) - ($52))|0;
       $61 = HEAP32[$23>>2]|0;
       $62 = (($61) + -262)|0;
       $63 = ($60>>>0)>($62>>>0);
       if ($63) {
        $350 = 2;
        label = 16;
       } else {
        $64 = (_longest_match($0,$52)|0);
        HEAP32[$12>>2] = $64;
        $65 = ($64>>>0)<(6);
        if ($65) {
         $66 = HEAP32[$24>>2]|0;
         $67 = ($66|0)==(1);
         if (!($67)) {
          $68 = ($64|0)==(3);
          if (!($68)) {
           $350 = $64;
           label = 16;
           break;
          }
          $69 = HEAP32[$6>>2]|0;
          $70 = HEAP32[$14>>2]|0;
          $71 = (($69) - ($70))|0;
          $72 = ($71>>>0)>(4096);
          if (!($72)) {
           $350 = 3;
           label = 16;
           break;
          }
         }
         HEAP32[$12>>2] = 2;
         $350 = 2;
         label = 16;
        } else {
         $350 = $64;
         label = 16;
        }
       }
      } else {
       $73 = $54;$75 = 2;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $$pr179 = HEAP32[$13>>2]|0;
    $73 = $$pr179;$75 = $350;
   }
   $74 = ($73>>>0)<(3);
   $76 = ($75>>>0)>($73>>>0);
   $or$cond185 = $74 | $76;
   if (!($or$cond185)) {
    break;
   }
   $183 = HEAP32[$20>>2]|0;
   $184 = ($183|0)==(0);
   if ($184) {
    HEAP32[$20>>2] = 1;
    $247 = HEAP32[$6>>2]|0;
    $248 = (($247) + 1)|0;
    HEAP32[$6>>2] = $248;
    $249 = HEAP32[$2>>2]|0;
    $250 = (($249) + -1)|0;
    HEAP32[$2>>2] = $250;
    $25 = $250;
    continue;
   }
   $185 = HEAP32[$6>>2]|0;
   $186 = (($185) + -1)|0;
   $187 = HEAP32[$7>>2]|0;
   $188 = (($187) + ($186)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = HEAP32[$16>>2]|0;
   $191 = HEAP32[$17>>2]|0;
   $192 = (($191) + ($190<<1)|0);
   HEAP16[$192>>1] = 0;
   $193 = (($190) + 1)|0;
   HEAP32[$16>>2] = $193;
   $194 = HEAP32[$18>>2]|0;
   $195 = (($194) + ($190)|0);
   HEAP8[$195>>0] = $189;
   $196 = $189&255;
   $197 = (((($0)) + 148|0) + ($196<<2)|0);
   $198 = HEAP16[$197>>1]|0;
   $199 = (($198) + 1)<<16>>16;
   HEAP16[$197>>1] = $199;
   $200 = HEAP32[$16>>2]|0;
   $201 = HEAP32[$19>>2]|0;
   $202 = (($201) + -1)|0;
   $203 = ($200|0)==($202|0);
   if ($203) {
    $204 = HEAP32[$21>>2]|0;
    $205 = ($204|0)>(-1);
    if ($205) {
     $206 = HEAP32[$7>>2]|0;
     $207 = (($206) + ($204)|0);
     $210 = $207;
    } else {
     $210 = 0;
    }
    $208 = HEAP32[$6>>2]|0;
    $209 = (($208) - ($204))|0;
    __tr_flush_block($0,$210,$209,0);
    $211 = HEAP32[$6>>2]|0;
    HEAP32[$21>>2] = $211;
    $212 = HEAP32[$0>>2]|0;
    $213 = ((($212)) + 28|0);
    $214 = HEAP32[$213>>2]|0;
    __tr_flush_bits($214);
    $215 = ((($214)) + 20|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ((($212)) + 16|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($216>>>0)>($218>>>0);
    $$$i173 = $219 ? $218 : $216;
    $220 = ($$$i173|0)==(0);
    if (!($220)) {
     $221 = ((($212)) + 12|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ((($214)) + 16|0);
     $224 = HEAP32[$223>>2]|0;
     _memcpy(($222|0),($224|0),($$$i173|0))|0;
     $225 = HEAP32[$221>>2]|0;
     $226 = (($225) + ($$$i173)|0);
     HEAP32[$221>>2] = $226;
     $227 = HEAP32[$223>>2]|0;
     $228 = (($227) + ($$$i173)|0);
     HEAP32[$223>>2] = $228;
     $229 = ((($212)) + 20|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + ($$$i173))|0;
     HEAP32[$229>>2] = $231;
     $232 = HEAP32[$217>>2]|0;
     $233 = (($232) - ($$$i173))|0;
     HEAP32[$217>>2] = $233;
     $234 = HEAP32[$215>>2]|0;
     $235 = (($234) - ($$$i173))|0;
     HEAP32[$215>>2] = $235;
     $236 = ($235|0)==(0);
     if ($236) {
      $237 = ((($214)) + 8|0);
      $238 = HEAP32[$237>>2]|0;
      HEAP32[$223>>2] = $238;
     }
    }
   }
   $239 = HEAP32[$6>>2]|0;
   $240 = (($239) + 1)|0;
   HEAP32[$6>>2] = $240;
   $241 = HEAP32[$2>>2]|0;
   $242 = (($241) + -1)|0;
   HEAP32[$2>>2] = $242;
   $243 = HEAP32[$0>>2]|0;
   $244 = ((($243)) + 16|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($245|0)==(0);
   if ($246) {
    $$2 = 0;
    label = 55;
    break L1;
   } else {
    $25 = $242;
   }
  }
  $77 = HEAP32[$6>>2]|0;
  $78 = HEAP32[$2>>2]|0;
  $79 = (($77) + -3)|0;
  $80 = (($79) + ($78))|0;
  $81 = (($73) + 253)|0;
  $82 = $81&255;
  $83 = (($77) + 65535)|0;
  $84 = HEAP32[$15>>2]|0;
  $85 = (($83) - ($84))|0;
  $86 = $85&65535;
  $87 = HEAP32[$16>>2]|0;
  $88 = HEAP32[$17>>2]|0;
  $89 = (($88) + ($87<<1)|0);
  HEAP16[$89>>1] = $86;
  $90 = (($87) + 1)|0;
  HEAP32[$16>>2] = $90;
  $91 = HEAP32[$18>>2]|0;
  $92 = (($91) + ($87)|0);
  HEAP8[$92>>0] = $82;
  $93 = (($85) + 65535)|0;
  $94 = $81 & 255;
  $95 = (13073 + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 | 256;
  $99 = (($98) + 1)|0;
  $100 = (((($0)) + 148|0) + ($99<<2)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = (($101) + 1)<<16>>16;
  HEAP16[$100>>1] = $102;
  $103 = $93 & 65535;
  $104 = ($103>>>0)<(256);
  $105 = $103 >>> 7;
  $106 = (($105) + 256)|0;
  $$pn = $104 ? $103 : $106;
  $$sink$in = (12561 + ($$pn)|0);
  $$sink = HEAP8[$$sink$in>>0]|0;
  $107 = $$sink&255;
  $108 = (((($0)) + 2440|0) + ($107<<2)|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = (($109) + 1)<<16>>16;
  HEAP16[$108>>1] = $110;
  $111 = HEAP32[$16>>2]|0;
  $112 = HEAP32[$19>>2]|0;
  $113 = (($112) + -1)|0;
  $114 = HEAP32[$13>>2]|0;
  $115 = HEAP32[$2>>2]|0;
  $$neg181 = (1 - ($114))|0;
  $116 = (($$neg181) + ($115))|0;
  HEAP32[$2>>2] = $116;
  $117 = (($114) + -2)|0;
  HEAP32[$13>>2] = $117;
  $$pre = HEAP32[$6>>2]|0;
  $119 = $$pre;$141 = $117;
  while(1) {
   $118 = (($119) + 1)|0;
   HEAP32[$6>>2] = $118;
   $120 = ($118>>>0)>($80>>>0);
   if (!($120)) {
    $121 = HEAP32[$4>>2]|0;
    $122 = HEAP32[$5>>2]|0;
    $123 = $121 << $122;
    $124 = (($119) + 3)|0;
    $125 = HEAP32[$7>>2]|0;
    $126 = (($125) + ($124)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = $128 ^ $123;
    $130 = HEAP32[$8>>2]|0;
    $131 = $129 & $130;
    HEAP32[$4>>2] = $131;
    $132 = HEAP32[$9>>2]|0;
    $133 = (($132) + ($131<<1)|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = HEAP32[$10>>2]|0;
    $136 = $135 & $118;
    $137 = HEAP32[$11>>2]|0;
    $138 = (($137) + ($136<<1)|0);
    HEAP16[$138>>1] = $134;
    $139 = $118&65535;
    HEAP16[$133>>1] = $139;
   }
   $140 = (($141) + -1)|0;
   HEAP32[$13>>2] = $140;
   $142 = ($140|0)==(0);
   if ($142) {
    break;
   } else {
    $119 = $118;$141 = $140;
   }
  }
  $143 = ($111|0)==($113|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$12>>2] = 2;
  $144 = (($119) + 2)|0;
  HEAP32[$6>>2] = $144;
  if (!($143)) {
   continue;
  }
  $145 = HEAP32[$21>>2]|0;
  $146 = ($145|0)>(-1);
  if ($146) {
   $147 = HEAP32[$7>>2]|0;
   $148 = (($147) + ($145)|0);
   $150 = $148;
  } else {
   $150 = 0;
  }
  $149 = (($144) - ($145))|0;
  __tr_flush_block($0,$150,$149,0);
  $151 = HEAP32[$6>>2]|0;
  HEAP32[$21>>2] = $151;
  $152 = HEAP32[$0>>2]|0;
  $153 = ((($152)) + 28|0);
  $154 = HEAP32[$153>>2]|0;
  __tr_flush_bits($154);
  $155 = ((($154)) + 20|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($152)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156>>>0)>($158>>>0);
  $$$i = $159 ? $158 : $156;
  $160 = ($$$i|0)==(0);
  if (!($160)) {
   $161 = ((($152)) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ((($154)) + 16|0);
   $164 = HEAP32[$163>>2]|0;
   _memcpy(($162|0),($164|0),($$$i|0))|0;
   $165 = HEAP32[$161>>2]|0;
   $166 = (($165) + ($$$i)|0);
   HEAP32[$161>>2] = $166;
   $167 = HEAP32[$163>>2]|0;
   $168 = (($167) + ($$$i)|0);
   HEAP32[$163>>2] = $168;
   $169 = ((($152)) + 20|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + ($$$i))|0;
   HEAP32[$169>>2] = $171;
   $172 = HEAP32[$157>>2]|0;
   $173 = (($172) - ($$$i))|0;
   HEAP32[$157>>2] = $173;
   $174 = HEAP32[$155>>2]|0;
   $175 = (($174) - ($$$i))|0;
   HEAP32[$155>>2] = $175;
   $176 = ($175|0)==(0);
   if ($176) {
    $177 = ((($154)) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    HEAP32[$163>>2] = $178;
   }
  }
  $179 = HEAP32[$0>>2]|0;
  $180 = ((($179)) + 16|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)==(0);
  if ($182) {
   $$2 = 0;
   label = 55;
   break;
  }
 }
 if ((label|0) == 38) {
  $251 = HEAP32[$20>>2]|0;
  $252 = ($251|0)==(0);
  if (!($252)) {
   $253 = HEAP32[$6>>2]|0;
   $254 = (($253) + -1)|0;
   $255 = HEAP32[$7>>2]|0;
   $256 = (($255) + ($254)|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = HEAP32[$16>>2]|0;
   $259 = HEAP32[$17>>2]|0;
   $260 = (($259) + ($258<<1)|0);
   HEAP16[$260>>1] = 0;
   $261 = (($258) + 1)|0;
   HEAP32[$16>>2] = $261;
   $262 = HEAP32[$18>>2]|0;
   $263 = (($262) + ($258)|0);
   HEAP8[$263>>0] = $257;
   $264 = $257&255;
   $265 = (((($0)) + 148|0) + ($264<<2)|0);
   $266 = HEAP16[$265>>1]|0;
   $267 = (($266) + 1)<<16>>16;
   HEAP16[$265>>1] = $267;
   HEAP32[$20>>2] = 0;
  }
  $268 = HEAP32[$6>>2]|0;
  $269 = ($268>>>0)<(2);
  $$ = $269 ? $268 : 2;
  $270 = ((($0)) + 5812|0);
  HEAP32[$270>>2] = $$;
  $271 = ($1|0)==(4);
  if ($271) {
   $272 = HEAP32[$21>>2]|0;
   $273 = ($272|0)>(-1);
   if ($273) {
    $274 = HEAP32[$7>>2]|0;
    $275 = (($274) + ($272)|0);
    $277 = $275;
   } else {
    $277 = 0;
   }
   $276 = (($268) - ($272))|0;
   __tr_flush_block($0,$277,$276,1);
   $278 = HEAP32[$6>>2]|0;
   HEAP32[$21>>2] = $278;
   $279 = HEAP32[$0>>2]|0;
   $280 = ((($279)) + 28|0);
   $281 = HEAP32[$280>>2]|0;
   __tr_flush_bits($281);
   $282 = ((($281)) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ((($279)) + 16|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($283>>>0)>($285>>>0);
   $$$i175 = $286 ? $285 : $283;
   $287 = ($$$i175|0)==(0);
   if (!($287)) {
    $288 = ((($279)) + 12|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = ((($281)) + 16|0);
    $291 = HEAP32[$290>>2]|0;
    _memcpy(($289|0),($291|0),($$$i175|0))|0;
    $292 = HEAP32[$288>>2]|0;
    $293 = (($292) + ($$$i175)|0);
    HEAP32[$288>>2] = $293;
    $294 = HEAP32[$290>>2]|0;
    $295 = (($294) + ($$$i175)|0);
    HEAP32[$290>>2] = $295;
    $296 = ((($279)) + 20|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + ($$$i175))|0;
    HEAP32[$296>>2] = $298;
    $299 = HEAP32[$284>>2]|0;
    $300 = (($299) - ($$$i175))|0;
    HEAP32[$284>>2] = $300;
    $301 = HEAP32[$282>>2]|0;
    $302 = (($301) - ($$$i175))|0;
    HEAP32[$282>>2] = $302;
    $303 = ($302|0)==(0);
    if ($303) {
     $304 = ((($281)) + 8|0);
     $305 = HEAP32[$304>>2]|0;
     HEAP32[$290>>2] = $305;
    }
   }
   $306 = HEAP32[$0>>2]|0;
   $307 = ((($306)) + 16|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = ($308|0)==(0);
   $$172 = $309 ? 2 : 3;
   $$2 = $$172;
   return ($$2|0);
  }
  $310 = HEAP32[$16>>2]|0;
  $311 = ($310|0)==(0);
  if (!($311)) {
   $312 = HEAP32[$21>>2]|0;
   $313 = ($312|0)>(-1);
   if ($313) {
    $314 = HEAP32[$7>>2]|0;
    $315 = (($314) + ($312)|0);
    $317 = $315;
   } else {
    $317 = 0;
   }
   $316 = (($268) - ($312))|0;
   __tr_flush_block($0,$317,$316,0);
   $318 = HEAP32[$6>>2]|0;
   HEAP32[$21>>2] = $318;
   $319 = HEAP32[$0>>2]|0;
   $320 = ((($319)) + 28|0);
   $321 = HEAP32[$320>>2]|0;
   __tr_flush_bits($321);
   $322 = ((($321)) + 20|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = ((($319)) + 16|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ($323>>>0)>($325>>>0);
   $$$i177 = $326 ? $325 : $323;
   $327 = ($$$i177|0)==(0);
   if (!($327)) {
    $328 = ((($319)) + 12|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = ((($321)) + 16|0);
    $331 = HEAP32[$330>>2]|0;
    _memcpy(($329|0),($331|0),($$$i177|0))|0;
    $332 = HEAP32[$328>>2]|0;
    $333 = (($332) + ($$$i177)|0);
    HEAP32[$328>>2] = $333;
    $334 = HEAP32[$330>>2]|0;
    $335 = (($334) + ($$$i177)|0);
    HEAP32[$330>>2] = $335;
    $336 = ((($319)) + 20|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = (($337) + ($$$i177))|0;
    HEAP32[$336>>2] = $338;
    $339 = HEAP32[$324>>2]|0;
    $340 = (($339) - ($$$i177))|0;
    HEAP32[$324>>2] = $340;
    $341 = HEAP32[$322>>2]|0;
    $342 = (($341) - ($$$i177))|0;
    HEAP32[$322>>2] = $342;
    $343 = ($342|0)==(0);
    if ($343) {
     $344 = ((($321)) + 8|0);
     $345 = HEAP32[$344>>2]|0;
     HEAP32[$330>>2] = $345;
    }
   }
   $346 = HEAP32[$0>>2]|0;
   $347 = ((($346)) + 16|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ($348|0)==(0);
   if ($349) {
    $$2 = 0;
    return ($$2|0);
   }
  }
  $$2 = 1;
  return ($$2|0);
 }
 else if ((label|0) == 55) {
  return ($$2|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$ = 0, $$$i = 0, $$0$i = 0, $$0101 = 0, $$0102 = 0, $$025$i = 0, $$027$i = 0, $$1$i = 0, $$103 = 0, $$128$i = 0, $$pre = 0, $$pre108 = 0, $$pre109 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = ((($0)) + 116|0);
 $5 = ((($0)) + 108|0);
 $6 = (($2) + -262)|0;
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 5812|0);
 $9 = ((($0)) + 72|0);
 $10 = ((($0)) + 88|0);
 $11 = ((($0)) + 84|0);
 $12 = ((($0)) + 68|0);
 $13 = ((($0)) + 52|0);
 $14 = ((($0)) + 64|0);
 $15 = ((($0)) + 112|0);
 $16 = ((($0)) + 92|0);
 $17 = ((($0)) + 76|0);
 $$pre = HEAP32[$4>>2]|0;
 $20 = $$pre;$24 = $2;
 while(1) {
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) - ($20))|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = (($6) + ($24))|0;
  $25 = ($21>>>0)<($23>>>0);
  if ($25) {
   $$0101 = $22;$66 = $21;
  } else {
   $26 = HEAP32[$7>>2]|0;
   $27 = (($26) + ($2)|0);
   $28 = (($2) - ($22))|0;
   _memcpy(($26|0),($27|0),($28|0))|0;
   $29 = HEAP32[$15>>2]|0;
   $30 = (($29) - ($2))|0;
   HEAP32[$15>>2] = $30;
   $31 = HEAP32[$5>>2]|0;
   $32 = (($31) - ($2))|0;
   HEAP32[$5>>2] = $32;
   $33 = HEAP32[$16>>2]|0;
   $34 = (($33) - ($2))|0;
   HEAP32[$16>>2] = $34;
   $35 = HEAP32[$1>>2]|0;
   $36 = HEAP32[$17>>2]|0;
   $37 = HEAP32[$12>>2]|0;
   $38 = (($37) + ($36<<1)|0);
   $$0$i = $36;$$027$i = $38;
   while(1) {
    $39 = ((($$027$i)) + -2|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = ($41>>>0)<($35>>>0);
    $43 = (($41) - ($35))|0;
    $44 = $43&65535;
    $45 = $42 ? 0 : $44;
    HEAP16[$39>>1] = $45;
    $46 = (($$0$i) + -1)|0;
    $47 = ($46|0)==(0);
    if ($47) {
     break;
    } else {
     $$0$i = $46;$$027$i = $39;
    }
   }
   $48 = HEAP32[$14>>2]|0;
   $49 = (($48) + ($35<<1)|0);
   $$1$i = $35;$$128$i = $49;
   while(1) {
    $50 = ((($$128$i)) + -2|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = $51&65535;
    $53 = ($52>>>0)<($35>>>0);
    $54 = (($52) - ($35))|0;
    $55 = $54&65535;
    $56 = $53 ? 0 : $55;
    HEAP16[$50>>1] = $56;
    $57 = (($$1$i) + -1)|0;
    $58 = ($57|0)==(0);
    if ($58) {
     break;
    } else {
     $$1$i = $57;$$128$i = $50;
    }
   }
   $59 = (($22) + ($2))|0;
   $$0101 = $59;$66 = $32;
  }
  $60 = HEAP32[$0>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0);
  if ($63) {
   break;
  }
  $64 = HEAP32[$7>>2]|0;
  $65 = (($64) + ($66)|0);
  $67 = HEAP32[$4>>2]|0;
  $68 = (($65) + ($67)|0);
  $69 = ($62>>>0)>($$0101>>>0);
  $$$i = $69 ? $$0101 : $62;
  $70 = ($$$i|0)==(0);
  if ($70) {
   $$025$i = 0;$89 = $67;
  } else {
   $71 = (($62) - ($$$i))|0;
   HEAP32[$61>>2] = $71;
   $72 = HEAP32[$60>>2]|0;
   _memcpy(($68|0),($72|0),($$$i|0))|0;
   $73 = ((($60)) + 28|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   switch ($76|0) {
   case 1:  {
    $77 = ((($60)) + 48|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_adler32($78,$68,$$$i)|0);
    HEAP32[$77>>2] = $79;
    break;
   }
   case 2:  {
    $80 = ((($60)) + 48|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_crc32($81,$68,$$$i)|0);
    HEAP32[$80>>2] = $82;
    break;
   }
   default: {
   }
   }
   $83 = HEAP32[$60>>2]|0;
   $84 = (($83) + ($$$i)|0);
   HEAP32[$60>>2] = $84;
   $85 = ((($60)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($$$i))|0;
   HEAP32[$85>>2] = $87;
   $$pre109 = HEAP32[$4>>2]|0;
   $$025$i = $$$i;$89 = $$pre109;
  }
  $88 = (($89) + ($$025$i))|0;
  HEAP32[$4>>2] = $88;
  $90 = HEAP32[$8>>2]|0;
  $91 = (($90) + ($88))|0;
  $92 = ($91>>>0)>(2);
  L20: do {
   if ($92) {
    $93 = HEAP32[$5>>2]|0;
    $94 = (($93) - ($90))|0;
    $95 = HEAP32[$7>>2]|0;
    $96 = (($95) + ($94)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    HEAP32[$9>>2] = $98;
    $99 = HEAP32[$10>>2]|0;
    $100 = $98 << $99;
    $101 = (($94) + 1)|0;
    $102 = (($95) + ($101)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $104 ^ $100;
    $106 = HEAP32[$11>>2]|0;
    $107 = $105 & $106;
    HEAP32[$9>>2] = $107;
    $$0102 = $94;$108 = $90;$111 = $107;
    while(1) {
     $109 = ($108|0)==(0);
     if ($109) {
      break L20;
     }
     $110 = $111 << $99;
     $112 = (($$0102) + 2)|0;
     $113 = (($95) + ($112)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 ^ $110;
     $117 = $116 & $106;
     HEAP32[$9>>2] = $117;
     $118 = HEAP32[$12>>2]|0;
     $119 = (($118) + ($117<<1)|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = HEAP32[$13>>2]|0;
     $122 = $121 & $$0102;
     $123 = HEAP32[$14>>2]|0;
     $124 = (($123) + ($122<<1)|0);
     HEAP16[$124>>1] = $120;
     $125 = $$0102&65535;
     HEAP16[$119>>1] = $125;
     $126 = (($$0102) + 1)|0;
     $127 = (($108) + -1)|0;
     HEAP32[$8>>2] = $127;
     $128 = (($88) + ($127))|0;
     $129 = ($128>>>0)<(3);
     if ($129) {
      break;
     } else {
      $$0102 = $126;$108 = $127;$111 = $117;
     }
    }
   }
  } while(0);
  $130 = ($88>>>0)<(262);
  if (!($130)) {
   break;
  }
  $131 = HEAP32[$0>>2]|0;
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)==(0);
  if ($134) {
   break;
  }
  $$pre108 = HEAP32[$1>>2]|0;
  $20 = $88;$24 = $$pre108;
 }
 $135 = ((($0)) + 5824|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = HEAP32[$3>>2]|0;
 $138 = ($137>>>0)>($136>>>0);
 if (!($138)) {
  return;
 }
 $139 = HEAP32[$5>>2]|0;
 $140 = HEAP32[$4>>2]|0;
 $141 = (($140) + ($139))|0;
 $142 = ($136>>>0)<($141>>>0);
 if ($142) {
  $143 = (($137) - ($141))|0;
  $144 = ($143>>>0)>(258);
  $$ = $144 ? 258 : $143;
  $145 = HEAP32[$7>>2]|0;
  $146 = (($145) + ($141)|0);
  _memset(($146|0),0,($$|0))|0;
  $147 = (($$) + ($141))|0;
  HEAP32[$135>>2] = $147;
  return;
 }
 $148 = (($141) + 258)|0;
 $149 = ($148>>>0)>($136>>>0);
 if (!($149)) {
  return;
 }
 $150 = (($148) - ($136))|0;
 $151 = (($137) - ($136))|0;
 $152 = ($150>>>0)>($151>>>0);
 $$103 = $152 ? $151 : $150;
 $153 = HEAP32[$7>>2]|0;
 $154 = (($153) + ($136)|0);
 _memset(($154|0),0,($$103|0))|0;
 $155 = HEAP32[$135>>2]|0;
 $156 = (($155) + ($$103))|0;
 HEAP32[$135>>2] = $156;
 return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2116 = 0, $$0 = 0, $$0105 = 0, $$0108 = 0, $$0109 = 0, $$0114 = 0, $$1 = 0, $$1106 = 0, $$1110 = 0, $$1112$add = 0, $$1112$idx = 0, $$1112$ptr = 0, $$1115 = 0, $$118 = 0, $$2 = 0, $$2116 = 0, $$ptr = 0, $$ptr120 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -262)|0;
 $16 = ($7>>>0)>($15>>>0);
 $17 = (($7) - ($15))|0;
 $$ = $16 ? $17 : 0;
 $18 = ((($0)) + 64|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $$ptr120 = ((($8)) + 258|0);
 $22 = (($10) + -1)|0;
 $23 = (($8) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($8) + ($10)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ((($0)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($10>>>0)<($28>>>0);
 $30 = $3 >>> 2;
 $$0109 = $29 ? $3 : $30;
 $31 = ((($0)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($12>>>0)>($32>>>0);
 $$118 = $33 ? $32 : $12;
 $34 = ((($0)) + 112|0);
 $35 = ((($8)) + 1|0);
 $36 = $$ptr120;
 $$0 = $26;$$0105 = $24;$$0108 = $1;$$0114 = $10;$$1110 = $$0109;
 while(1) {
  $37 = (($5) + ($$0108)|0);
  $38 = (($37) + ($$0114)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==($$0<<24>>24);
  if ($40) {
   $41 = (($$0114) + -1)|0;
   $42 = (($37) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==($$0105<<24>>24);
   if ($44) {
    $45 = HEAP8[$37>>0]|0;
    $46 = HEAP8[$8>>0]|0;
    $47 = ($45<<24>>24)==($46<<24>>24);
    if ($47) {
     $48 = ((($37)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = HEAP8[$35>>0]|0;
     $51 = ($49<<24>>24)==($50<<24>>24);
     if ($51) {
      $$1112$idx = 2;$55 = $48;
      while(1) {
       $$1112$ptr = (($8) + ($$1112$idx)|0);
       $52 = ((($$1112$ptr)) + 1|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = ((($55)) + 2|0);
       $56 = HEAP8[$54>>0]|0;
       $57 = ($53<<24>>24)==($56<<24>>24);
       if (!($57)) {
        $$2 = $52;
        break;
       }
       $58 = ((($$1112$ptr)) + 2|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = ((($55)) + 3|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($59<<24>>24)==($61<<24>>24);
       if (!($62)) {
        $$2 = $58;
        break;
       }
       $63 = ((($$1112$ptr)) + 3|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ((($55)) + 4|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($64<<24>>24)==($66<<24>>24);
       if (!($67)) {
        $$2 = $63;
        break;
       }
       $68 = ((($$1112$ptr)) + 4|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ((($55)) + 5|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($69<<24>>24)==($71<<24>>24);
       if (!($72)) {
        $$2 = $68;
        break;
       }
       $73 = ((($$1112$ptr)) + 5|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ((($55)) + 6|0);
       $76 = HEAP8[$75>>0]|0;
       $77 = ($74<<24>>24)==($76<<24>>24);
       if (!($77)) {
        $$2 = $73;
        break;
       }
       $78 = ((($$1112$ptr)) + 6|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ((($55)) + 7|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($79<<24>>24)==($81<<24>>24);
       if (!($82)) {
        $$2 = $78;
        break;
       }
       $83 = ((($$1112$ptr)) + 7|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ((($55)) + 8|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = ($84<<24>>24)==($86<<24>>24);
       if (!($87)) {
        $$2 = $83;
        break;
       }
       $$1112$add = (($$1112$idx) + 8)|0;
       $$ptr = (($8) + ($$1112$add)|0);
       $88 = HEAP8[$$ptr>>0]|0;
       $89 = ((($55)) + 9|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ($88<<24>>24)==($90<<24>>24);
       $92 = ($$1112$add|0)<(258);
       $or$cond = $92 & $91;
       if ($or$cond) {
        $$1112$idx = $$1112$add;$55 = $85;
       } else {
        $$2 = $$ptr;
        break;
       }
      }
      $93 = $$2;
      $94 = (($93) - ($36))|0;
      $95 = (($94) + 258)|0;
      $96 = ($95|0)>($$0114|0);
      if ($96) {
       HEAP32[$34>>2] = $$0108;
       $97 = ($95|0)<($$118|0);
       if (!($97)) {
        $$2116 = $95;
        label = 19;
        break;
       }
       $98 = (($94) + 257)|0;
       $99 = (($8) + ($98)|0);
       $100 = HEAP8[$99>>0]|0;
       $101 = (($8) + ($95)|0);
       $102 = HEAP8[$101>>0]|0;
       $$1 = $102;$$1106 = $100;$$1115 = $95;
      } else {
       $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
      }
     } else {
      $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
     }
    } else {
     $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
    }
   } else {
    $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
   }
  } else {
   $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
  }
  $103 = $$0108 & $21;
  $104 = (($19) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = ($106>>>0)>($$>>>0);
  if (!($107)) {
   $$2116 = $$1115;
   label = 19;
   break;
  }
  $108 = (($$1110) + -1)|0;
  $109 = ($108|0)==(0);
  if ($109) {
   $$2116 = $$1115;
   label = 19;
   break;
  } else {
   $$0 = $$1;$$0105 = $$1106;$$0108 = $106;$$0114 = $$1115;$$1110 = $108;
  }
 }
 if ((label|0) == 19) {
  $110 = ($$2116>>>0)>($32>>>0);
  $$$2116 = $110 ? $32 : $$2116;
  return ($$$2116|0);
 }
 return (0)|0;
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$$i$i424 = 0, $$$i138$i = 0, $$$i140$i = 0, $$$i403 = 0, $$$i405 = 0, $$$i407 = 0, $$$i409 = 0, $$$i411 = 0, $$$i413 = 0, $$$i415 = 0, $$$i417 = 0, $$$i419 = 0, $$$i421 = 0, $$$i426 = 0, $$$i52$i = 0, $$$i54$i = 0, $$0128$i = 0;
 var $$0382 = 0, $$0385 = 0, $$0387 = 0, $$0388$lcssa = 0, $$0388454 = 0, $$0390$lcssa = 0, $$1$i = 0, $$137$i = 0, $$1383 = 0, $$1386 = 0, $$14 = 0, $$392 = 0, $$393 = 0, $$394 = 0, $$add$i = 0, $$add130$i = 0, $$idx$i = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr428 = 0;
 var $$pr430 = 0, $$pr440 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi479Z2D = 0, $$pre$phi481Z2D = 0, $$pre$phi483Z2D = 0, $$pre$phi485Z2D = 0, $$pre459 = 0, $$pre460 = 0, $$pre461 = 0, $$pre462 = 0, $$pre463 = 0, $$pre469 = 0, $$pre471 = 0, $$pre477 = 0, $$pre478 = 0, $$pre480 = 0, $$pre482 = 0, $$pre484 = 0;
 var $$ptr$i = 0, $$ptr131$i = 0, $$ptr132$i = 0, $$ptr133$i = 0, $$ptr135$i = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond136$i = 0, $or$cond395 = 0, $or$cond396 = 0;
 var $or$cond398 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$14 = -2;
  return ($$14|0);
 }
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$14 = -2;
  return ($$14|0);
 }
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$14 = -2;
  return ($$14|0);
 }
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$14 = -2;
  return ($$14|0);
 }
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)==($0|0);
 if (!($13)) {
  $$14 = -2;
  return ($$14|0);
 }
 $14 = ((($10)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 switch ($15|0) {
 case 666: case 113: case 103: case 91: case 73: case 69: case 57: case 42:  {
  break;
 }
 default: {
  $$14 = -2;
  return ($$14|0);
 }
 }
 $16 = ($1>>>0)>(5);
 if ($16) {
  $$14 = -2;
  return ($$14|0);
 }
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if (!($19)) {
   $20 = ((($0)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if (!($22)) {
    $23 = HEAP32[$0>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     break;
    }
   }
   $25 = ($15|0)==(666);
   $26 = ($1|0)!=(4);
   $or$cond10 = $26 & $25;
   if (!($or$cond10)) {
    $29 = ((($0)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = HEAP32[(1620)>>2]|0;
     $33 = ((($0)) + 24|0);
     HEAP32[$33>>2] = $32;
     $$14 = -5;
     return ($$14|0);
    }
    $34 = ((($10)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$34>>2] = $1;
    $36 = ((($10)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    do {
     if ($38) {
      if ($22) {
       $62 = $1 << 1;
       $63 = ($1|0)>(4);
       $64 = $63 ? 9 : 0;
       $65 = (($62) - ($64))|0;
       $66 = $35 << 1;
       $67 = ($35|0)>(4);
       $68 = $67 ? 9 : 0;
       $69 = (($66) - ($68))|0;
       $70 = ($65|0)<=($69|0);
       $or$cond12 = $26 & $70;
       if ($or$cond12) {
        $71 = HEAP32[(1620)>>2]|0;
        $72 = ((($0)) + 24|0);
        HEAP32[$72>>2] = $71;
        $$14 = -5;
        return ($$14|0);
       } else {
        $$pr428 = $15;$100 = 0;
       }
      } else {
       $$pr428 = $15;$100 = 0;
      }
     } else {
      __tr_flush_bits($10);
      $39 = HEAP32[$36>>2]|0;
      $40 = HEAP32[$29>>2]|0;
      $41 = ($39>>>0)>($40>>>0);
      $$$i403 = $41 ? $40 : $39;
      $42 = ($$$i403|0)==(0);
      if ($42) {
       $1228 = $39;$60 = $40;
      } else {
       $43 = HEAP32[$17>>2]|0;
       $44 = ((($10)) + 16|0);
       $45 = HEAP32[$44>>2]|0;
       _memcpy(($43|0),($45|0),($$$i403|0))|0;
       $46 = HEAP32[$17>>2]|0;
       $47 = (($46) + ($$$i403)|0);
       HEAP32[$17>>2] = $47;
       $48 = HEAP32[$44>>2]|0;
       $49 = (($48) + ($$$i403)|0);
       HEAP32[$44>>2] = $49;
       $50 = ((($0)) + 20|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($51) + ($$$i403))|0;
       HEAP32[$50>>2] = $52;
       $53 = HEAP32[$29>>2]|0;
       $54 = (($53) - ($$$i403))|0;
       HEAP32[$29>>2] = $54;
       $55 = HEAP32[$36>>2]|0;
       $56 = (($55) - ($$$i403))|0;
       HEAP32[$36>>2] = $56;
       $57 = ($56|0)==(0);
       if ($57) {
        $58 = ((($10)) + 8|0);
        $59 = HEAP32[$58>>2]|0;
        HEAP32[$44>>2] = $59;
        $1228 = 0;$60 = $54;
       } else {
        $1228 = $56;$60 = $54;
       }
      }
      $61 = ($60|0)==(0);
      if (!($61)) {
       $$pre = HEAP32[$14>>2]|0;
       $$pr428 = $$pre;$100 = $1228;
       break;
      }
      HEAP32[$34>>2] = -1;
      $$14 = 0;
      return ($$14|0);
     }
    } while(0);
    L47: do {
     switch ($$pr428|0) {
     case 666:  {
      $73 = HEAP32[$20>>2]|0;
      $74 = ($73|0)==(0);
      if ($74) {
       label = 124;
      } else {
       $75 = HEAP32[(1620)>>2]|0;
       $76 = ((($0)) + 24|0);
       HEAP32[$76>>2] = $75;
       $$14 = -5;
       return ($$14|0);
      }
      break;
     }
     case 42:  {
      $77 = ((($10)) + 48|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $78 << 12;
      $80 = (($79) + -30720)|0;
      $81 = ((($10)) + 136|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)>(1);
      if ($83) {
       $$0387 = 0;
      } else {
       $84 = ((($10)) + 132|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)<(2);
       if ($86) {
        $$0387 = 0;
       } else {
        $87 = ($85|0)<(6);
        if ($87) {
         $$0387 = 64;
        } else {
         $88 = ($85|0)==(6);
         $$ = $88 ? 128 : 192;
         $$0387 = $$;
        }
       }
      }
      $89 = $$0387 | $80;
      $90 = ((($10)) + 108|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)==(0);
      $93 = $89 | 32;
      $94 = $92 ? $89 : $93;
      $95 = (($94>>>0) % 31)&-1;
      $$392 = $95 | $94;
      $96 = $$392 ^ 31;
      $97 = $94 >>> 8;
      $98 = $97&255;
      $99 = (($100) + 1)|0;
      HEAP32[$36>>2] = $99;
      $101 = ((($10)) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + ($100)|0);
      HEAP8[$103>>0] = $98;
      $104 = $96&255;
      $105 = HEAP32[$36>>2]|0;
      $106 = (($105) + 1)|0;
      HEAP32[$36>>2] = $106;
      $107 = HEAP32[$101>>2]|0;
      $108 = (($107) + ($105)|0);
      HEAP8[$108>>0] = $104;
      $109 = HEAP32[$90>>2]|0;
      $110 = ($109|0)==(0);
      $$pre477 = ((($0)) + 48|0);
      if (!($110)) {
       $111 = HEAP32[$$pre477>>2]|0;
       $112 = $111 >>> 16;
       $113 = $111 >>> 24;
       $114 = $113&255;
       $115 = HEAP32[$36>>2]|0;
       $116 = (($115) + 1)|0;
       HEAP32[$36>>2] = $116;
       $117 = HEAP32[$101>>2]|0;
       $118 = (($117) + ($115)|0);
       HEAP8[$118>>0] = $114;
       $119 = $112&255;
       $120 = HEAP32[$36>>2]|0;
       $121 = (($120) + 1)|0;
       HEAP32[$36>>2] = $121;
       $122 = HEAP32[$101>>2]|0;
       $123 = (($122) + ($120)|0);
       HEAP8[$123>>0] = $119;
       $124 = HEAP32[$$pre477>>2]|0;
       $125 = $124 >>> 8;
       $126 = $125&255;
       $127 = HEAP32[$36>>2]|0;
       $128 = (($127) + 1)|0;
       HEAP32[$36>>2] = $128;
       $129 = HEAP32[$101>>2]|0;
       $130 = (($129) + ($127)|0);
       HEAP8[$130>>0] = $126;
       $131 = $124&255;
       $132 = HEAP32[$36>>2]|0;
       $133 = (($132) + 1)|0;
       HEAP32[$36>>2] = $133;
       $134 = HEAP32[$101>>2]|0;
       $135 = (($134) + ($132)|0);
       HEAP8[$135>>0] = $131;
      }
      $136 = (_adler32(0,0,0)|0);
      HEAP32[$$pre477>>2] = $136;
      HEAP32[$14>>2] = 113;
      $137 = HEAP32[$9>>2]|0;
      __tr_flush_bits($137);
      $138 = ((($137)) + 20|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = HEAP32[$29>>2]|0;
      $141 = ($139>>>0)>($140>>>0);
      $$$i409 = $141 ? $140 : $139;
      $142 = ($$$i409|0)==(0);
      if (!($142)) {
       $143 = HEAP32[$17>>2]|0;
       $144 = ((($137)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       _memcpy(($143|0),($145|0),($$$i409|0))|0;
       $146 = HEAP32[$17>>2]|0;
       $147 = (($146) + ($$$i409)|0);
       HEAP32[$17>>2] = $147;
       $148 = HEAP32[$144>>2]|0;
       $149 = (($148) + ($$$i409)|0);
       HEAP32[$144>>2] = $149;
       $150 = ((($0)) + 20|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (($151) + ($$$i409))|0;
       HEAP32[$150>>2] = $152;
       $153 = HEAP32[$29>>2]|0;
       $154 = (($153) - ($$$i409))|0;
       HEAP32[$29>>2] = $154;
       $155 = HEAP32[$138>>2]|0;
       $156 = (($155) - ($$$i409))|0;
       HEAP32[$138>>2] = $156;
       $157 = ($156|0)==(0);
       if ($157) {
        $158 = ((($137)) + 8|0);
        $159 = HEAP32[$158>>2]|0;
        HEAP32[$144>>2] = $159;
       }
      }
      $160 = HEAP32[$36>>2]|0;
      $161 = ($160|0)==(0);
      if ($161) {
       $$pre459 = HEAP32[$14>>2]|0;
       $162 = $$pre459;
       label = 40;
       break L47;
      }
      HEAP32[$34>>2] = -1;
      $$14 = 0;
      return ($$14|0);
      break;
     }
     default: {
      $162 = $$pr428;
      label = 40;
     }
     }
    } while(0);
    if ((label|0) == 40) {
     $163 = ($162|0)==(57);
     do {
      if ($163) {
       $164 = (_crc32(0,0,0)|0);
       $165 = ((($0)) + 48|0);
       HEAP32[$165>>2] = $164;
       $166 = HEAP32[$36>>2]|0;
       $167 = (($166) + 1)|0;
       HEAP32[$36>>2] = $167;
       $168 = ((($10)) + 8|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = (($169) + ($166)|0);
       HEAP8[$170>>0] = 31;
       $171 = HEAP32[$36>>2]|0;
       $172 = (($171) + 1)|0;
       HEAP32[$36>>2] = $172;
       $173 = HEAP32[$168>>2]|0;
       $174 = (($173) + ($171)|0);
       HEAP8[$174>>0] = -117;
       $175 = HEAP32[$36>>2]|0;
       $176 = (($175) + 1)|0;
       HEAP32[$36>>2] = $176;
       $177 = HEAP32[$168>>2]|0;
       $178 = (($177) + ($175)|0);
       HEAP8[$178>>0] = 8;
       $179 = ((($10)) + 28|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if (!($181)) {
        $245 = HEAP32[$180>>2]|0;
        $246 = ($245|0)!=(0);
        $247 = $246&1;
        $248 = ((($180)) + 44|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = ($249|0)!=(0);
        $251 = $250 ? 2 : 0;
        $252 = $251 | $247;
        $253 = ((($180)) + 16|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ($254|0)==(0|0);
        $256 = $255 ? 0 : 4;
        $257 = $252 | $256;
        $258 = ((($180)) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = ($259|0)==(0|0);
        $261 = $260 ? 0 : 8;
        $262 = $257 | $261;
        $263 = ((($180)) + 36|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = ($264|0)==(0|0);
        $266 = $265 ? 0 : 16;
        $267 = $262 | $266;
        $268 = $267&255;
        $269 = HEAP32[$36>>2]|0;
        $270 = (($269) + 1)|0;
        HEAP32[$36>>2] = $270;
        $271 = HEAP32[$168>>2]|0;
        $272 = (($271) + ($269)|0);
        HEAP8[$272>>0] = $268;
        $273 = HEAP32[$179>>2]|0;
        $274 = ((($273)) + 4|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = $275&255;
        $277 = HEAP32[$36>>2]|0;
        $278 = (($277) + 1)|0;
        HEAP32[$36>>2] = $278;
        $279 = HEAP32[$168>>2]|0;
        $280 = (($279) + ($277)|0);
        HEAP8[$280>>0] = $276;
        $281 = HEAP32[$179>>2]|0;
        $282 = ((($281)) + 4|0);
        $283 = HEAP32[$282>>2]|0;
        $284 = $283 >>> 8;
        $285 = $284&255;
        $286 = HEAP32[$36>>2]|0;
        $287 = (($286) + 1)|0;
        HEAP32[$36>>2] = $287;
        $288 = HEAP32[$168>>2]|0;
        $289 = (($288) + ($286)|0);
        HEAP8[$289>>0] = $285;
        $290 = HEAP32[$179>>2]|0;
        $291 = ((($290)) + 4|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $292 >>> 16;
        $294 = $293&255;
        $295 = HEAP32[$36>>2]|0;
        $296 = (($295) + 1)|0;
        HEAP32[$36>>2] = $296;
        $297 = HEAP32[$168>>2]|0;
        $298 = (($297) + ($295)|0);
        HEAP8[$298>>0] = $294;
        $299 = HEAP32[$179>>2]|0;
        $300 = ((($299)) + 4|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $301 >>> 24;
        $303 = $302&255;
        $304 = HEAP32[$36>>2]|0;
        $305 = (($304) + 1)|0;
        HEAP32[$36>>2] = $305;
        $306 = HEAP32[$168>>2]|0;
        $307 = (($306) + ($304)|0);
        HEAP8[$307>>0] = $303;
        $308 = ((($10)) + 132|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = ($309|0)==(9);
        if ($310) {
         $317 = 2;
        } else {
         $311 = ((($10)) + 136|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = ($312|0)>(1);
         $314 = ($309|0)<(2);
         $$394 = $314 | $313;
         $315 = $$394 ? 4 : 0;
         $317 = $315;
        }
        $316 = $317&255;
        $318 = HEAP32[$36>>2]|0;
        $319 = (($318) + 1)|0;
        HEAP32[$36>>2] = $319;
        $320 = HEAP32[$168>>2]|0;
        $321 = (($320) + ($318)|0);
        HEAP8[$321>>0] = $316;
        $322 = HEAP32[$179>>2]|0;
        $323 = ((($322)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = $324&255;
        $326 = HEAP32[$36>>2]|0;
        $327 = (($326) + 1)|0;
        HEAP32[$36>>2] = $327;
        $328 = HEAP32[$168>>2]|0;
        $329 = (($328) + ($326)|0);
        HEAP8[$329>>0] = $325;
        $330 = HEAP32[$179>>2]|0;
        $331 = ((($330)) + 16|0);
        $332 = HEAP32[$331>>2]|0;
        $333 = ($332|0)==(0|0);
        if ($333) {
         $351 = $330;
        } else {
         $334 = ((($330)) + 20|0);
         $335 = HEAP32[$334>>2]|0;
         $336 = $335&255;
         $337 = HEAP32[$36>>2]|0;
         $338 = (($337) + 1)|0;
         HEAP32[$36>>2] = $338;
         $339 = HEAP32[$168>>2]|0;
         $340 = (($339) + ($337)|0);
         HEAP8[$340>>0] = $336;
         $341 = HEAP32[$179>>2]|0;
         $342 = ((($341)) + 20|0);
         $343 = HEAP32[$342>>2]|0;
         $344 = $343 >>> 8;
         $345 = $344&255;
         $346 = HEAP32[$36>>2]|0;
         $347 = (($346) + 1)|0;
         HEAP32[$36>>2] = $347;
         $348 = HEAP32[$168>>2]|0;
         $349 = (($348) + ($346)|0);
         HEAP8[$349>>0] = $345;
         $$pre460 = HEAP32[$179>>2]|0;
         $351 = $$pre460;
        }
        $350 = ((($351)) + 44|0);
        $352 = HEAP32[$350>>2]|0;
        $353 = ($352|0)==(0);
        if (!($353)) {
         $354 = HEAP32[$165>>2]|0;
         $355 = HEAP32[$168>>2]|0;
         $356 = HEAP32[$36>>2]|0;
         $357 = (_crc32($354,$355,$356)|0);
         HEAP32[$165>>2] = $357;
        }
        $358 = ((($10)) + 32|0);
        HEAP32[$358>>2] = 0;
        HEAP32[$14>>2] = 69;
        $$pre$phi479Z2D = $179;
        label = 59;
        break;
       }
       $182 = HEAP32[$36>>2]|0;
       $183 = (($182) + 1)|0;
       HEAP32[$36>>2] = $183;
       $184 = HEAP32[$168>>2]|0;
       $185 = (($184) + ($182)|0);
       HEAP8[$185>>0] = 0;
       $186 = HEAP32[$36>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[$36>>2] = $187;
       $188 = HEAP32[$168>>2]|0;
       $189 = (($188) + ($186)|0);
       HEAP8[$189>>0] = 0;
       $190 = HEAP32[$36>>2]|0;
       $191 = (($190) + 1)|0;
       HEAP32[$36>>2] = $191;
       $192 = HEAP32[$168>>2]|0;
       $193 = (($192) + ($190)|0);
       HEAP8[$193>>0] = 0;
       $194 = HEAP32[$36>>2]|0;
       $195 = (($194) + 1)|0;
       HEAP32[$36>>2] = $195;
       $196 = HEAP32[$168>>2]|0;
       $197 = (($196) + ($194)|0);
       HEAP8[$197>>0] = 0;
       $198 = HEAP32[$36>>2]|0;
       $199 = (($198) + 1)|0;
       HEAP32[$36>>2] = $199;
       $200 = HEAP32[$168>>2]|0;
       $201 = (($200) + ($198)|0);
       HEAP8[$201>>0] = 0;
       $202 = ((($10)) + 132|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($203|0)==(9);
       if ($204) {
        $211 = 2;
       } else {
        $205 = ((($10)) + 136|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)>(1);
        $208 = ($203|0)<(2);
        $$393 = $208 | $207;
        $209 = $$393 ? 4 : 0;
        $211 = $209;
       }
       $210 = $211&255;
       $212 = HEAP32[$36>>2]|0;
       $213 = (($212) + 1)|0;
       HEAP32[$36>>2] = $213;
       $214 = HEAP32[$168>>2]|0;
       $215 = (($214) + ($212)|0);
       HEAP8[$215>>0] = $210;
       $216 = HEAP32[$36>>2]|0;
       $217 = (($216) + 1)|0;
       HEAP32[$36>>2] = $217;
       $218 = HEAP32[$168>>2]|0;
       $219 = (($218) + ($216)|0);
       HEAP8[$219>>0] = 3;
       HEAP32[$14>>2] = 113;
       $220 = HEAP32[$9>>2]|0;
       __tr_flush_bits($220);
       $221 = ((($220)) + 20|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = HEAP32[$29>>2]|0;
       $224 = ($222>>>0)>($223>>>0);
       $$$i411 = $224 ? $223 : $222;
       $225 = ($$$i411|0)==(0);
       if (!($225)) {
        $226 = HEAP32[$17>>2]|0;
        $227 = ((($220)) + 16|0);
        $228 = HEAP32[$227>>2]|0;
        _memcpy(($226|0),($228|0),($$$i411|0))|0;
        $229 = HEAP32[$17>>2]|0;
        $230 = (($229) + ($$$i411)|0);
        HEAP32[$17>>2] = $230;
        $231 = HEAP32[$227>>2]|0;
        $232 = (($231) + ($$$i411)|0);
        HEAP32[$227>>2] = $232;
        $233 = ((($0)) + 20|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = (($234) + ($$$i411))|0;
        HEAP32[$233>>2] = $235;
        $236 = HEAP32[$29>>2]|0;
        $237 = (($236) - ($$$i411))|0;
        HEAP32[$29>>2] = $237;
        $238 = HEAP32[$221>>2]|0;
        $239 = (($238) - ($$$i411))|0;
        HEAP32[$221>>2] = $239;
        $240 = ($239|0)==(0);
        if ($240) {
         $241 = ((($220)) + 8|0);
         $242 = HEAP32[$241>>2]|0;
         HEAP32[$227>>2] = $242;
        }
       }
       $243 = HEAP32[$36>>2]|0;
       $244 = ($243|0)==(0);
       if ($244) {
        $$pr430 = HEAP32[$14>>2]|0;
        $$pr440 = $$pr430;
        label = 57;
        break;
       }
       HEAP32[$34>>2] = -1;
       $$14 = 0;
       return ($$14|0);
      } else {
       $$pr440 = $162;
       label = 57;
      }
     } while(0);
     L95: do {
      if ((label|0) == 57) {
       switch ($$pr440|0) {
       case 69:  {
        $$pre478 = ((($10)) + 28|0);
        $$pre$phi479Z2D = $$pre478;
        label = 59;
        break L95;
        break;
       }
       case 73:  {
        $$pre480 = ((($10)) + 28|0);
        $$pre$phi481Z2D = $$pre480;
        label = 76;
        break L95;
        break;
       }
       case 91:  {
        $$pre482 = ((($10)) + 28|0);
        $$pre$phi483Z2D = $$pre482;
        label = 93;
        break L95;
        break;
       }
       case 103:  {
        $$pre484 = ((($10)) + 28|0);
        $$pre$phi485Z2D = $$pre484;
        label = 110;
        break L95;
        break;
       }
       default: {
        break L95;
       }
       }
      }
     } while(0);
     if ((label|0) == 59) {
      $359 = HEAP32[$$pre$phi479Z2D>>2]|0;
      $360 = ((($359)) + 16|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ($361|0)==(0|0);
      if (!($362)) {
       $363 = HEAP32[$36>>2]|0;
       $364 = ((($359)) + 20|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = $365 & 65535;
       $367 = ((($10)) + 32|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = (($366) - ($368))|0;
       $370 = (($363) + ($369))|0;
       $371 = ((($10)) + 12|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = ($370>>>0)>($372>>>0);
       $374 = ((($10)) + 8|0);
       L106: do {
        if ($373) {
         $375 = ((($0)) + 48|0);
         $376 = ((($0)) + 20|0);
         $$0388454 = $369;$378 = $363;$379 = $372;$383 = $361;$384 = $368;
         while(1) {
          $377 = (($379) - ($378))|0;
          $380 = HEAP32[$374>>2]|0;
          $381 = (($380) + ($378)|0);
          $382 = (($383) + ($384)|0);
          _memcpy(($381|0),($382|0),($377|0))|0;
          $385 = HEAP32[$371>>2]|0;
          HEAP32[$36>>2] = $385;
          $386 = HEAP32[$$pre$phi479Z2D>>2]|0;
          $387 = ((($386)) + 44|0);
          $388 = HEAP32[$387>>2]|0;
          $389 = ($388|0)!=(0);
          $390 = ($385>>>0)>($378>>>0);
          $or$cond = $390 & $389;
          if ($or$cond) {
           $391 = HEAP32[$375>>2]|0;
           $392 = HEAP32[$374>>2]|0;
           $393 = (($392) + ($378)|0);
           $394 = (($385) - ($378))|0;
           $395 = (_crc32($391,$393,$394)|0);
           HEAP32[$375>>2] = $395;
          }
          $396 = HEAP32[$367>>2]|0;
          $397 = (($396) + ($377))|0;
          HEAP32[$367>>2] = $397;
          $398 = HEAP32[$9>>2]|0;
          __tr_flush_bits($398);
          $399 = ((($398)) + 20|0);
          $400 = HEAP32[$399>>2]|0;
          $401 = HEAP32[$29>>2]|0;
          $402 = ($400>>>0)>($401>>>0);
          $$$i413 = $402 ? $401 : $400;
          $403 = ($$$i413|0)==(0);
          do {
           if (!($403)) {
            $404 = HEAP32[$17>>2]|0;
            $405 = ((($398)) + 16|0);
            $406 = HEAP32[$405>>2]|0;
            _memcpy(($404|0),($406|0),($$$i413|0))|0;
            $407 = HEAP32[$17>>2]|0;
            $408 = (($407) + ($$$i413)|0);
            HEAP32[$17>>2] = $408;
            $409 = HEAP32[$405>>2]|0;
            $410 = (($409) + ($$$i413)|0);
            HEAP32[$405>>2] = $410;
            $411 = HEAP32[$376>>2]|0;
            $412 = (($411) + ($$$i413))|0;
            HEAP32[$376>>2] = $412;
            $413 = HEAP32[$29>>2]|0;
            $414 = (($413) - ($$$i413))|0;
            HEAP32[$29>>2] = $414;
            $415 = HEAP32[$399>>2]|0;
            $416 = (($415) - ($$$i413))|0;
            HEAP32[$399>>2] = $416;
            $417 = ($416|0)==(0);
            if (!($417)) {
             break;
            }
            $418 = ((($398)) + 8|0);
            $419 = HEAP32[$418>>2]|0;
            HEAP32[$405>>2] = $419;
           }
          } while(0);
          $420 = HEAP32[$36>>2]|0;
          $421 = ($420|0)==(0);
          if (!($421)) {
           break;
          }
          $422 = (($$0388454) - ($377))|0;
          $423 = HEAP32[$371>>2]|0;
          $424 = ($422>>>0)>($423>>>0);
          $$pre461 = HEAP32[$$pre$phi479Z2D>>2]|0;
          $$phi$trans$insert = ((($$pre461)) + 16|0);
          $$pre462 = HEAP32[$$phi$trans$insert>>2]|0;
          $$pre463 = HEAP32[$367>>2]|0;
          if ($424) {
           $$0388454 = $422;$378 = 0;$379 = $423;$383 = $$pre462;$384 = $$pre463;
          } else {
           $$0388$lcssa = $422;$$0390$lcssa = 0;$428 = $$pre462;$429 = $$pre463;
           break L106;
          }
         }
         HEAP32[$34>>2] = -1;
         $$14 = 0;
         return ($$14|0);
        } else {
         $$0388$lcssa = $369;$$0390$lcssa = $363;$428 = $361;$429 = $368;
        }
       } while(0);
       $425 = HEAP32[$374>>2]|0;
       $426 = (($425) + ($$0390$lcssa)|0);
       $427 = (($428) + ($429)|0);
       _memcpy(($426|0),($427|0),($$0388$lcssa|0))|0;
       $430 = HEAP32[$36>>2]|0;
       $431 = (($430) + ($$0388$lcssa))|0;
       HEAP32[$36>>2] = $431;
       $432 = HEAP32[$$pre$phi479Z2D>>2]|0;
       $433 = ((($432)) + 44|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = ($434|0)!=(0);
       $436 = ($431>>>0)>($$0390$lcssa>>>0);
       $or$cond395 = $436 & $435;
       if ($or$cond395) {
        $437 = ((($0)) + 48|0);
        $438 = HEAP32[$437>>2]|0;
        $439 = HEAP32[$374>>2]|0;
        $440 = (($439) + ($$0390$lcssa)|0);
        $441 = (($431) - ($$0390$lcssa))|0;
        $442 = (_crc32($438,$440,$441)|0);
        HEAP32[$437>>2] = $442;
       }
       HEAP32[$367>>2] = 0;
      }
      HEAP32[$14>>2] = 73;
      $$pre$phi481Z2D = $$pre$phi479Z2D;
      label = 76;
     }
     if ((label|0) == 76) {
      $443 = HEAP32[$$pre$phi481Z2D>>2]|0;
      $444 = ((($443)) + 28|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = ($445|0)==(0|0);
      if (!($446)) {
       $447 = HEAP32[$36>>2]|0;
       $448 = ((($10)) + 12|0);
       $449 = ((($0)) + 48|0);
       $450 = ((($10)) + 8|0);
       $451 = ((($0)) + 20|0);
       $452 = ((($10)) + 32|0);
       $$0385 = $447;$454 = $447;
       while(1) {
        $453 = HEAP32[$448>>2]|0;
        $455 = ($454|0)==($453|0);
        if ($455) {
         $456 = HEAP32[$$pre$phi481Z2D>>2]|0;
         $457 = ((($456)) + 44|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = ($458|0)!=(0);
         $460 = ($454>>>0)>($$0385>>>0);
         $or$cond396 = $460 & $459;
         if ($or$cond396) {
          $461 = HEAP32[$449>>2]|0;
          $462 = HEAP32[$450>>2]|0;
          $463 = (($462) + ($$0385)|0);
          $464 = (($454) - ($$0385))|0;
          $465 = (_crc32($461,$463,$464)|0);
          HEAP32[$449>>2] = $465;
         }
         $466 = HEAP32[$9>>2]|0;
         __tr_flush_bits($466);
         $467 = ((($466)) + 20|0);
         $468 = HEAP32[$467>>2]|0;
         $469 = HEAP32[$29>>2]|0;
         $470 = ($468>>>0)>($469>>>0);
         $$$i415 = $470 ? $469 : $468;
         $471 = ($$$i415|0)==(0);
         do {
          if (!($471)) {
           $472 = HEAP32[$17>>2]|0;
           $473 = ((($466)) + 16|0);
           $474 = HEAP32[$473>>2]|0;
           _memcpy(($472|0),($474|0),($$$i415|0))|0;
           $475 = HEAP32[$17>>2]|0;
           $476 = (($475) + ($$$i415)|0);
           HEAP32[$17>>2] = $476;
           $477 = HEAP32[$473>>2]|0;
           $478 = (($477) + ($$$i415)|0);
           HEAP32[$473>>2] = $478;
           $479 = HEAP32[$451>>2]|0;
           $480 = (($479) + ($$$i415))|0;
           HEAP32[$451>>2] = $480;
           $481 = HEAP32[$29>>2]|0;
           $482 = (($481) - ($$$i415))|0;
           HEAP32[$29>>2] = $482;
           $483 = HEAP32[$467>>2]|0;
           $484 = (($483) - ($$$i415))|0;
           HEAP32[$467>>2] = $484;
           $485 = ($484|0)==(0);
           if (!($485)) {
            break;
           }
           $486 = ((($466)) + 8|0);
           $487 = HEAP32[$486>>2]|0;
           HEAP32[$473>>2] = $487;
          }
         } while(0);
         $488 = HEAP32[$36>>2]|0;
         $489 = ($488|0)==(0);
         if ($489) {
          $$1386 = 0;$498 = 0;
         } else {
          label = 85;
          break;
         }
        } else {
         $$1386 = $$0385;$498 = $454;
        }
        $490 = HEAP32[$452>>2]|0;
        $491 = (($490) + 1)|0;
        HEAP32[$452>>2] = $491;
        $492 = HEAP32[$$pre$phi481Z2D>>2]|0;
        $493 = ((($492)) + 28|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = (($494) + ($490)|0);
        $496 = HEAP8[$495>>0]|0;
        $497 = (($498) + 1)|0;
        HEAP32[$36>>2] = $497;
        $499 = HEAP32[$450>>2]|0;
        $500 = (($499) + ($498)|0);
        HEAP8[$500>>0] = $496;
        $501 = ($496<<24>>24)==(0);
        if ($501) {
         break;
        }
        $$pre469 = HEAP32[$36>>2]|0;
        $$0385 = $$1386;$454 = $$pre469;
       }
       if ((label|0) == 85) {
        HEAP32[$34>>2] = -1;
        $$14 = 0;
        return ($$14|0);
       }
       $502 = HEAP32[$$pre$phi481Z2D>>2]|0;
       $503 = ((($502)) + 44|0);
       $504 = HEAP32[$503>>2]|0;
       $505 = ($504|0)==(0);
       if (!($505)) {
        $506 = HEAP32[$36>>2]|0;
        $507 = ($506>>>0)>($$1386>>>0);
        if ($507) {
         $508 = HEAP32[$449>>2]|0;
         $509 = HEAP32[$450>>2]|0;
         $510 = (($509) + ($$1386)|0);
         $511 = (($506) - ($$1386))|0;
         $512 = (_crc32($508,$510,$511)|0);
         HEAP32[$449>>2] = $512;
        }
       }
       HEAP32[$452>>2] = 0;
      }
      HEAP32[$14>>2] = 91;
      $$pre$phi483Z2D = $$pre$phi481Z2D;
      label = 93;
     }
     if ((label|0) == 93) {
      $513 = HEAP32[$$pre$phi483Z2D>>2]|0;
      $514 = ((($513)) + 36|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if (!($516)) {
       $517 = HEAP32[$36>>2]|0;
       $518 = ((($10)) + 12|0);
       $519 = ((($0)) + 48|0);
       $520 = ((($10)) + 8|0);
       $521 = ((($0)) + 20|0);
       $522 = ((($10)) + 32|0);
       $$0382 = $517;$524 = $517;
       while(1) {
        $523 = HEAP32[$518>>2]|0;
        $525 = ($524|0)==($523|0);
        if ($525) {
         $526 = HEAP32[$$pre$phi483Z2D>>2]|0;
         $527 = ((($526)) + 44|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = ($528|0)!=(0);
         $530 = ($524>>>0)>($$0382>>>0);
         $or$cond398 = $530 & $529;
         if ($or$cond398) {
          $531 = HEAP32[$519>>2]|0;
          $532 = HEAP32[$520>>2]|0;
          $533 = (($532) + ($$0382)|0);
          $534 = (($524) - ($$0382))|0;
          $535 = (_crc32($531,$533,$534)|0);
          HEAP32[$519>>2] = $535;
         }
         $536 = HEAP32[$9>>2]|0;
         __tr_flush_bits($536);
         $537 = ((($536)) + 20|0);
         $538 = HEAP32[$537>>2]|0;
         $539 = HEAP32[$29>>2]|0;
         $540 = ($538>>>0)>($539>>>0);
         $$$i417 = $540 ? $539 : $538;
         $541 = ($$$i417|0)==(0);
         do {
          if (!($541)) {
           $542 = HEAP32[$17>>2]|0;
           $543 = ((($536)) + 16|0);
           $544 = HEAP32[$543>>2]|0;
           _memcpy(($542|0),($544|0),($$$i417|0))|0;
           $545 = HEAP32[$17>>2]|0;
           $546 = (($545) + ($$$i417)|0);
           HEAP32[$17>>2] = $546;
           $547 = HEAP32[$543>>2]|0;
           $548 = (($547) + ($$$i417)|0);
           HEAP32[$543>>2] = $548;
           $549 = HEAP32[$521>>2]|0;
           $550 = (($549) + ($$$i417))|0;
           HEAP32[$521>>2] = $550;
           $551 = HEAP32[$29>>2]|0;
           $552 = (($551) - ($$$i417))|0;
           HEAP32[$29>>2] = $552;
           $553 = HEAP32[$537>>2]|0;
           $554 = (($553) - ($$$i417))|0;
           HEAP32[$537>>2] = $554;
           $555 = ($554|0)==(0);
           if (!($555)) {
            break;
           }
           $556 = ((($536)) + 8|0);
           $557 = HEAP32[$556>>2]|0;
           HEAP32[$543>>2] = $557;
          }
         } while(0);
         $558 = HEAP32[$36>>2]|0;
         $559 = ($558|0)==(0);
         if ($559) {
          $$1383 = 0;$568 = 0;
         } else {
          label = 102;
          break;
         }
        } else {
         $$1383 = $$0382;$568 = $524;
        }
        $560 = HEAP32[$522>>2]|0;
        $561 = (($560) + 1)|0;
        HEAP32[$522>>2] = $561;
        $562 = HEAP32[$$pre$phi483Z2D>>2]|0;
        $563 = ((($562)) + 36|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = (($564) + ($560)|0);
        $566 = HEAP8[$565>>0]|0;
        $567 = (($568) + 1)|0;
        HEAP32[$36>>2] = $567;
        $569 = HEAP32[$520>>2]|0;
        $570 = (($569) + ($568)|0);
        HEAP8[$570>>0] = $566;
        $571 = ($566<<24>>24)==(0);
        if ($571) {
         break;
        }
        $$pre471 = HEAP32[$36>>2]|0;
        $$0382 = $$1383;$524 = $$pre471;
       }
       if ((label|0) == 102) {
        HEAP32[$34>>2] = -1;
        $$14 = 0;
        return ($$14|0);
       }
       $572 = HEAP32[$$pre$phi483Z2D>>2]|0;
       $573 = ((($572)) + 44|0);
       $574 = HEAP32[$573>>2]|0;
       $575 = ($574|0)==(0);
       if (!($575)) {
        $576 = HEAP32[$36>>2]|0;
        $577 = ($576>>>0)>($$1383>>>0);
        if ($577) {
         $578 = HEAP32[$519>>2]|0;
         $579 = HEAP32[$520>>2]|0;
         $580 = (($579) + ($$1383)|0);
         $581 = (($576) - ($$1383))|0;
         $582 = (_crc32($578,$580,$581)|0);
         HEAP32[$519>>2] = $582;
        }
       }
      }
      HEAP32[$14>>2] = 103;
      $$pre$phi485Z2D = $$pre$phi483Z2D;
      label = 110;
     }
     if ((label|0) == 110) {
      $583 = HEAP32[$$pre$phi485Z2D>>2]|0;
      $584 = ((($583)) + 44|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = ($585|0)==(0);
      if (!($586)) {
       $587 = HEAP32[$36>>2]|0;
       $588 = (($587) + 2)|0;
       $589 = ((($10)) + 12|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = ($588>>>0)>($590>>>0);
       do {
        if ($591) {
         $592 = HEAP32[$9>>2]|0;
         __tr_flush_bits($592);
         $593 = ((($592)) + 20|0);
         $594 = HEAP32[$593>>2]|0;
         $595 = HEAP32[$29>>2]|0;
         $596 = ($594>>>0)>($595>>>0);
         $$$i419 = $596 ? $595 : $594;
         $597 = ($$$i419|0)==(0);
         do {
          if (!($597)) {
           $598 = HEAP32[$17>>2]|0;
           $599 = ((($592)) + 16|0);
           $600 = HEAP32[$599>>2]|0;
           _memcpy(($598|0),($600|0),($$$i419|0))|0;
           $601 = HEAP32[$17>>2]|0;
           $602 = (($601) + ($$$i419)|0);
           HEAP32[$17>>2] = $602;
           $603 = HEAP32[$599>>2]|0;
           $604 = (($603) + ($$$i419)|0);
           HEAP32[$599>>2] = $604;
           $605 = ((($0)) + 20|0);
           $606 = HEAP32[$605>>2]|0;
           $607 = (($606) + ($$$i419))|0;
           HEAP32[$605>>2] = $607;
           $608 = HEAP32[$29>>2]|0;
           $609 = (($608) - ($$$i419))|0;
           HEAP32[$29>>2] = $609;
           $610 = HEAP32[$593>>2]|0;
           $611 = (($610) - ($$$i419))|0;
           HEAP32[$593>>2] = $611;
           $612 = ($611|0)==(0);
           if (!($612)) {
            break;
           }
           $613 = ((($592)) + 8|0);
           $614 = HEAP32[$613>>2]|0;
           HEAP32[$599>>2] = $614;
          }
         } while(0);
         $615 = HEAP32[$36>>2]|0;
         $616 = ($615|0)==(0);
         if ($616) {
          $621 = 0;
          break;
         }
         HEAP32[$34>>2] = -1;
         $$14 = 0;
         return ($$14|0);
        } else {
         $621 = $587;
        }
       } while(0);
       $617 = ((($0)) + 48|0);
       $618 = HEAP32[$617>>2]|0;
       $619 = $618&255;
       $620 = (($621) + 1)|0;
       HEAP32[$36>>2] = $620;
       $622 = ((($10)) + 8|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = (($623) + ($621)|0);
       HEAP8[$624>>0] = $619;
       $625 = HEAP32[$617>>2]|0;
       $626 = $625 >>> 8;
       $627 = $626&255;
       $628 = HEAP32[$36>>2]|0;
       $629 = (($628) + 1)|0;
       HEAP32[$36>>2] = $629;
       $630 = HEAP32[$622>>2]|0;
       $631 = (($630) + ($628)|0);
       HEAP8[$631>>0] = $627;
       $632 = (_crc32(0,0,0)|0);
       HEAP32[$617>>2] = $632;
      }
      HEAP32[$14>>2] = 113;
      $633 = HEAP32[$9>>2]|0;
      __tr_flush_bits($633);
      $634 = ((($633)) + 20|0);
      $635 = HEAP32[$634>>2]|0;
      $636 = HEAP32[$29>>2]|0;
      $637 = ($635>>>0)>($636>>>0);
      $$$i421 = $637 ? $636 : $635;
      $638 = ($$$i421|0)==(0);
      if (!($638)) {
       $639 = HEAP32[$17>>2]|0;
       $640 = ((($633)) + 16|0);
       $641 = HEAP32[$640>>2]|0;
       _memcpy(($639|0),($641|0),($$$i421|0))|0;
       $642 = HEAP32[$17>>2]|0;
       $643 = (($642) + ($$$i421)|0);
       HEAP32[$17>>2] = $643;
       $644 = HEAP32[$640>>2]|0;
       $645 = (($644) + ($$$i421)|0);
       HEAP32[$640>>2] = $645;
       $646 = ((($0)) + 20|0);
       $647 = HEAP32[$646>>2]|0;
       $648 = (($647) + ($$$i421))|0;
       HEAP32[$646>>2] = $648;
       $649 = HEAP32[$29>>2]|0;
       $650 = (($649) - ($$$i421))|0;
       HEAP32[$29>>2] = $650;
       $651 = HEAP32[$634>>2]|0;
       $652 = (($651) - ($$$i421))|0;
       HEAP32[$634>>2] = $652;
       $653 = ($652|0)==(0);
       if ($653) {
        $654 = ((($633)) + 8|0);
        $655 = HEAP32[$654>>2]|0;
        HEAP32[$640>>2] = $655;
       }
      }
      $656 = HEAP32[$36>>2]|0;
      $657 = ($656|0)==(0);
      if (!($657)) {
       HEAP32[$34>>2] = -1;
       $$14 = 0;
       return ($$14|0);
      }
     }
     $$pr = HEAP32[$20>>2]|0;
     $658 = ($$pr|0)==(0);
     if ($658) {
      label = 124;
     } else {
      label = 127;
     }
    }
    if ((label|0) == 124) {
     $659 = ((($10)) + 116|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = ($660|0)==(0);
     if ($661) {
      $662 = ($1|0)==(0);
      if (!($662)) {
       $663 = HEAP32[$14>>2]|0;
       $664 = ($663|0)==(666);
       if (!($664)) {
        label = 127;
       }
      }
     } else {
      label = 127;
     }
    }
    do {
     if ((label|0) == 127) {
      $665 = ((($10)) + 132|0);
      $666 = HEAP32[$665>>2]|0;
      $667 = ($666|0)==(0);
      L202: do {
       if ($667) {
        $668 = (_deflate_stored($10,$1)|0);
        $1067 = $668;
        label = 200;
       } else {
        $669 = ((($10)) + 136|0);
        $670 = HEAP32[$669>>2]|0;
        switch ($670|0) {
        case 2:  {
         $671 = ((($10)) + 116|0);
         $672 = ((($10)) + 96|0);
         $673 = ((($10)) + 108|0);
         $674 = ((($10)) + 56|0);
         $675 = ((($10)) + 5792|0);
         $676 = ((($10)) + 5796|0);
         $677 = ((($10)) + 5784|0);
         $678 = ((($10)) + 5788|0);
         $679 = ((($10)) + 92|0);
         while(1) {
          $680 = HEAP32[$671>>2]|0;
          $681 = ($680|0)==(0);
          if ($681) {
           _fill_window($10);
           $682 = HEAP32[$671>>2]|0;
           $683 = ($682|0)==(0);
           if ($683) {
            break;
           }
          }
          HEAP32[$672>>2] = 0;
          $685 = HEAP32[$673>>2]|0;
          $686 = HEAP32[$674>>2]|0;
          $687 = (($686) + ($685)|0);
          $688 = HEAP8[$687>>0]|0;
          $689 = HEAP32[$675>>2]|0;
          $690 = HEAP32[$676>>2]|0;
          $691 = (($690) + ($689<<1)|0);
          HEAP16[$691>>1] = 0;
          $692 = (($689) + 1)|0;
          HEAP32[$675>>2] = $692;
          $693 = HEAP32[$677>>2]|0;
          $694 = (($693) + ($689)|0);
          HEAP8[$694>>0] = $688;
          $695 = $688&255;
          $696 = (((($10)) + 148|0) + ($695<<2)|0);
          $697 = HEAP16[$696>>1]|0;
          $698 = (($697) + 1)<<16>>16;
          HEAP16[$696>>1] = $698;
          $699 = HEAP32[$675>>2]|0;
          $700 = HEAP32[$678>>2]|0;
          $701 = (($700) + -1)|0;
          $702 = ($699|0)==($701|0);
          $703 = HEAP32[$671>>2]|0;
          $704 = (($703) + -1)|0;
          HEAP32[$671>>2] = $704;
          $705 = HEAP32[$673>>2]|0;
          $706 = (($705) + 1)|0;
          HEAP32[$673>>2] = $706;
          if (!($702)) {
           continue;
          }
          $707 = HEAP32[$679>>2]|0;
          $708 = ($707|0)>(-1);
          if ($708) {
           $709 = HEAP32[$674>>2]|0;
           $710 = (($709) + ($707)|0);
           $712 = $710;
          } else {
           $712 = 0;
          }
          $711 = (($706) - ($707))|0;
          __tr_flush_block($10,$712,$711,0);
          $713 = HEAP32[$673>>2]|0;
          HEAP32[$679>>2] = $713;
          $714 = HEAP32[$10>>2]|0;
          $715 = ((($714)) + 28|0);
          $716 = HEAP32[$715>>2]|0;
          __tr_flush_bits($716);
          $717 = ((($716)) + 20|0);
          $718 = HEAP32[$717>>2]|0;
          $719 = ((($714)) + 16|0);
          $720 = HEAP32[$719>>2]|0;
          $721 = ($718>>>0)>($720>>>0);
          $$$i$i424 = $721 ? $720 : $718;
          $722 = ($$$i$i424|0)==(0);
          do {
           if (!($722)) {
            $723 = ((($714)) + 12|0);
            $724 = HEAP32[$723>>2]|0;
            $725 = ((($716)) + 16|0);
            $726 = HEAP32[$725>>2]|0;
            _memcpy(($724|0),($726|0),($$$i$i424|0))|0;
            $727 = HEAP32[$723>>2]|0;
            $728 = (($727) + ($$$i$i424)|0);
            HEAP32[$723>>2] = $728;
            $729 = HEAP32[$725>>2]|0;
            $730 = (($729) + ($$$i$i424)|0);
            HEAP32[$725>>2] = $730;
            $731 = ((($714)) + 20|0);
            $732 = HEAP32[$731>>2]|0;
            $733 = (($732) + ($$$i$i424))|0;
            HEAP32[$731>>2] = $733;
            $734 = HEAP32[$719>>2]|0;
            $735 = (($734) - ($$$i$i424))|0;
            HEAP32[$719>>2] = $735;
            $736 = HEAP32[$717>>2]|0;
            $737 = (($736) - ($$$i$i424))|0;
            HEAP32[$717>>2] = $737;
            $738 = ($737|0)==(0);
            if (!($738)) {
             break;
            }
            $739 = ((($716)) + 8|0);
            $740 = HEAP32[$739>>2]|0;
            HEAP32[$725>>2] = $740;
           }
          } while(0);
          $741 = HEAP32[$10>>2]|0;
          $742 = ((($741)) + 16|0);
          $743 = HEAP32[$742>>2]|0;
          $744 = ($743|0)==(0);
          if ($744) {
           label = 203;
           break L202;
          }
         }
         $684 = ($1|0)==(0);
         if ($684) {
          label = 203;
          break L202;
         }
         $745 = ((($10)) + 5812|0);
         HEAP32[$745>>2] = 0;
         $746 = ($1|0)==(4);
         if ($746) {
          $747 = HEAP32[$679>>2]|0;
          $748 = ($747|0)>(-1);
          if ($748) {
           $749 = HEAP32[$674>>2]|0;
           $750 = (($749) + ($747)|0);
           $753 = $750;
          } else {
           $753 = 0;
          }
          $751 = HEAP32[$673>>2]|0;
          $752 = (($751) - ($747))|0;
          __tr_flush_block($10,$753,$752,1);
          $754 = HEAP32[$673>>2]|0;
          HEAP32[$679>>2] = $754;
          $755 = HEAP32[$10>>2]|0;
          $756 = ((($755)) + 28|0);
          $757 = HEAP32[$756>>2]|0;
          __tr_flush_bits($757);
          $758 = ((($757)) + 20|0);
          $759 = HEAP32[$758>>2]|0;
          $760 = ((($755)) + 16|0);
          $761 = HEAP32[$760>>2]|0;
          $762 = ($759>>>0)>($761>>>0);
          $$$i52$i = $762 ? $761 : $759;
          $763 = ($$$i52$i|0)==(0);
          do {
           if (!($763)) {
            $764 = ((($755)) + 12|0);
            $765 = HEAP32[$764>>2]|0;
            $766 = ((($757)) + 16|0);
            $767 = HEAP32[$766>>2]|0;
            _memcpy(($765|0),($767|0),($$$i52$i|0))|0;
            $768 = HEAP32[$764>>2]|0;
            $769 = (($768) + ($$$i52$i)|0);
            HEAP32[$764>>2] = $769;
            $770 = HEAP32[$766>>2]|0;
            $771 = (($770) + ($$$i52$i)|0);
            HEAP32[$766>>2] = $771;
            $772 = ((($755)) + 20|0);
            $773 = HEAP32[$772>>2]|0;
            $774 = (($773) + ($$$i52$i))|0;
            HEAP32[$772>>2] = $774;
            $775 = HEAP32[$760>>2]|0;
            $776 = (($775) - ($$$i52$i))|0;
            HEAP32[$760>>2] = $776;
            $777 = HEAP32[$758>>2]|0;
            $778 = (($777) - ($$$i52$i))|0;
            HEAP32[$758>>2] = $778;
            $779 = ($778|0)==(0);
            if (!($779)) {
             break;
            }
            $780 = ((($757)) + 8|0);
            $781 = HEAP32[$780>>2]|0;
            HEAP32[$766>>2] = $781;
           }
          } while(0);
          $782 = HEAP32[$10>>2]|0;
          $783 = ((($782)) + 16|0);
          $784 = HEAP32[$783>>2]|0;
          $785 = ($784|0)==(0);
          $$$i426 = $785 ? 2 : 3;
          $1067 = $$$i426;
          label = 200;
          break L202;
         }
         $786 = HEAP32[$675>>2]|0;
         $787 = ($786|0)==(0);
         if ($787) {
          break L202;
         }
         $788 = HEAP32[$679>>2]|0;
         $789 = ($788|0)>(-1);
         if ($789) {
          $790 = HEAP32[$674>>2]|0;
          $791 = (($790) + ($788)|0);
          $794 = $791;
         } else {
          $794 = 0;
         }
         $792 = HEAP32[$673>>2]|0;
         $793 = (($792) - ($788))|0;
         __tr_flush_block($10,$794,$793,0);
         $795 = HEAP32[$673>>2]|0;
         HEAP32[$679>>2] = $795;
         $796 = HEAP32[$10>>2]|0;
         $797 = ((($796)) + 28|0);
         $798 = HEAP32[$797>>2]|0;
         __tr_flush_bits($798);
         $799 = ((($798)) + 20|0);
         $800 = HEAP32[$799>>2]|0;
         $801 = ((($796)) + 16|0);
         $802 = HEAP32[$801>>2]|0;
         $803 = ($800>>>0)>($802>>>0);
         $$$i54$i = $803 ? $802 : $800;
         $804 = ($$$i54$i|0)==(0);
         do {
          if (!($804)) {
           $805 = ((($796)) + 12|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ((($798)) + 16|0);
           $808 = HEAP32[$807>>2]|0;
           _memcpy(($806|0),($808|0),($$$i54$i|0))|0;
           $809 = HEAP32[$805>>2]|0;
           $810 = (($809) + ($$$i54$i)|0);
           HEAP32[$805>>2] = $810;
           $811 = HEAP32[$807>>2]|0;
           $812 = (($811) + ($$$i54$i)|0);
           HEAP32[$807>>2] = $812;
           $813 = ((($796)) + 20|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = (($814) + ($$$i54$i))|0;
           HEAP32[$813>>2] = $815;
           $816 = HEAP32[$801>>2]|0;
           $817 = (($816) - ($$$i54$i))|0;
           HEAP32[$801>>2] = $817;
           $818 = HEAP32[$799>>2]|0;
           $819 = (($818) - ($$$i54$i))|0;
           HEAP32[$799>>2] = $819;
           $820 = ($819|0)==(0);
           if (!($820)) {
            break;
           }
           $821 = ((($798)) + 8|0);
           $822 = HEAP32[$821>>2]|0;
           HEAP32[$807>>2] = $822;
          }
         } while(0);
         $823 = HEAP32[$10>>2]|0;
         $824 = ((($823)) + 16|0);
         $825 = HEAP32[$824>>2]|0;
         $826 = ($825|0)==(0);
         if ($826) {
          label = 203;
          break L202;
         } else {
          break L202;
         }
         break;
        }
        case 3:  {
         $827 = ((($10)) + 116|0);
         $828 = ($1|0)==(0);
         $829 = ((($10)) + 96|0);
         $830 = ((($10)) + 108|0);
         $831 = ((($10)) + 5792|0);
         $832 = ((($10)) + 5796|0);
         $833 = ((($10)) + 5784|0);
         $834 = ((($10)) + 5788|0);
         $835 = ((($10)) + 56|0);
         $836 = ((($10)) + 92|0);
         L242: while(1) {
          $837 = HEAP32[$827>>2]|0;
          $838 = ($837>>>0)<(259);
          do {
           if ($838) {
            _fill_window($10);
            $839 = HEAP32[$827>>2]|0;
            $840 = ($839>>>0)<(259);
            $or$cond$i = $828 & $840;
            if ($or$cond$i) {
             label = 203;
             break L202;
            }
            $841 = ($839|0)==(0);
            if ($841) {
             break L242;
            }
            HEAP32[$829>>2] = 0;
            $842 = ($839>>>0)>(2);
            if ($842) {
             $884 = $839;
             label = 162;
             break;
            }
            $$pre$i = HEAP32[$830>>2]|0;
            $920 = $$pre$i;
            label = 177;
           } else {
            HEAP32[$829>>2] = 0;
            $884 = $837;
            label = 162;
           }
          } while(0);
          do {
           if ((label|0) == 162) {
            label = 0;
            $843 = HEAP32[$830>>2]|0;
            $844 = ($843|0)==(0);
            if ($844) {
             $920 = 0;
             label = 177;
            } else {
             $845 = HEAP32[$835>>2]|0;
             $846 = (($845) + ($843)|0);
             $$ptr133$i = ((($846)) + -1|0);
             $847 = HEAP8[$$ptr133$i>>0]|0;
             $848 = HEAP8[$846>>0]|0;
             $849 = ($847<<24>>24)==($848<<24>>24);
             if (!($849)) {
              $920 = $843;
              label = 177;
              break;
             }
             $$ptr135$i = ((($846)) + 1|0);
             $850 = HEAP8[$$ptr135$i>>0]|0;
             $851 = ($847<<24>>24)==($850<<24>>24);
             if (!($851)) {
              $920 = $843;
              label = 177;
              break;
             }
             $852 = ((($$ptr135$i)) + 1|0);
             $853 = HEAP8[$852>>0]|0;
             $854 = ($847<<24>>24)==($853<<24>>24);
             if (!($854)) {
              $920 = $843;
              label = 177;
              break;
             }
             $855 = ((($846)) + 258|0);
             $$idx$i = 1;
             while(1) {
              $$ptr$i = (($846) + ($$idx$i)|0);
              $856 = ((($$ptr$i)) + 2|0);
              $857 = HEAP8[$856>>0]|0;
              $858 = ($847<<24>>24)==($857<<24>>24);
              if (!($858)) {
               $$1$i = $856;
               break;
              }
              $859 = ((($$ptr$i)) + 3|0);
              $860 = HEAP8[$859>>0]|0;
              $861 = ($847<<24>>24)==($860<<24>>24);
              if (!($861)) {
               $$1$i = $859;
               break;
              }
              $862 = ((($$ptr$i)) + 4|0);
              $863 = HEAP8[$862>>0]|0;
              $864 = ($847<<24>>24)==($863<<24>>24);
              if (!($864)) {
               $$1$i = $862;
               break;
              }
              $865 = ((($$ptr$i)) + 5|0);
              $866 = HEAP8[$865>>0]|0;
              $867 = ($847<<24>>24)==($866<<24>>24);
              if (!($867)) {
               $$1$i = $865;
               break;
              }
              $868 = ((($$ptr$i)) + 6|0);
              $869 = HEAP8[$868>>0]|0;
              $870 = ($847<<24>>24)==($869<<24>>24);
              if (!($870)) {
               $$1$i = $868;
               break;
              }
              $871 = ((($$ptr$i)) + 7|0);
              $872 = HEAP8[$871>>0]|0;
              $873 = ($847<<24>>24)==($872<<24>>24);
              if (!($873)) {
               $$1$i = $871;
               break;
              }
              $$add130$i = (($$idx$i) + 8)|0;
              $$ptr132$i = (($846) + ($$add130$i)|0);
              $874 = HEAP8[$$ptr132$i>>0]|0;
              $875 = ($847<<24>>24)==($874<<24>>24);
              if (!($875)) {
               $$1$i = $$ptr132$i;
               break;
              }
              $$add$i = (($$idx$i) + 9)|0;
              $$ptr131$i = (($846) + ($$add$i)|0);
              $876 = HEAP8[$$ptr131$i>>0]|0;
              $877 = ($847<<24>>24)==($876<<24>>24);
              $878 = ($$add$i|0)<(258);
              $or$cond136$i = $878 & $877;
              if ($or$cond136$i) {
               $$idx$i = $$add130$i;
              } else {
               $$1$i = $$ptr131$i;
               break;
              }
             }
             $879 = $855;
             $880 = $$1$i;
             $881 = (($880) - ($879))|0;
             $882 = (($881) + 258)|0;
             $883 = ($882>>>0)>($884>>>0);
             $$$i407 = $883 ? $884 : $882;
             HEAP32[$829>>2] = $$$i407;
             $885 = ($$$i407>>>0)>(2);
             if (!($885)) {
              $920 = $843;
              label = 177;
              break;
             }
             $886 = (($$$i407) + 253)|0;
             $887 = $886&255;
             $888 = HEAP32[$831>>2]|0;
             $889 = HEAP32[$832>>2]|0;
             $890 = (($889) + ($888<<1)|0);
             HEAP16[$890>>1] = 1;
             $891 = (($888) + 1)|0;
             HEAP32[$831>>2] = $891;
             $892 = HEAP32[$833>>2]|0;
             $893 = (($892) + ($888)|0);
             HEAP8[$893>>0] = $887;
             $894 = $886 & 255;
             $895 = (13073 + ($894)|0);
             $896 = HEAP8[$895>>0]|0;
             $897 = $896&255;
             $898 = $897 | 256;
             $899 = (($898) + 1)|0;
             $900 = (((($10)) + 148|0) + ($899<<2)|0);
             $901 = HEAP16[$900>>1]|0;
             $902 = (($901) + 1)<<16>>16;
             HEAP16[$900>>1] = $902;
             $903 = HEAP8[12561]|0;
             $904 = $903&255;
             $905 = (((($10)) + 2440|0) + ($904<<2)|0);
             $906 = HEAP16[$905>>1]|0;
             $907 = (($906) + 1)<<16>>16;
             HEAP16[$905>>1] = $907;
             $908 = HEAP32[$831>>2]|0;
             $909 = HEAP32[$834>>2]|0;
             $910 = (($909) + -1)|0;
             $911 = ($908|0)==($910|0);
             $912 = $911&1;
             $913 = HEAP32[$829>>2]|0;
             $914 = HEAP32[$827>>2]|0;
             $915 = (($914) - ($913))|0;
             HEAP32[$827>>2] = $915;
             $916 = HEAP32[$830>>2]|0;
             $917 = (($916) + ($913))|0;
             HEAP32[$830>>2] = $917;
             HEAP32[$829>>2] = 0;
             $$0128$i = $912;$947 = $917;
            }
           }
          } while(0);
          if ((label|0) == 177) {
           label = 0;
           $918 = HEAP32[$835>>2]|0;
           $919 = (($918) + ($920)|0);
           $921 = HEAP8[$919>>0]|0;
           $922 = HEAP32[$831>>2]|0;
           $923 = HEAP32[$832>>2]|0;
           $924 = (($923) + ($922<<1)|0);
           HEAP16[$924>>1] = 0;
           $925 = (($922) + 1)|0;
           HEAP32[$831>>2] = $925;
           $926 = HEAP32[$833>>2]|0;
           $927 = (($926) + ($922)|0);
           HEAP8[$927>>0] = $921;
           $928 = $921&255;
           $929 = (((($10)) + 148|0) + ($928<<2)|0);
           $930 = HEAP16[$929>>1]|0;
           $931 = (($930) + 1)<<16>>16;
           HEAP16[$929>>1] = $931;
           $932 = HEAP32[$831>>2]|0;
           $933 = HEAP32[$834>>2]|0;
           $934 = (($933) + -1)|0;
           $935 = ($932|0)==($934|0);
           $936 = $935&1;
           $937 = HEAP32[$827>>2]|0;
           $938 = (($937) + -1)|0;
           HEAP32[$827>>2] = $938;
           $939 = HEAP32[$830>>2]|0;
           $940 = (($939) + 1)|0;
           HEAP32[$830>>2] = $940;
           $$0128$i = $936;$947 = $940;
          }
          $941 = ($$0128$i|0)==(0);
          if ($941) {
           continue;
          }
          $942 = HEAP32[$836>>2]|0;
          $943 = ($942|0)>(-1);
          if ($943) {
           $944 = HEAP32[$835>>2]|0;
           $945 = (($944) + ($942)|0);
           $948 = $945;
          } else {
           $948 = 0;
          }
          $946 = (($947) - ($942))|0;
          __tr_flush_block($10,$948,$946,0);
          $949 = HEAP32[$830>>2]|0;
          HEAP32[$836>>2] = $949;
          $950 = HEAP32[$10>>2]|0;
          $951 = ((($950)) + 28|0);
          $952 = HEAP32[$951>>2]|0;
          __tr_flush_bits($952);
          $953 = ((($952)) + 20|0);
          $954 = HEAP32[$953>>2]|0;
          $955 = ((($950)) + 16|0);
          $956 = HEAP32[$955>>2]|0;
          $957 = ($954>>>0)>($956>>>0);
          $$$i$i = $957 ? $956 : $954;
          $958 = ($$$i$i|0)==(0);
          do {
           if (!($958)) {
            $959 = ((($950)) + 12|0);
            $960 = HEAP32[$959>>2]|0;
            $961 = ((($952)) + 16|0);
            $962 = HEAP32[$961>>2]|0;
            _memcpy(($960|0),($962|0),($$$i$i|0))|0;
            $963 = HEAP32[$959>>2]|0;
            $964 = (($963) + ($$$i$i)|0);
            HEAP32[$959>>2] = $964;
            $965 = HEAP32[$961>>2]|0;
            $966 = (($965) + ($$$i$i)|0);
            HEAP32[$961>>2] = $966;
            $967 = ((($950)) + 20|0);
            $968 = HEAP32[$967>>2]|0;
            $969 = (($968) + ($$$i$i))|0;
            HEAP32[$967>>2] = $969;
            $970 = HEAP32[$955>>2]|0;
            $971 = (($970) - ($$$i$i))|0;
            HEAP32[$955>>2] = $971;
            $972 = HEAP32[$953>>2]|0;
            $973 = (($972) - ($$$i$i))|0;
            HEAP32[$953>>2] = $973;
            $974 = ($973|0)==(0);
            if (!($974)) {
             break;
            }
            $975 = ((($952)) + 8|0);
            $976 = HEAP32[$975>>2]|0;
            HEAP32[$961>>2] = $976;
           }
          } while(0);
          $977 = HEAP32[$10>>2]|0;
          $978 = ((($977)) + 16|0);
          $979 = HEAP32[$978>>2]|0;
          $980 = ($979|0)==(0);
          if ($980) {
           label = 203;
           break L202;
          }
         }
         $981 = ((($10)) + 5812|0);
         HEAP32[$981>>2] = 0;
         $982 = ($1|0)==(4);
         if ($982) {
          $983 = HEAP32[$836>>2]|0;
          $984 = ($983|0)>(-1);
          if ($984) {
           $985 = HEAP32[$835>>2]|0;
           $986 = (($985) + ($983)|0);
           $989 = $986;
          } else {
           $989 = 0;
          }
          $987 = HEAP32[$830>>2]|0;
          $988 = (($987) - ($983))|0;
          __tr_flush_block($10,$989,$988,1);
          $990 = HEAP32[$830>>2]|0;
          HEAP32[$836>>2] = $990;
          $991 = HEAP32[$10>>2]|0;
          $992 = ((($991)) + 28|0);
          $993 = HEAP32[$992>>2]|0;
          __tr_flush_bits($993);
          $994 = ((($993)) + 20|0);
          $995 = HEAP32[$994>>2]|0;
          $996 = ((($991)) + 16|0);
          $997 = HEAP32[$996>>2]|0;
          $998 = ($995>>>0)>($997>>>0);
          $$$i138$i = $998 ? $997 : $995;
          $999 = ($$$i138$i|0)==(0);
          do {
           if (!($999)) {
            $1000 = ((($991)) + 12|0);
            $1001 = HEAP32[$1000>>2]|0;
            $1002 = ((($993)) + 16|0);
            $1003 = HEAP32[$1002>>2]|0;
            _memcpy(($1001|0),($1003|0),($$$i138$i|0))|0;
            $1004 = HEAP32[$1000>>2]|0;
            $1005 = (($1004) + ($$$i138$i)|0);
            HEAP32[$1000>>2] = $1005;
            $1006 = HEAP32[$1002>>2]|0;
            $1007 = (($1006) + ($$$i138$i)|0);
            HEAP32[$1002>>2] = $1007;
            $1008 = ((($991)) + 20|0);
            $1009 = HEAP32[$1008>>2]|0;
            $1010 = (($1009) + ($$$i138$i))|0;
            HEAP32[$1008>>2] = $1010;
            $1011 = HEAP32[$996>>2]|0;
            $1012 = (($1011) - ($$$i138$i))|0;
            HEAP32[$996>>2] = $1012;
            $1013 = HEAP32[$994>>2]|0;
            $1014 = (($1013) - ($$$i138$i))|0;
            HEAP32[$994>>2] = $1014;
            $1015 = ($1014|0)==(0);
            if (!($1015)) {
             break;
            }
            $1016 = ((($993)) + 8|0);
            $1017 = HEAP32[$1016>>2]|0;
            HEAP32[$1002>>2] = $1017;
           }
          } while(0);
          $1018 = HEAP32[$10>>2]|0;
          $1019 = ((($1018)) + 16|0);
          $1020 = HEAP32[$1019>>2]|0;
          $1021 = ($1020|0)==(0);
          $$137$i = $1021 ? 2 : 3;
          $1067 = $$137$i;
          label = 200;
          break L202;
         }
         $1022 = HEAP32[$831>>2]|0;
         $1023 = ($1022|0)==(0);
         if ($1023) {
          break L202;
         }
         $1024 = HEAP32[$836>>2]|0;
         $1025 = ($1024|0)>(-1);
         if ($1025) {
          $1026 = HEAP32[$835>>2]|0;
          $1027 = (($1026) + ($1024)|0);
          $1030 = $1027;
         } else {
          $1030 = 0;
         }
         $1028 = HEAP32[$830>>2]|0;
         $1029 = (($1028) - ($1024))|0;
         __tr_flush_block($10,$1030,$1029,0);
         $1031 = HEAP32[$830>>2]|0;
         HEAP32[$836>>2] = $1031;
         $1032 = HEAP32[$10>>2]|0;
         $1033 = ((($1032)) + 28|0);
         $1034 = HEAP32[$1033>>2]|0;
         __tr_flush_bits($1034);
         $1035 = ((($1034)) + 20|0);
         $1036 = HEAP32[$1035>>2]|0;
         $1037 = ((($1032)) + 16|0);
         $1038 = HEAP32[$1037>>2]|0;
         $1039 = ($1036>>>0)>($1038>>>0);
         $$$i140$i = $1039 ? $1038 : $1036;
         $1040 = ($$$i140$i|0)==(0);
         do {
          if (!($1040)) {
           $1041 = ((($1032)) + 12|0);
           $1042 = HEAP32[$1041>>2]|0;
           $1043 = ((($1034)) + 16|0);
           $1044 = HEAP32[$1043>>2]|0;
           _memcpy(($1042|0),($1044|0),($$$i140$i|0))|0;
           $1045 = HEAP32[$1041>>2]|0;
           $1046 = (($1045) + ($$$i140$i)|0);
           HEAP32[$1041>>2] = $1046;
           $1047 = HEAP32[$1043>>2]|0;
           $1048 = (($1047) + ($$$i140$i)|0);
           HEAP32[$1043>>2] = $1048;
           $1049 = ((($1032)) + 20|0);
           $1050 = HEAP32[$1049>>2]|0;
           $1051 = (($1050) + ($$$i140$i))|0;
           HEAP32[$1049>>2] = $1051;
           $1052 = HEAP32[$1037>>2]|0;
           $1053 = (($1052) - ($$$i140$i))|0;
           HEAP32[$1037>>2] = $1053;
           $1054 = HEAP32[$1035>>2]|0;
           $1055 = (($1054) - ($$$i140$i))|0;
           HEAP32[$1035>>2] = $1055;
           $1056 = ($1055|0)==(0);
           if (!($1056)) {
            break;
           }
           $1057 = ((($1034)) + 8|0);
           $1058 = HEAP32[$1057>>2]|0;
           HEAP32[$1043>>2] = $1058;
          }
         } while(0);
         $1059 = HEAP32[$10>>2]|0;
         $1060 = ((($1059)) + 16|0);
         $1061 = HEAP32[$1060>>2]|0;
         $1062 = ($1061|0)==(0);
         if ($1062) {
          label = 203;
          break L202;
         } else {
          break L202;
         }
         break;
        }
        default: {
         $1063 = (((864 + (($666*12)|0)|0)) + 8|0);
         $1064 = HEAP32[$1063>>2]|0;
         $1065 = (FUNCTION_TABLE_iii[$1064 & 127]($10,$1)|0);
         $1067 = $1065;
         label = 200;
         break L202;
        }
        }
       }
      } while(0);
      if ((label|0) == 200) {
       $1066 = $1067 | 1;
       $1068 = ($1066|0)==(3);
       if ($1068) {
        HEAP32[$14>>2] = 666;
       }
       $1069 = $1067 | 2;
       $1070 = ($1069|0)==(2);
       if ($1070) {
        label = 203;
       } else {
        $1073 = ($1067|0)==(1);
        if (!($1073)) {
         break;
        }
       }
      }
      if ((label|0) == 203) {
       $1071 = HEAP32[$29>>2]|0;
       $1072 = ($1071|0)==(0);
       if (!($1072)) {
        $$14 = 0;
        return ($$14|0);
       }
       HEAP32[$34>>2] = -1;
       $$14 = 0;
       return ($$14|0);
      }
      switch ($1|0) {
      case 1:  {
       __tr_align($10);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($10,0,0,0);
       $1074 = ($1|0)==(3);
       if ($1074) {
        $1075 = ((($10)) + 76|0);
        $1076 = HEAP32[$1075>>2]|0;
        $1077 = (($1076) + -1)|0;
        $1078 = ((($10)) + 68|0);
        $1079 = HEAP32[$1078>>2]|0;
        $1080 = (($1079) + ($1077<<1)|0);
        HEAP16[$1080>>1] = 0;
        $1081 = $1076 << 1;
        $1082 = (($1081) + -2)|0;
        _memset(($1079|0),0,($1082|0))|0;
        $1083 = ((($10)) + 116|0);
        $1084 = HEAP32[$1083>>2]|0;
        $1085 = ($1084|0)==(0);
        if ($1085) {
         $1086 = ((($10)) + 108|0);
         HEAP32[$1086>>2] = 0;
         $1087 = ((($10)) + 92|0);
         HEAP32[$1087>>2] = 0;
         $1088 = ((($10)) + 5812|0);
         HEAP32[$1088>>2] = 0;
        }
       }
      }
      }
      $1089 = HEAP32[$9>>2]|0;
      __tr_flush_bits($1089);
      $1090 = ((($1089)) + 20|0);
      $1091 = HEAP32[$1090>>2]|0;
      $1092 = HEAP32[$29>>2]|0;
      $1093 = ($1091>>>0)>($1092>>>0);
      $$$i405 = $1093 ? $1092 : $1091;
      $1094 = ($$$i405|0)==(0);
      if ($1094) {
       $1112 = $1092;
      } else {
       $1095 = HEAP32[$17>>2]|0;
       $1096 = ((($1089)) + 16|0);
       $1097 = HEAP32[$1096>>2]|0;
       _memcpy(($1095|0),($1097|0),($$$i405|0))|0;
       $1098 = HEAP32[$17>>2]|0;
       $1099 = (($1098) + ($$$i405)|0);
       HEAP32[$17>>2] = $1099;
       $1100 = HEAP32[$1096>>2]|0;
       $1101 = (($1100) + ($$$i405)|0);
       HEAP32[$1096>>2] = $1101;
       $1102 = ((($0)) + 20|0);
       $1103 = HEAP32[$1102>>2]|0;
       $1104 = (($1103) + ($$$i405))|0;
       HEAP32[$1102>>2] = $1104;
       $1105 = HEAP32[$29>>2]|0;
       $1106 = (($1105) - ($$$i405))|0;
       HEAP32[$29>>2] = $1106;
       $1107 = HEAP32[$1090>>2]|0;
       $1108 = (($1107) - ($$$i405))|0;
       HEAP32[$1090>>2] = $1108;
       $1109 = ($1108|0)==(0);
       if ($1109) {
        $1110 = ((($1089)) + 8|0);
        $1111 = HEAP32[$1110>>2]|0;
        HEAP32[$1096>>2] = $1111;
        $1112 = $1106;
       } else {
        $1112 = $1106;
       }
      }
      $1113 = ($1112|0)==(0);
      if ($1113) {
       HEAP32[$34>>2] = -1;
       $$14 = 0;
       return ($$14|0);
      }
     }
    } while(0);
    if ($26) {
     $$14 = 0;
     return ($$14|0);
    }
    $1114 = ((($10)) + 24|0);
    $1115 = HEAP32[$1114>>2]|0;
    $1116 = ($1115|0)<(1);
    if ($1116) {
     $$14 = 1;
     return ($$14|0);
    }
    $1117 = ($1115|0)==(2);
    $1118 = ((($0)) + 48|0);
    $1119 = HEAP32[$1118>>2]|0;
    if ($1117) {
     $1120 = $1119&255;
     $1121 = HEAP32[$36>>2]|0;
     $1122 = (($1121) + 1)|0;
     HEAP32[$36>>2] = $1122;
     $1123 = ((($10)) + 8|0);
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = (($1124) + ($1121)|0);
     HEAP8[$1125>>0] = $1120;
     $1126 = HEAP32[$1118>>2]|0;
     $1127 = $1126 >>> 8;
     $1128 = $1127&255;
     $1129 = HEAP32[$36>>2]|0;
     $1130 = (($1129) + 1)|0;
     HEAP32[$36>>2] = $1130;
     $1131 = HEAP32[$1123>>2]|0;
     $1132 = (($1131) + ($1129)|0);
     HEAP8[$1132>>0] = $1128;
     $1133 = HEAP32[$1118>>2]|0;
     $1134 = $1133 >>> 16;
     $1135 = $1134&255;
     $1136 = HEAP32[$36>>2]|0;
     $1137 = (($1136) + 1)|0;
     HEAP32[$36>>2] = $1137;
     $1138 = HEAP32[$1123>>2]|0;
     $1139 = (($1138) + ($1136)|0);
     HEAP8[$1139>>0] = $1135;
     $1140 = HEAP32[$1118>>2]|0;
     $1141 = $1140 >>> 24;
     $1142 = $1141&255;
     $1143 = HEAP32[$36>>2]|0;
     $1144 = (($1143) + 1)|0;
     HEAP32[$36>>2] = $1144;
     $1145 = HEAP32[$1123>>2]|0;
     $1146 = (($1145) + ($1143)|0);
     HEAP8[$1146>>0] = $1142;
     $1147 = ((($0)) + 8|0);
     $1148 = HEAP32[$1147>>2]|0;
     $1149 = $1148&255;
     $1150 = HEAP32[$36>>2]|0;
     $1151 = (($1150) + 1)|0;
     HEAP32[$36>>2] = $1151;
     $1152 = HEAP32[$1123>>2]|0;
     $1153 = (($1152) + ($1150)|0);
     HEAP8[$1153>>0] = $1149;
     $1154 = HEAP32[$1147>>2]|0;
     $1155 = $1154 >>> 8;
     $1156 = $1155&255;
     $1157 = HEAP32[$36>>2]|0;
     $1158 = (($1157) + 1)|0;
     HEAP32[$36>>2] = $1158;
     $1159 = HEAP32[$1123>>2]|0;
     $1160 = (($1159) + ($1157)|0);
     HEAP8[$1160>>0] = $1156;
     $1161 = HEAP32[$1147>>2]|0;
     $1162 = $1161 >>> 16;
     $1163 = $1162&255;
     $1164 = HEAP32[$36>>2]|0;
     $1165 = (($1164) + 1)|0;
     HEAP32[$36>>2] = $1165;
     $1166 = HEAP32[$1123>>2]|0;
     $1167 = (($1166) + ($1164)|0);
     HEAP8[$1167>>0] = $1163;
     $1168 = HEAP32[$1147>>2]|0;
     $1169 = $1168 >>> 24;
     $1170 = $1169&255;
     $1171 = HEAP32[$36>>2]|0;
     $1172 = (($1171) + 1)|0;
     HEAP32[$36>>2] = $1172;
     $1173 = HEAP32[$1123>>2]|0;
     $1174 = (($1173) + ($1171)|0);
     HEAP8[$1174>>0] = $1170;
    } else {
     $1175 = $1119 >>> 16;
     $1176 = $1119 >>> 24;
     $1177 = $1176&255;
     $1178 = HEAP32[$36>>2]|0;
     $1179 = (($1178) + 1)|0;
     HEAP32[$36>>2] = $1179;
     $1180 = ((($10)) + 8|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = (($1181) + ($1178)|0);
     HEAP8[$1182>>0] = $1177;
     $1183 = $1175&255;
     $1184 = HEAP32[$36>>2]|0;
     $1185 = (($1184) + 1)|0;
     HEAP32[$36>>2] = $1185;
     $1186 = HEAP32[$1180>>2]|0;
     $1187 = (($1186) + ($1184)|0);
     HEAP8[$1187>>0] = $1183;
     $1188 = HEAP32[$1118>>2]|0;
     $1189 = $1188 >>> 8;
     $1190 = $1189&255;
     $1191 = HEAP32[$36>>2]|0;
     $1192 = (($1191) + 1)|0;
     HEAP32[$36>>2] = $1192;
     $1193 = HEAP32[$1180>>2]|0;
     $1194 = (($1193) + ($1191)|0);
     HEAP8[$1194>>0] = $1190;
     $1195 = $1188&255;
     $1196 = HEAP32[$36>>2]|0;
     $1197 = (($1196) + 1)|0;
     HEAP32[$36>>2] = $1197;
     $1198 = HEAP32[$1180>>2]|0;
     $1199 = (($1198) + ($1196)|0);
     HEAP8[$1199>>0] = $1195;
    }
    $1200 = HEAP32[$9>>2]|0;
    __tr_flush_bits($1200);
    $1201 = ((($1200)) + 20|0);
    $1202 = HEAP32[$1201>>2]|0;
    $1203 = HEAP32[$29>>2]|0;
    $1204 = ($1202>>>0)>($1203>>>0);
    $$$i = $1204 ? $1203 : $1202;
    $1205 = ($$$i|0)==(0);
    if (!($1205)) {
     $1206 = HEAP32[$17>>2]|0;
     $1207 = ((($1200)) + 16|0);
     $1208 = HEAP32[$1207>>2]|0;
     _memcpy(($1206|0),($1208|0),($$$i|0))|0;
     $1209 = HEAP32[$17>>2]|0;
     $1210 = (($1209) + ($$$i)|0);
     HEAP32[$17>>2] = $1210;
     $1211 = HEAP32[$1207>>2]|0;
     $1212 = (($1211) + ($$$i)|0);
     HEAP32[$1207>>2] = $1212;
     $1213 = ((($0)) + 20|0);
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = (($1214) + ($$$i))|0;
     HEAP32[$1213>>2] = $1215;
     $1216 = HEAP32[$29>>2]|0;
     $1217 = (($1216) - ($$$i))|0;
     HEAP32[$29>>2] = $1217;
     $1218 = HEAP32[$1201>>2]|0;
     $1219 = (($1218) - ($$$i))|0;
     HEAP32[$1201>>2] = $1219;
     $1220 = ($1219|0)==(0);
     if ($1220) {
      $1221 = ((($1200)) + 8|0);
      $1222 = HEAP32[$1221>>2]|0;
      HEAP32[$1207>>2] = $1222;
     }
    }
    $1223 = HEAP32[$1114>>2]|0;
    $1224 = ($1223|0)>(0);
    if ($1224) {
     $1225 = (0 - ($1223))|0;
     HEAP32[$1114>>2] = $1225;
    }
    $1226 = HEAP32[$36>>2]|0;
    $not$ = ($1226|0)==(0);
    $1227 = $not$&1;
    $$14 = $1227;
    return ($$14|0);
   }
  }
 } while(0);
 $27 = HEAP32[(1608)>>2]|0;
 $28 = ((($0)) + 24|0);
 HEAP32[$28>>2] = $27;
 $$14 = -2;
 return ($$14|0);
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 148|0);
 $2 = ((($0)) + 2840|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 2848|0);
 HEAP32[$3>>2] = 984;
 $4 = ((($0)) + 2440|0);
 $5 = ((($0)) + 2852|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 2860|0);
 HEAP32[$6>>2] = 1004;
 $7 = ((($0)) + 2684|0);
 $8 = ((($0)) + 2864|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 2872|0);
 HEAP32[$9>>2] = 1024;
 $10 = ((($0)) + 5816|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 5820|0);
 HEAP32[$11>>2] = 0;
 _init_block($0);
 return;
}
function _init_block($0) {
 $0 = $0|0;
 var $$020 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$020 = 0;
 while(1) {
  $1 = (((($0)) + 148|0) + ($$020<<2)|0);
  HEAP16[$1>>1] = 0;
  $2 = (($$020) + 1)|0;
  $exitcond = ($2|0)==(286);
  if ($exitcond) {
   break;
  } else {
   $$020 = $2;
  }
 }
 $3 = ((($0)) + 2440|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 2444|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 2448|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 2452|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 2456|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 2460|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 2464|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 2468|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 2472|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($0)) + 2476|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($0)) + 2480|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 2484|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($0)) + 2488|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($0)) + 2492|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($0)) + 2496|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($0)) + 2500|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($0)) + 2504|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($0)) + 2508|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($0)) + 2512|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 2516|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($0)) + 2520|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($0)) + 2524|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($0)) + 2528|0);
 HEAP16[$25>>1] = 0;
 $26 = ((($0)) + 2532|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($0)) + 2536|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($0)) + 2540|0);
 HEAP16[$28>>1] = 0;
 $29 = ((($0)) + 2544|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($0)) + 2548|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($0)) + 2552|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($0)) + 2556|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($0)) + 2684|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($0)) + 2688|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($0)) + 2692|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($0)) + 2696|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($0)) + 2700|0);
 HEAP16[$37>>1] = 0;
 $38 = ((($0)) + 2704|0);
 HEAP16[$38>>1] = 0;
 $39 = ((($0)) + 2708|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($0)) + 2712|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($0)) + 2716|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($0)) + 2720|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($0)) + 2724|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($0)) + 2728|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($0)) + 2732|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($0)) + 2736|0);
 HEAP16[$46>>1] = 0;
 $47 = ((($0)) + 2740|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($0)) + 2744|0);
 HEAP16[$48>>1] = 0;
 $49 = ((($0)) + 2748|0);
 HEAP16[$49>>1] = 0;
 $50 = ((($0)) + 2752|0);
 HEAP16[$50>>1] = 0;
 $51 = ((($0)) + 2756|0);
 HEAP16[$51>>1] = 0;
 $52 = ((($0)) + 1172|0);
 HEAP16[$52>>1] = 1;
 $53 = ((($0)) + 5804|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($0)) + 5800|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($0)) + 5808|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($0)) + 5792|0);
 HEAP32[$56>>2] = 0;
 return;
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off0 = 0, $$off0$in = 0, $$pre$phi44Z2D = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5820|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(13);
 $7 = $3 & 65535;
 $8 = $7 << $5;
 $9 = ((($0)) + 5816|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 | $8;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 if ($6) {
  $14 = $12&255;
  $15 = ((($0)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $18 = ((($0)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16)|0);
  HEAP8[$20>>0] = $14;
  $21 = HEAP16[$9>>1]|0;
  $22 = ($21&65535) >>> 8;
  $23 = $22&255;
  $24 = HEAP32[$15>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$15>>2] = $25;
  $26 = HEAP32[$18>>2]|0;
  $27 = (($26) + ($24)|0);
  HEAP8[$27>>0] = $23;
  $28 = HEAP32[$4>>2]|0;
  $29 = (16 - ($28))|0;
  $30 = $7 >>> $29;
  $31 = $30&65535;
  HEAP16[$9>>1] = $31;
  $32 = (($28) + -13)|0;
  $$off0$in = $30;$storemerge = $32;
 } else {
  $33 = (($5) + 3)|0;
  $$off0$in = $12;$storemerge = $33;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$4>>2] = $storemerge;
 $34 = ($storemerge|0)>(8);
 do {
  if ($34) {
   $35 = ((($0)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$35>>2] = $37;
   $38 = ((($0)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36)|0);
   HEAP8[$40>>0] = $$off0;
   $41 = HEAP16[$9>>1]|0;
   $42 = ($41&65535) >>> 8;
   $43 = $42&255;
   $44 = HEAP32[$35>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$35>>2] = $45;
   $46 = HEAP32[$38>>2]|0;
   $47 = (($46) + ($44)|0);
   HEAP8[$47>>0] = $43;
   $$pre$phi44Z2D = $38;$$pre$phiZ2D = $35;
  } else {
   $48 = ($storemerge|0)>(0);
   $49 = ((($0)) + 20|0);
   if ($48) {
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = ((($0)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($50)|0);
    HEAP8[$54>>0] = $$off0;
    $$pre$phi44Z2D = $52;$$pre$phiZ2D = $49;
    break;
   } else {
    $$pre43 = ((($0)) + 8|0);
    $$pre$phi44Z2D = $$pre43;$$pre$phiZ2D = $49;
    break;
   }
  }
 } while(0);
 HEAP16[$9>>1] = 0;
 HEAP32[$4>>2] = 0;
 $55 = $2&255;
 $56 = HEAP32[$$pre$phiZ2D>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $57;
 $58 = HEAP32[$$pre$phi44Z2D>>2]|0;
 $59 = (($58) + ($56)|0);
 HEAP8[$59>>0] = $55;
 $60 = $2 >>> 8;
 $61 = $60&255;
 $62 = HEAP32[$$pre$phiZ2D>>2]|0;
 $63 = (($62) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $63;
 $64 = HEAP32[$$pre$phi44Z2D>>2]|0;
 $65 = (($64) + ($62)|0);
 HEAP8[$65>>0] = $61;
 $66 = $2 & 65535;
 $67 = $66 ^ 65535;
 $68 = $67&255;
 $69 = HEAP32[$$pre$phiZ2D>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $70;
 $71 = HEAP32[$$pre$phi44Z2D>>2]|0;
 $72 = (($71) + ($69)|0);
 HEAP8[$72>>0] = $68;
 $73 = $67 >>> 8;
 $74 = $73&255;
 $75 = HEAP32[$$pre$phiZ2D>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $76;
 $77 = HEAP32[$$pre$phi44Z2D>>2]|0;
 $78 = (($77) + ($75)|0);
 HEAP8[$78>>0] = $74;
 $79 = HEAP32[$$pre$phi44Z2D>>2]|0;
 $80 = HEAP32[$$pre$phiZ2D>>2]|0;
 $81 = (($79) + ($80)|0);
 _memcpy(($81|0),($1|0),($2|0))|0;
 $82 = HEAP32[$$pre$phiZ2D>>2]|0;
 $83 = (($82) + ($2))|0;
 HEAP32[$$pre$phiZ2D>>2] = $83;
 return;
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(16);
 if ($3) {
  $4 = ((($0)) + 5816|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&255;
  $7 = ((($0)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $10 = ((($0)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8)|0);
  HEAP8[$12>>0] = $6;
  $13 = HEAP16[$4>>1]|0;
  $14 = ($13&65535) >>> 8;
  $15 = $14&255;
  $16 = HEAP32[$7>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$7>>2] = $17;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($18) + ($16)|0);
  HEAP8[$19>>0] = $15;
  HEAP16[$4>>1] = 0;
  HEAP32[$1>>2] = 0;
  return;
 }
 $20 = ($2|0)>(7);
 if (!($20)) {
  return;
 }
 $21 = ((($0)) + 5816|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&255;
 $24 = ((($0)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = ((($0)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP8[$29>>0] = $23;
 $30 = HEAP16[$21>>1]|0;
 $31 = ($30&65535) >>> 8;
 HEAP16[$21>>1] = $31;
 $32 = HEAP32[$1>>2]|0;
 $33 = (($32) + -8)|0;
 HEAP32[$1>>2] = $33;
 return;
}
function __tr_align($0) {
 $0 = $0|0;
 var $$off0 = 0, $$off0$in = 0, $$off049 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(13);
 $4 = 2 << $2;
 $5 = ((($0)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | $4;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($3) {
  $10 = $8&255;
  $11 = ((($0)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$14>>2]|0;
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$1>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = 2 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($2) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$1>>2] = $storemerge;
 $30 = ($storemerge|0)>(9);
 if ($30) {
  $31 = ((($0)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $34 = ((($0)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32)|0);
  HEAP8[$36>>0] = $$off0;
  $37 = HEAP16[$5>>1]|0;
  $38 = ($37&65535) >>> 8;
  $39 = $38&255;
  $40 = HEAP32[$31>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$31>>2] = $41;
  $42 = HEAP32[$34>>2]|0;
  $43 = (($42) + ($40)|0);
  HEAP8[$43>>0] = $39;
  HEAP16[$5>>1] = 0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($44) + -9)|0;
  $$off049 = 0;$storemerge47 = $45;
 } else {
  $46 = (($storemerge) + 7)|0;
  $$off049 = $$off0;$storemerge47 = $46;
 }
 HEAP32[$1>>2] = $storemerge47;
 $47 = ($storemerge47|0)==(16);
 if ($47) {
  $48 = ((($0)) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$48>>2] = $50;
  $51 = ((($0)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49)|0);
  HEAP8[$53>>0] = $$off049;
  $54 = HEAP16[$5>>1]|0;
  $55 = ($54&65535) >>> 8;
  $56 = $55&255;
  $57 = HEAP32[$48>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$48>>2] = $58;
  $59 = HEAP32[$51>>2]|0;
  $60 = (($59) + ($57)|0);
  HEAP8[$60>>0] = $56;
  HEAP16[$5>>1] = 0;
  HEAP32[$1>>2] = 0;
  return;
 }
 $61 = ($storemerge47|0)>(7);
 if (!($61)) {
  return;
 }
 $62 = ((($0)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 $65 = ((($0)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($63)|0);
 HEAP8[$67>>0] = $$off049;
 $68 = HEAP16[$5>>1]|0;
 $69 = ($68&65535) >>> 8;
 HEAP16[$5>>1] = $69;
 $70 = HEAP32[$1>>2]|0;
 $71 = (($70) + -8)|0;
 HEAP32[$1>>2] = $71;
 return;
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$53$i$i = 0, $$$53$i27$i = 0, $$$54$i$i = 0, $$$54$i28$i = 0, $$$i = 0, $$$i$i = 0, $$$i15$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0118$i = 0, $$01620$i = 0, $$017$i = 0, $$021$i = 0, $$046$i$i = 0, $$046$i24$i = 0, $$048$ph$i$i = 0, $$048$ph$i19$i = 0, $$049$i$i = 0, $$049$i23$i = 0;
 var $$049$ph$i$i = 0, $$049$ph$i18$i = 0, $$050$ph$i$i = 0, $$050$ph$i$i$phi = 0, $$050$ph$i17$i = 0, $$050$ph$i17$i$phi = 0, $$092 = 0, $$093 = 0, $$1$ph$i$i = 0, $$1$ph$i21$i = 0, $$119$i = 0, $$144$ph$i$i = 0, $$144$ph$i20$i = 0, $$52$i$i = 0, $$52$i16$i = 0, $$53$i$i = 0, $$53$i26$i = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre$phi117Z2D = 0;
 var $$pre$phiZ2D = 0, $$pre116 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i25$i = 0, $or$cond95 = 0, $storemerge = 0, $storemerge116$i = 0, $storemerge117$i = 0, $storemerge94 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(2);
  if ($10) {
   $$01620$i = -201342849;$$021$i = 0;
   while(1) {
    $11 = $$01620$i & 1;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = (((($0)) + 148|0) + ($$021$i<<2)|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = ($14<<16>>16)==(0);
     if (!($15)) {
      $$017$i = 0;
      break;
     }
    }
    $16 = (($$021$i) + 1)|0;
    $17 = $$01620$i >>> 1;
    $18 = ($16|0)<(32);
    if ($18) {
     $$01620$i = $17;$$021$i = $16;
    } else {
     label = 6;
     break;
    }
   }
   L9: do {
    if ((label|0) == 6) {
     $19 = ((($0)) + 184|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = ($20<<16>>16)==(0);
     if ($21) {
      $22 = ((($0)) + 188|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = ($23<<16>>16)==(0);
      if ($24) {
       $25 = ((($0)) + 200|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = ($26<<16>>16)==(0);
       if ($27) {
        $$119$i = 32;
        while(1) {
         $30 = (((($0)) + 148|0) + ($$119$i<<2)|0);
         $31 = HEAP16[$30>>1]|0;
         $32 = ($31<<16>>16)==(0);
         $28 = (($$119$i) + 1)|0;
         if (!($32)) {
          $$017$i = 1;
          break L9;
         }
         $29 = ($28|0)<(256);
         if ($29) {
          $$119$i = $28;
         } else {
          $$017$i = 0;
          break;
         }
        }
       } else {
        $$017$i = 1;
       }
      } else {
       $$017$i = 1;
      }
     } else {
      $$017$i = 1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $$017$i;
  }
  $33 = ((($0)) + 2840|0);
  _build_tree($0,$33);
  $34 = ((($0)) + 2852|0);
  _build_tree($0,$34);
  $35 = ((($0)) + 2844|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 150|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = ($38<<16>>16)==(0);
  $$$i$i = $40 ? 138 : 7;
  $$52$i$i = $40 ? 3 : 4;
  $41 = (($36) + 1)|0;
  $42 = (((((($0)) + 148|0) + ($41<<2)|0)) + 2|0);
  HEAP16[$42>>1] = -1;
  $43 = ((($0)) + 2752|0);
  $44 = ((($0)) + 2756|0);
  $45 = ((($0)) + 2748|0);
  $$048$ph$i$i = $39;$$049$ph$i$i = 0;$$050$ph$i$i = -1;$$1$ph$i$i = $$52$i$i;$$144$ph$i$i = $$$i$i;
  L18: while(1) {
   $$046$i$i = 0;$$049$i$i = $$049$ph$i$i;
   while(1) {
    $46 = ($$049$i$i|0)>($36|0);
    if ($46) {
     break L18;
    }
    $47 = (($$049$i$i) + 1)|0;
    $48 = (((((($0)) + 148|0) + ($47<<2)|0)) + 2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = (($$046$i$i) + 1)|0;
    $52 = ($51|0)<($$144$ph$i$i|0);
    $53 = ($$048$ph$i$i|0)==($50|0);
    $or$cond$i$i = $52 & $53;
    if ($or$cond$i$i) {
     $$046$i$i = $51;$$049$i$i = $47;
    } else {
     break;
    }
   }
   $54 = ($51|0)<($$1$ph$i$i|0);
   do {
    if ($54) {
     $55 = (((($0)) + 2684|0) + ($$048$ph$i$i<<2)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = (($57) + ($51))|0;
     $59 = $58&65535;
     HEAP16[$55>>1] = $59;
    } else {
     $60 = ($$048$ph$i$i|0)==(0);
     if ($60) {
      $67 = ($51|0)<(11);
      if ($67) {
       $68 = HEAP16[$43>>1]|0;
       $69 = (($68) + 1)<<16>>16;
       HEAP16[$43>>1] = $69;
       break;
      } else {
       $70 = HEAP16[$44>>1]|0;
       $71 = (($70) + 1)<<16>>16;
       HEAP16[$44>>1] = $71;
       break;
      }
     } else {
      $61 = ($$048$ph$i$i|0)==($$050$ph$i$i|0);
      $62 = (((($0)) + 2684|0) + ($$048$ph$i$i<<2)|0);
      if (!($61)) {
       $63 = HEAP16[$62>>1]|0;
       $64 = (($63) + 1)<<16>>16;
       HEAP16[$62>>1] = $64;
      }
      $65 = HEAP16[$45>>1]|0;
      $66 = (($65) + 1)<<16>>16;
      HEAP16[$45>>1] = $66;
      break;
     }
    }
   } while(0);
   $72 = ($49<<16>>16)==(0);
   $$53$i$i = $53 ? 6 : 7;
   $$$53$i$i = $72 ? 138 : $$53$i$i;
   $73 = $72 | $53;
   $$$54$i$i = $73 ? 3 : 4;
   $$050$ph$i$i$phi = $$048$ph$i$i;$$048$ph$i$i = $50;$$049$ph$i$i = $47;$$1$ph$i$i = $$$54$i$i;$$144$ph$i$i = $$$53$i$i;$$050$ph$i$i = $$050$ph$i$i$phi;
  }
  $74 = ((($0)) + 2856|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($0)) + 2442|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = ($77<<16>>16)==(0);
  $$$i15$i = $79 ? 138 : 7;
  $$52$i16$i = $79 ? 3 : 4;
  $80 = (($75) + 1)|0;
  $81 = (((((($0)) + 2440|0) + ($80<<2)|0)) + 2|0);
  HEAP16[$81>>1] = -1;
  $$048$ph$i19$i = $78;$$049$ph$i18$i = 0;$$050$ph$i17$i = -1;$$1$ph$i21$i = $$52$i16$i;$$144$ph$i20$i = $$$i15$i;
  L38: while(1) {
   $$046$i24$i = 0;$$049$i23$i = $$049$ph$i18$i;
   while(1) {
    $82 = ($$049$i23$i|0)>($75|0);
    if ($82) {
     break L38;
    }
    $83 = (($$049$i23$i) + 1)|0;
    $84 = (((((($0)) + 2440|0) + ($83<<2)|0)) + 2|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $85&65535;
    $87 = (($$046$i24$i) + 1)|0;
    $88 = ($87|0)<($$144$ph$i20$i|0);
    $89 = ($$048$ph$i19$i|0)==($86|0);
    $or$cond$i25$i = $88 & $89;
    if ($or$cond$i25$i) {
     $$046$i24$i = $87;$$049$i23$i = $83;
    } else {
     break;
    }
   }
   $90 = ($87|0)<($$1$ph$i21$i|0);
   do {
    if ($90) {
     $91 = (((($0)) + 2684|0) + ($$048$ph$i19$i<<2)|0);
     $92 = HEAP16[$91>>1]|0;
     $93 = $92&65535;
     $94 = (($93) + ($87))|0;
     $95 = $94&65535;
     HEAP16[$91>>1] = $95;
    } else {
     $96 = ($$048$ph$i19$i|0)==(0);
     if ($96) {
      $103 = ($87|0)<(11);
      if ($103) {
       $104 = HEAP16[$43>>1]|0;
       $105 = (($104) + 1)<<16>>16;
       HEAP16[$43>>1] = $105;
       break;
      } else {
       $106 = HEAP16[$44>>1]|0;
       $107 = (($106) + 1)<<16>>16;
       HEAP16[$44>>1] = $107;
       break;
      }
     } else {
      $97 = ($$048$ph$i19$i|0)==($$050$ph$i17$i|0);
      $98 = (((($0)) + 2684|0) + ($$048$ph$i19$i<<2)|0);
      if (!($97)) {
       $99 = HEAP16[$98>>1]|0;
       $100 = (($99) + 1)<<16>>16;
       HEAP16[$98>>1] = $100;
      }
      $101 = HEAP16[$45>>1]|0;
      $102 = (($101) + 1)<<16>>16;
      HEAP16[$45>>1] = $102;
      break;
     }
    }
   } while(0);
   $108 = ($85<<16>>16)==(0);
   $$53$i26$i = $89 ? 6 : 7;
   $$$53$i27$i = $108 ? 138 : $$53$i26$i;
   $109 = $108 | $89;
   $$$54$i28$i = $109 ? 3 : 4;
   $$050$ph$i17$i$phi = $$048$ph$i19$i;$$048$ph$i19$i = $86;$$049$ph$i18$i = $83;$$1$ph$i21$i = $$$54$i28$i;$$144$ph$i20$i = $$$53$i27$i;$$050$ph$i17$i = $$050$ph$i17$i$phi;
  }
  $110 = ((($0)) + 2864|0);
  _build_tree($0,$110);
  $111 = ((($0)) + 2746|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = ($112<<16>>16)==(0);
  if ($113) {
   $114 = ((($0)) + 2690|0);
   $115 = HEAP16[$114>>1]|0;
   $116 = ($115<<16>>16)==(0);
   if ($116) {
    $117 = ((($0)) + 2742|0);
    $118 = HEAP16[$117>>1]|0;
    $119 = ($118<<16>>16)==(0);
    if ($119) {
     $120 = ((($0)) + 2694|0);
     $121 = HEAP16[$120>>1]|0;
     $122 = ($121<<16>>16)==(0);
     if ($122) {
      $123 = ((($0)) + 2738|0);
      $124 = HEAP16[$123>>1]|0;
      $125 = ($124<<16>>16)==(0);
      if ($125) {
       $126 = ((($0)) + 2698|0);
       $127 = HEAP16[$126>>1]|0;
       $128 = ($127<<16>>16)==(0);
       if ($128) {
        $129 = ((($0)) + 2734|0);
        $130 = HEAP16[$129>>1]|0;
        $131 = ($130<<16>>16)==(0);
        if ($131) {
         $132 = ((($0)) + 2702|0);
         $133 = HEAP16[$132>>1]|0;
         $134 = ($133<<16>>16)==(0);
         if ($134) {
          $135 = ((($0)) + 2730|0);
          $136 = HEAP16[$135>>1]|0;
          $137 = ($136<<16>>16)==(0);
          if ($137) {
           $138 = ((($0)) + 2706|0);
           $139 = HEAP16[$138>>1]|0;
           $140 = ($139<<16>>16)==(0);
           if ($140) {
            $141 = ((($0)) + 2726|0);
            $142 = HEAP16[$141>>1]|0;
            $143 = ($142<<16>>16)==(0);
            if ($143) {
             $144 = ((($0)) + 2710|0);
             $145 = HEAP16[$144>>1]|0;
             $146 = ($145<<16>>16)==(0);
             if ($146) {
              $147 = ((($0)) + 2722|0);
              $148 = HEAP16[$147>>1]|0;
              $149 = ($148<<16>>16)==(0);
              if ($149) {
               $150 = ((($0)) + 2714|0);
               $151 = HEAP16[$150>>1]|0;
               $152 = ($151<<16>>16)==(0);
               if ($152) {
                $153 = ((($0)) + 2718|0);
                $154 = HEAP16[$153>>1]|0;
                $155 = ($154<<16>>16)==(0);
                if ($155) {
                 $156 = ((($0)) + 2686|0);
                 $157 = HEAP16[$156>>1]|0;
                 $158 = ($157<<16>>16)==(0);
                 $$$i = $158 ? 2 : 3;
                 $$0$lcssa$i = $$$i;
                } else {
                 $$0$lcssa$i = 4;
                }
               } else {
                $$0$lcssa$i = 5;
               }
              } else {
               $$0$lcssa$i = 6;
              }
             } else {
              $$0$lcssa$i = 7;
             }
            } else {
             $$0$lcssa$i = 8;
            }
           } else {
            $$0$lcssa$i = 9;
           }
          } else {
           $$0$lcssa$i = 10;
          }
         } else {
          $$0$lcssa$i = 11;
         }
        } else {
         $$0$lcssa$i = 12;
        }
       } else {
        $$0$lcssa$i = 13;
       }
      } else {
       $$0$lcssa$i = 14;
      }
     } else {
      $$0$lcssa$i = 15;
     }
    } else {
     $$0$lcssa$i = 16;
    }
   } else {
    $$0$lcssa$i = 17;
   }
  } else {
   $$0$lcssa$i = 18;
  }
  $159 = ($$0$lcssa$i*3)|0;
  $160 = (($159) + 17)|0;
  $161 = ((($0)) + 5800|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($160) + ($162))|0;
  HEAP32[$161>>2] = $163;
  $164 = (($163) + 10)|0;
  $165 = $164 >>> 3;
  $166 = ((($0)) + 5804|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 10)|0;
  $169 = $168 >>> 3;
  $170 = ($169>>>0)>($165>>>0);
  $$ = $170 ? $165 : $169;
  $$0 = $$;$$092 = $169;$$093 = $$0$lcssa$i;
 } else {
  $171 = (($2) + 5)|0;
  $$0 = $171;$$092 = $171;$$093 = 0;
 }
 $172 = (($2) + 4)|0;
 $173 = ($172>>>0)<=($$0>>>0);
 $174 = ($1|0)!=(0|0);
 $or$cond = $174 & $173;
 do {
  if ($or$cond) {
   __tr_stored_block($0,$1,$2,$3);
  } else {
   $175 = ((($0)) + 136|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($176|0)==(4);
   $178 = ($$092|0)==($$0|0);
   $or$cond95 = $178 | $177;
   $179 = ((($0)) + 5820|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)>(13);
   if ($or$cond95) {
    $182 = (($3) + 2)|0;
    $183 = $182 & 65535;
    $184 = $183 << $180;
    $185 = ((($0)) + 5816|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = $186&65535;
    $188 = $187 | $184;
    $189 = $188&65535;
    HEAP16[$185>>1] = $189;
    if ($181) {
     $190 = $188&255;
     $191 = ((($0)) + 20|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (($192) + 1)|0;
     HEAP32[$191>>2] = $193;
     $194 = ((($0)) + 8|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + ($192)|0);
     HEAP8[$196>>0] = $190;
     $197 = HEAP16[$185>>1]|0;
     $198 = ($197&65535) >>> 8;
     $199 = $198&255;
     $200 = HEAP32[$191>>2]|0;
     $201 = (($200) + 1)|0;
     HEAP32[$191>>2] = $201;
     $202 = HEAP32[$194>>2]|0;
     $203 = (($202) + ($200)|0);
     HEAP8[$203>>0] = $199;
     $204 = HEAP32[$179>>2]|0;
     $205 = (16 - ($204))|0;
     $206 = $183 >>> $205;
     $207 = $206&65535;
     HEAP16[$185>>1] = $207;
     $208 = (($204) + -13)|0;
     $storemerge94 = $208;
    } else {
     $209 = (($180) + 3)|0;
     $storemerge94 = $209;
    }
    HEAP32[$179>>2] = $storemerge94;
    _compress_block($0,10708,10588);
    break;
   }
   $210 = (($3) + 4)|0;
   $211 = $210 & 65535;
   $212 = $211 << $180;
   $213 = ((($0)) + 5816|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214&65535;
   $216 = $215 | $212;
   $217 = $216&65535;
   HEAP16[$213>>1] = $217;
   if ($181) {
    $218 = $216&255;
    $219 = ((($0)) + 20|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + 1)|0;
    HEAP32[$219>>2] = $221;
    $222 = ((($0)) + 8|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + ($220)|0);
    HEAP8[$224>>0] = $218;
    $225 = HEAP16[$213>>1]|0;
    $226 = ($225&65535) >>> 8;
    $227 = $226&255;
    $228 = HEAP32[$219>>2]|0;
    $229 = (($228) + 1)|0;
    HEAP32[$219>>2] = $229;
    $230 = HEAP32[$222>>2]|0;
    $231 = (($230) + ($228)|0);
    HEAP8[$231>>0] = $227;
    $232 = HEAP32[$179>>2]|0;
    $233 = (16 - ($232))|0;
    $234 = $211 >>> $233;
    $235 = $234&65535;
    HEAP16[$213>>1] = $235;
    $236 = (($232) + -13)|0;
    $247 = $234;$storemerge = $236;
   } else {
    $237 = (($180) + 3)|0;
    $247 = $216;$storemerge = $237;
   }
   HEAP32[$179>>2] = $storemerge;
   $238 = ((($0)) + 2844|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ((($0)) + 2856|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ($storemerge|0)>(11);
   $243 = (($239) + 65280)|0;
   $244 = $243 & 65535;
   $245 = $244 << $storemerge;
   $246 = $247 & 65535;
   $248 = $246 | $245;
   $249 = $248&65535;
   HEAP16[$213>>1] = $249;
   if ($242) {
    $250 = $248&255;
    $251 = ((($0)) + 20|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + 1)|0;
    HEAP32[$251>>2] = $253;
    $254 = ((($0)) + 8|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (($255) + ($252)|0);
    HEAP8[$256>>0] = $250;
    $257 = HEAP16[$213>>1]|0;
    $258 = ($257&65535) >>> 8;
    $259 = $258&255;
    $260 = HEAP32[$251>>2]|0;
    $261 = (($260) + 1)|0;
    HEAP32[$251>>2] = $261;
    $262 = HEAP32[$254>>2]|0;
    $263 = (($262) + ($260)|0);
    HEAP8[$263>>0] = $259;
    $264 = HEAP32[$179>>2]|0;
    $265 = (16 - ($264))|0;
    $266 = $244 >>> $265;
    $267 = $266&65535;
    HEAP16[$213>>1] = $267;
    $268 = (($264) + -11)|0;
    $270 = $268;$275 = $266;
   } else {
    $269 = (($storemerge) + 5)|0;
    $270 = $269;$275 = $248;
   }
   HEAP32[$179>>2] = $270;
   $271 = ($270|0)>(11);
   $272 = $241 & 65535;
   $273 = $272 << $270;
   $274 = $275 & 65535;
   $276 = $273 | $274;
   $277 = $276&65535;
   HEAP16[$213>>1] = $277;
   if ($271) {
    $278 = $276&255;
    $279 = ((($0)) + 20|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + 1)|0;
    HEAP32[$279>>2] = $281;
    $282 = ((($0)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (($283) + ($280)|0);
    HEAP8[$284>>0] = $278;
    $285 = HEAP16[$213>>1]|0;
    $286 = ($285&65535) >>> 8;
    $287 = $286&255;
    $288 = HEAP32[$279>>2]|0;
    $289 = (($288) + 1)|0;
    HEAP32[$279>>2] = $289;
    $290 = HEAP32[$282>>2]|0;
    $291 = (($290) + ($288)|0);
    HEAP8[$291>>0] = $287;
    $292 = HEAP32[$179>>2]|0;
    $293 = (16 - ($292))|0;
    $294 = $272 >>> $293;
    $295 = $294&65535;
    HEAP16[$213>>1] = $295;
    $296 = (($292) + -11)|0;
    $298 = $296;$304 = $294;
   } else {
    $297 = (($270) + 5)|0;
    $298 = $297;$304 = $276;
   }
   HEAP32[$179>>2] = $298;
   $299 = ($298|0)>(12);
   $300 = (($$093) + 65533)|0;
   $301 = $300 & 65535;
   $302 = $301 << $298;
   $303 = $304 & 65535;
   $305 = $302 | $303;
   $306 = $305&65535;
   HEAP16[$213>>1] = $306;
   if ($299) {
    $307 = $305&255;
    $308 = ((($0)) + 20|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (($309) + 1)|0;
    HEAP32[$308>>2] = $310;
    $311 = ((($0)) + 8|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = (($312) + ($309)|0);
    HEAP8[$313>>0] = $307;
    $314 = HEAP16[$213>>1]|0;
    $315 = ($314&65535) >>> 8;
    $316 = $315&255;
    $317 = HEAP32[$308>>2]|0;
    $318 = (($317) + 1)|0;
    HEAP32[$308>>2] = $318;
    $319 = HEAP32[$311>>2]|0;
    $320 = (($319) + ($317)|0);
    HEAP8[$320>>0] = $316;
    $321 = HEAP32[$179>>2]|0;
    $322 = (16 - ($321))|0;
    $323 = $301 >>> $322;
    $324 = $323&65535;
    HEAP16[$213>>1] = $324;
    $325 = (($321) + -12)|0;
    $$pre$phi117Z2D = $311;$$pre$phiZ2D = $308;$391 = $323;$storemerge116$i = $325;
   } else {
    $326 = (($298) + 4)|0;
    $$pre = ((($0)) + 20|0);
    $$pre116 = ((($0)) + 8|0);
    $$pre$phi117Z2D = $$pre116;$$pre$phiZ2D = $$pre;$391 = $305;$storemerge116$i = $326;
   }
   HEAP32[$179>>2] = $storemerge116$i;
   $$0118$i = 0;$327 = $storemerge116$i;$337 = $391;
   while(1) {
    $328 = ($327|0)>(13);
    $329 = (13329 + ($$0118$i)|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = $330&255;
    $332 = (((((($0)) + 2684|0) + ($331<<2)|0)) + 2|0);
    $333 = HEAP16[$332>>1]|0;
    $334 = $333&65535;
    $335 = $334 << $327;
    $336 = $337 & 65535;
    $338 = $335 | $336;
    $339 = $338&65535;
    HEAP16[$213>>1] = $339;
    if ($328) {
     $340 = $338&255;
     $341 = HEAP32[$$pre$phiZ2D>>2]|0;
     $342 = (($341) + 1)|0;
     HEAP32[$$pre$phiZ2D>>2] = $342;
     $343 = HEAP32[$$pre$phi117Z2D>>2]|0;
     $344 = (($343) + ($341)|0);
     HEAP8[$344>>0] = $340;
     $345 = HEAP16[$213>>1]|0;
     $346 = ($345&65535) >>> 8;
     $347 = $346&255;
     $348 = HEAP32[$$pre$phiZ2D>>2]|0;
     $349 = (($348) + 1)|0;
     HEAP32[$$pre$phiZ2D>>2] = $349;
     $350 = HEAP32[$$pre$phi117Z2D>>2]|0;
     $351 = (($350) + ($348)|0);
     HEAP8[$351>>0] = $347;
     $352 = HEAP32[$179>>2]|0;
     $353 = (16 - ($352))|0;
     $354 = $334 >>> $353;
     $355 = $354&65535;
     HEAP16[$213>>1] = $355;
     $356 = (($352) + -13)|0;
     $392 = $354;$storemerge117$i = $356;
    } else {
     $357 = (($327) + 3)|0;
     $392 = $338;$storemerge117$i = $357;
    }
    HEAP32[$179>>2] = $storemerge117$i;
    $358 = (($$0118$i) + 1)|0;
    $exitcond$i = ($$0118$i|0)==($$093|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0118$i = $358;$327 = $storemerge117$i;$337 = $392;
    }
   }
   $359 = ((($0)) + 148|0);
   _send_tree($0,$359,$239);
   $360 = ((($0)) + 2440|0);
   _send_tree($0,$360,$241);
   _compress_block($0,$359,$360);
  }
 } while(0);
 _init_block($0);
 $361 = ($3|0)==(0);
 if ($361) {
  return;
 }
 $362 = ((($0)) + 5820|0);
 $363 = HEAP32[$362>>2]|0;
 $364 = ($363|0)>(8);
 if ($364) {
  $365 = ((($0)) + 5816|0);
  $366 = HEAP16[$365>>1]|0;
  $367 = $366&255;
  $368 = ((($0)) + 20|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = (($369) + 1)|0;
  HEAP32[$368>>2] = $370;
  $371 = ((($0)) + 8|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = (($372) + ($369)|0);
  HEAP8[$373>>0] = $367;
  $374 = HEAP16[$365>>1]|0;
  $375 = ($374&65535) >>> 8;
  $376 = $375&255;
  $377 = HEAP32[$368>>2]|0;
  $378 = (($377) + 1)|0;
  HEAP32[$368>>2] = $378;
  $379 = HEAP32[$371>>2]|0;
  $380 = (($379) + ($377)|0);
  HEAP8[$380>>0] = $376;
  $$pre$phi$iZ2D = $365;
 } else {
  $381 = ($363|0)>(0);
  $382 = ((($0)) + 5816|0);
  if ($381) {
   $383 = HEAP16[$382>>1]|0;
   $384 = $383&255;
   $385 = ((($0)) + 20|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = (($386) + 1)|0;
   HEAP32[$385>>2] = $387;
   $388 = ((($0)) + 8|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = (($389) + ($386)|0);
   HEAP8[$390>>0] = $384;
   $$pre$phi$iZ2D = $382;
  } else {
   $$pre$phi$iZ2D = $382;
  }
 }
 HEAP16[$$pre$phi$iZ2D>>1] = 0;
 HEAP32[$362>>2] = 0;
 return;
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2 = 0, $$$2$us = 0, $$$i = 0, $$$us = 0, $$$us$i = 0, $$0 = 0, $$0$$i = 0, $$0$$us$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i111 = 0, $$0$i119 = 0, $$0$lcssa$i = 0, $$0108$i = 0, $$0108$us$i = 0, $$010810$i = 0, $$010812$i = 0, $$010812$us$i = 0, $$011$i = 0;
 var $$011$us$i = 0, $$0111$i = 0, $$0111$us$i = 0, $$0115$ph$i131 = 0, $$02430$i = 0, $$02527$i = 0, $$02629$i = 0, $$052$lcssa$i = 0, $$052$lcssa$i112 = 0, $$052$lcssa$i120 = 0, $$05254$i = 0, $$05254$i109 = 0, $$05254$i117 = 0, $$053$i = 0, $$055$i = 0, $$055$i108 = 0, $$055$i116 = 0, $$07$i$i = 0, $$08$i$i = 0, $$097$lcssa152 = 0;
 var $$097138 = 0, $$098137 = 0, $$1 = 0, $$1$i = 0, $$1$i110 = 0, $$1$i118 = 0, $$100 = 0, $$11099$i = 0, $$199133 = 0, $$2$i = 0, $$2$lcssa = 0, $$2110$i = 0, $$2110$ph$i$lcssa = 0, $$2110$ph$i132 = 0, $$2114$i = 0, $$2114$in$i = 0, $$2134 = 0, $$2134$us = 0, $$37$i = 0, $$idx$val = 0;
 var $$idx101$val = 0, $$idx102$val = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre149 = 0, $$pre150$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0;
 var $exitcond$i104 = 0, $exitcond21$i = 0, $exitcond31$i = 0, $scevgep$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5200|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 5204|0);
 HEAP32[$10>>2] = 573;
 $11 = ($8|0)>(0);
 if ($11) {
  $$097138 = -1;$$098137 = 0;
  while(1) {
   $27 = (($3) + ($$098137<<2)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = ($28<<16>>16)==(0);
   if ($29) {
    $34 = (((($3) + ($$098137<<2)|0)) + 2|0);
    HEAP16[$34>>1] = 0;
    $$1 = $$097138;
   } else {
    $30 = HEAP32[$9>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$9>>2] = $31;
    $32 = (((($0)) + 2908|0) + ($31<<2)|0);
    HEAP32[$32>>2] = $$098137;
    $33 = (((($0)) + 5208|0) + ($$098137)|0);
    HEAP8[$33>>0] = 0;
    $$1 = $$098137;
   }
   $35 = (($$098137) + 1)|0;
   $exitcond = ($35|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$097138 = $$1;$$098137 = $35;
   }
  }
  $$pre = HEAP32[$9>>2]|0;
  $12 = ($$pre|0)<(2);
  if ($12) {
   $$097$lcssa152 = $$1;$352 = $$pre;
   label = 3;
  } else {
   $$2$lcssa = $$1;$54 = $$pre;
  }
 } else {
  $$097$lcssa152 = -1;$352 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = ((($0)) + 5800|0);
  $14 = ($6|0)==(0|0);
  $15 = ((($0)) + 5804|0);
  if ($14) {
   $$2134$us = $$097$lcssa152;$19 = $352;
   while(1) {
    $16 = ($$2134$us|0)<(2);
    $17 = (($$2134$us) + 1)|0;
    $$$2$us = $16 ? $17 : $$2134$us;
    $$$us = $16 ? $17 : 0;
    $18 = (($19) + 1)|0;
    HEAP32[$9>>2] = $18;
    $20 = (((($0)) + 2908|0) + ($18<<2)|0);
    HEAP32[$20>>2] = $$$us;
    $21 = (($3) + ($$$us<<2)|0);
    HEAP16[$21>>1] = 1;
    $22 = (((($0)) + 5208|0) + ($$$us)|0);
    HEAP8[$22>>0] = 0;
    $23 = HEAP32[$13>>2]|0;
    $24 = (($23) + -1)|0;
    HEAP32[$13>>2] = $24;
    $25 = HEAP32[$9>>2]|0;
    $26 = ($25|0)<(2);
    if ($26) {
     $$2134$us = $$$2$us;$19 = $25;
    } else {
     $$2$lcssa = $$$2$us;$54 = $25;
     break;
    }
   }
  } else {
   $$2134 = $$097$lcssa152;$39 = $352;
   while(1) {
    $36 = ($$2134|0)<(2);
    $37 = (($$2134) + 1)|0;
    $$$2 = $36 ? $37 : $$2134;
    $$ = $36 ? $37 : 0;
    $38 = (($39) + 1)|0;
    HEAP32[$9>>2] = $38;
    $40 = (((($0)) + 2908|0) + ($38<<2)|0);
    HEAP32[$40>>2] = $$;
    $41 = (($3) + ($$<<2)|0);
    HEAP16[$41>>1] = 1;
    $42 = (((($0)) + 5208|0) + ($$)|0);
    HEAP8[$42>>0] = 0;
    $43 = HEAP32[$13>>2]|0;
    $44 = (($43) + -1)|0;
    HEAP32[$13>>2] = $44;
    $45 = (((($6) + ($$<<2)|0)) + 2|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = HEAP32[$15>>2]|0;
    $49 = (($48) - ($47))|0;
    HEAP32[$15>>2] = $49;
    $50 = HEAP32[$9>>2]|0;
    $51 = ($50|0)<(2);
    if ($51) {
     $$2134 = $$$2;$39 = $50;
    } else {
     $$2$lcssa = $$$2;$54 = $50;
     break;
    }
   }
  }
 }
 $52 = ((($1)) + 4|0);
 HEAP32[$52>>2] = $$2$lcssa;
 $53 = (($54|0) / 2)&-1;
 $$199133 = $53;$60 = $54;
 while(1) {
  $56 = (((($0)) + 2908|0) + ($$199133<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (((($0)) + 5208|0) + ($57)|0);
  $$053$i = $$199133 << 1;
  $59 = ($$053$i|0)>($60|0);
  L19: do {
   if ($59) {
    $$052$lcssa$i = $$199133;
   } else {
    $61 = (($3) + ($57<<2)|0);
    $$05254$i = $$199133;$$055$i = $$053$i;$63 = $60;
    while(1) {
     $62 = ($$055$i|0)<($63|0);
     do {
      if ($62) {
       $64 = $$055$i | 1;
       $65 = (((($0)) + 2908|0) + ($64<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($3) + ($66<<2)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = (((($0)) + 2908|0) + ($$055$i<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($3) + ($70<<2)|0);
       $72 = HEAP16[$71>>1]|0;
       $73 = ($68&65535)<($72&65535);
       if (!($73)) {
        $74 = ($68<<16>>16)==($72<<16>>16);
        if (!($74)) {
         $$1$i = $$055$i;
         break;
        }
        $75 = (((($0)) + 5208|0) + ($66)|0);
        $76 = HEAP8[$75>>0]|0;
        $77 = (((($0)) + 5208|0) + ($70)|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = ($76&255)>($78&255);
        if ($79) {
         $$1$i = $$055$i;
         break;
        }
       }
       $$1$i = $64;
      } else {
       $$1$i = $$055$i;
      }
     } while(0);
     $80 = HEAP16[$61>>1]|0;
     $81 = (((($0)) + 2908|0) + ($$1$i<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($3) + ($82<<2)|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = ($80&65535)<($84&65535);
     if ($85) {
      $$052$lcssa$i = $$05254$i;
      break L19;
     }
     $86 = ($80<<16>>16)==($84<<16>>16);
     if ($86) {
      $87 = HEAP8[$58>>0]|0;
      $88 = (((($0)) + 5208|0) + ($82)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = ($87&255)>($89&255);
      if (!($90)) {
       $$052$lcssa$i = $$05254$i;
       break L19;
      }
     }
     $91 = (((($0)) + 2908|0) + ($$05254$i<<2)|0);
     HEAP32[$91>>2] = $82;
     $$0$i = $$1$i << 1;
     $92 = HEAP32[$9>>2]|0;
     $93 = ($$0$i|0)>($92|0);
     if ($93) {
      $$052$lcssa$i = $$1$i;
      break;
     } else {
      $$05254$i = $$1$i;$$055$i = $$0$i;$63 = $92;
     }
    }
   }
  } while(0);
  $94 = (((($0)) + 2908|0) + ($$052$lcssa$i<<2)|0);
  HEAP32[$94>>2] = $57;
  $95 = ($$199133|0)>(1);
  if (!($95)) {
   break;
  }
  $96 = (($$199133) + -1)|0;
  $$pre149 = HEAP32[$9>>2]|0;
  $$199133 = $96;$60 = $$pre149;
 }
 $$pre150$pre = HEAP32[$9>>2]|0;
 $55 = ((($0)) + 2912|0);
 $$0 = $8;$99 = $$pre150$pre;
 while(1) {
  $97 = HEAP32[$55>>2]|0;
  $98 = (($99) + -1)|0;
  HEAP32[$9>>2] = $98;
  $100 = (((($0)) + 2908|0) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  HEAP32[$55>>2] = $101;
  $102 = (((($0)) + 5208|0) + ($101)|0);
  $103 = ($99|0)<(3);
  L39: do {
   if ($103) {
    $$052$lcssa$i120 = 1;
   } else {
    $104 = (($3) + ($101<<2)|0);
    $$05254$i117 = 1;$$055$i116 = 2;$106 = $98;
    while(1) {
     $105 = ($$055$i116|0)<($106|0);
     do {
      if ($105) {
       $107 = $$055$i116 | 1;
       $108 = (((($0)) + 2908|0) + ($107<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($3) + ($109<<2)|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = (((($0)) + 2908|0) + ($$055$i116<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($3) + ($113<<2)|0);
       $115 = HEAP16[$114>>1]|0;
       $116 = ($111&65535)<($115&65535);
       if (!($116)) {
        $117 = ($111<<16>>16)==($115<<16>>16);
        if (!($117)) {
         $$1$i118 = $$055$i116;
         break;
        }
        $118 = (((($0)) + 5208|0) + ($109)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = (((($0)) + 5208|0) + ($113)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ($119&255)>($121&255);
        if ($122) {
         $$1$i118 = $$055$i116;
         break;
        }
       }
       $$1$i118 = $107;
      } else {
       $$1$i118 = $$055$i116;
      }
     } while(0);
     $123 = HEAP16[$104>>1]|0;
     $124 = (((($0)) + 2908|0) + ($$1$i118<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($3) + ($125<<2)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = ($123&65535)<($127&65535);
     if ($128) {
      $$052$lcssa$i120 = $$05254$i117;
      break L39;
     }
     $129 = ($123<<16>>16)==($127<<16>>16);
     if ($129) {
      $130 = HEAP8[$102>>0]|0;
      $131 = (((($0)) + 5208|0) + ($125)|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = ($130&255)>($132&255);
      if (!($133)) {
       $$052$lcssa$i120 = $$05254$i117;
       break L39;
      }
     }
     $134 = (((($0)) + 2908|0) + ($$05254$i117<<2)|0);
     HEAP32[$134>>2] = $125;
     $$0$i119 = $$1$i118 << 1;
     $135 = HEAP32[$9>>2]|0;
     $136 = ($$0$i119|0)>($135|0);
     if ($136) {
      $$052$lcssa$i120 = $$1$i118;
      break;
     } else {
      $$05254$i117 = $$1$i118;$$055$i116 = $$0$i119;$106 = $135;
     }
    }
   }
  } while(0);
  $137 = (((($0)) + 2908|0) + ($$052$lcssa$i120<<2)|0);
  HEAP32[$137>>2] = $101;
  $138 = HEAP32[$55>>2]|0;
  $139 = HEAP32[$10>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$10>>2] = $140;
  $141 = (((($0)) + 2908|0) + ($140<<2)|0);
  HEAP32[$141>>2] = $97;
  $142 = HEAP32[$10>>2]|0;
  $143 = (($142) + -1)|0;
  HEAP32[$10>>2] = $143;
  $144 = (((($0)) + 2908|0) + ($143<<2)|0);
  HEAP32[$144>>2] = $138;
  $145 = (($3) + ($97<<2)|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146&65535;
  $148 = (($3) + ($138<<2)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149&65535;
  $151 = (($150) + ($147))|0;
  $152 = $151&65535;
  $153 = (($3) + ($$0<<2)|0);
  HEAP16[$153>>1] = $152;
  $154 = (((($0)) + 5208|0) + ($97)|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = (((($0)) + 5208|0) + ($138)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($155&255)<($157&255);
  $$100 = $158 ? $157 : $155;
  $159 = $$100&255;
  $160 = (($159) + 1)|0;
  $161 = $160&255;
  $162 = (((($0)) + 5208|0) + ($$0)|0);
  HEAP8[$162>>0] = $161;
  $163 = $$0&65535;
  $164 = (((($3) + ($138<<2)|0)) + 2|0);
  HEAP16[$164>>1] = $163;
  $165 = (((($3) + ($97<<2)|0)) + 2|0);
  HEAP16[$165>>1] = $163;
  $166 = (($$0) + 1)|0;
  HEAP32[$55>>2] = $$0;
  $167 = HEAP32[$9>>2]|0;
  $168 = ($167|0)<(2);
  L55: do {
   if ($168) {
    $$052$lcssa$i112 = 1;
   } else {
    $$05254$i109 = 1;$$055$i108 = 2;$170 = $167;
    while(1) {
     $169 = ($$055$i108|0)<($170|0);
     do {
      if ($169) {
       $171 = $$055$i108 | 1;
       $172 = (((($0)) + 2908|0) + ($171<<2)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (($3) + ($173<<2)|0);
       $175 = HEAP16[$174>>1]|0;
       $176 = (((($0)) + 2908|0) + ($$055$i108<<2)|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = (($3) + ($177<<2)|0);
       $179 = HEAP16[$178>>1]|0;
       $180 = ($175&65535)<($179&65535);
       if (!($180)) {
        $181 = ($175<<16>>16)==($179<<16>>16);
        if (!($181)) {
         $$1$i110 = $$055$i108;
         break;
        }
        $182 = (((($0)) + 5208|0) + ($173)|0);
        $183 = HEAP8[$182>>0]|0;
        $184 = (((($0)) + 5208|0) + ($177)|0);
        $185 = HEAP8[$184>>0]|0;
        $186 = ($183&255)>($185&255);
        if ($186) {
         $$1$i110 = $$055$i108;
         break;
        }
       }
       $$1$i110 = $171;
      } else {
       $$1$i110 = $$055$i108;
      }
     } while(0);
     $187 = HEAP16[$153>>1]|0;
     $188 = (((($0)) + 2908|0) + ($$1$i110<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = (($3) + ($189<<2)|0);
     $191 = HEAP16[$190>>1]|0;
     $192 = ($187&65535)<($191&65535);
     if ($192) {
      $$052$lcssa$i112 = $$05254$i109;
      break L55;
     }
     $193 = ($187<<16>>16)==($191<<16>>16);
     if ($193) {
      $194 = HEAP8[$162>>0]|0;
      $195 = (((($0)) + 5208|0) + ($189)|0);
      $196 = HEAP8[$195>>0]|0;
      $197 = ($194&255)>($196&255);
      if (!($197)) {
       $$052$lcssa$i112 = $$05254$i109;
       break L55;
      }
     }
     $198 = (((($0)) + 2908|0) + ($$05254$i109<<2)|0);
     HEAP32[$198>>2] = $189;
     $$0$i111 = $$1$i110 << 1;
     $199 = HEAP32[$9>>2]|0;
     $200 = ($$0$i111|0)>($199|0);
     if ($200) {
      $$052$lcssa$i112 = $$1$i110;
      break;
     } else {
      $$05254$i109 = $$1$i110;$$055$i108 = $$0$i111;$170 = $199;
     }
    }
   }
  } while(0);
  $201 = (((($0)) + 2908|0) + ($$052$lcssa$i112<<2)|0);
  HEAP32[$201>>2] = $$0;
  $202 = HEAP32[$9>>2]|0;
  $203 = ($202|0)>(1);
  if ($203) {
   $$0 = $166;$99 = $202;
  } else {
   break;
  }
 }
 $204 = HEAP32[$55>>2]|0;
 $205 = HEAP32[$10>>2]|0;
 $206 = (($205) + -1)|0;
 HEAP32[$10>>2] = $206;
 $207 = (((($0)) + 2908|0) + ($206<<2)|0);
 HEAP32[$207>>2] = $204;
 $$idx$val = HEAP32[$1>>2]|0;
 $$idx101$val = HEAP32[$52>>2]|0;
 $$idx102$val = HEAP32[$4>>2]|0;
 $208 = HEAP32[$$idx102$val>>2]|0;
 $209 = ((($$idx102$val)) + 4|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ((($$idx102$val)) + 8|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ((($$idx102$val)) + 16|0);
 $214 = HEAP32[$213>>2]|0;
 $scevgep$i = ((($0)) + 2876|0);
 dest=$scevgep$i; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $215 = HEAP32[$10>>2]|0;
 $216 = (((($0)) + 2908|0) + ($215<<2)|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = (((($$idx$val) + ($217<<2)|0)) + 2|0);
 HEAP16[$218>>1] = 0;
 $$010810$i = (($215) + 1)|0;
 $219 = ($$010810$i|0)<(573);
 L71: do {
  if ($219) {
   $220 = ((($0)) + 5800|0);
   $221 = ($208|0)==(0|0);
   $222 = ((($0)) + 5804|0);
   if ($221) {
    $$010812$us$i = $$010810$i;$$011$us$i = 0;
    while(1) {
     $223 = (((($0)) + 2908|0) + ($$010812$us$i<<2)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (((($$idx$val) + ($224<<2)|0)) + 2|0);
     $226 = HEAP16[$225>>1]|0;
     $227 = $226&65535;
     $228 = (((($$idx$val) + ($227<<2)|0)) + 2|0);
     $229 = HEAP16[$228>>1]|0;
     $230 = $229&65535;
     $231 = (($230) + 1)|0;
     $232 = ($230|0)<($214|0);
     $$$us$i = $232 ? $231 : $214;
     $233 = $232&1;
     $234 = $233 ^ 1;
     $$0$$us$i = (($234) + ($$011$us$i))|0;
     $235 = $$$us$i&65535;
     HEAP16[$225>>1] = $235;
     $236 = ($224|0)>($$idx101$val|0);
     if (!($236)) {
      $237 = (((($0)) + 2876|0) + ($$$us$i<<1)|0);
      $238 = HEAP16[$237>>1]|0;
      $239 = (($238) + 1)<<16>>16;
      HEAP16[$237>>1] = $239;
      $240 = ($224|0)<($212|0);
      if ($240) {
       $$0111$us$i = 0;
      } else {
       $241 = (($224) - ($212))|0;
       $242 = (($210) + ($241<<2)|0);
       $243 = HEAP32[$242>>2]|0;
       $$0111$us$i = $243;
      }
      $244 = (($$idx$val) + ($224<<2)|0);
      $245 = HEAP16[$244>>1]|0;
      $246 = $245&65535;
      $247 = (($$0111$us$i) + ($$$us$i))|0;
      $248 = Math_imul($246, $247)|0;
      $249 = HEAP32[$220>>2]|0;
      $250 = (($248) + ($249))|0;
      HEAP32[$220>>2] = $250;
     }
     $$0108$us$i = (($$010812$us$i) + 1)|0;
     $exitcond$i104 = ($$0108$us$i|0)==(573);
     if ($exitcond$i104) {
      $$0$lcssa$i = $$0$$us$i;
      break;
     } else {
      $$010812$us$i = $$0108$us$i;$$011$us$i = $$0$$us$i;
     }
    }
   } else {
    $$010812$i = $$010810$i;$$011$i = 0;
    while(1) {
     $251 = (((($0)) + 2908|0) + ($$010812$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (((($$idx$val) + ($252<<2)|0)) + 2|0);
     $254 = HEAP16[$253>>1]|0;
     $255 = $254&65535;
     $256 = (((($$idx$val) + ($255<<2)|0)) + 2|0);
     $257 = HEAP16[$256>>1]|0;
     $258 = $257&65535;
     $259 = (($258) + 1)|0;
     $260 = ($258|0)<($214|0);
     $$$i = $260 ? $259 : $214;
     $261 = $260&1;
     $262 = $261 ^ 1;
     $$0$$i = (($262) + ($$011$i))|0;
     $263 = $$$i&65535;
     HEAP16[$253>>1] = $263;
     $264 = ($252|0)>($$idx101$val|0);
     if (!($264)) {
      $265 = (((($0)) + 2876|0) + ($$$i<<1)|0);
      $266 = HEAP16[$265>>1]|0;
      $267 = (($266) + 1)<<16>>16;
      HEAP16[$265>>1] = $267;
      $268 = ($252|0)<($212|0);
      if ($268) {
       $$0111$i = 0;
      } else {
       $269 = (($252) - ($212))|0;
       $270 = (($210) + ($269<<2)|0);
       $271 = HEAP32[$270>>2]|0;
       $$0111$i = $271;
      }
      $272 = (($$idx$val) + ($252<<2)|0);
      $273 = HEAP16[$272>>1]|0;
      $274 = $273&65535;
      $275 = (($$0111$i) + ($$$i))|0;
      $276 = Math_imul($274, $275)|0;
      $277 = HEAP32[$220>>2]|0;
      $278 = (($276) + ($277))|0;
      HEAP32[$220>>2] = $278;
      $279 = (((($208) + ($252<<2)|0)) + 2|0);
      $280 = HEAP16[$279>>1]|0;
      $281 = $280&65535;
      $282 = (($281) + ($$0111$i))|0;
      $283 = Math_imul($282, $274)|0;
      $284 = HEAP32[$222>>2]|0;
      $285 = (($283) + ($284))|0;
      HEAP32[$222>>2] = $285;
     }
     $$0108$i = (($$010812$i) + 1)|0;
     $exitcond21$i = ($$0108$i|0)==(573);
     if ($exitcond21$i) {
      $$0$lcssa$i = $$0$$i;
      break;
     } else {
      $$010812$i = $$0108$i;$$011$i = $$0$$i;
     }
    }
   }
   $286 = ($$0$lcssa$i|0)==(0);
   if (!($286)) {
    $287 = (((($0)) + 2876|0) + ($214<<1)|0);
    $$2$i = $$0$lcssa$i;
    while(1) {
     $$2114$in$i = $214;
     while(1) {
      $$2114$i = (($$2114$in$i) + -1)|0;
      $288 = (((($0)) + 2876|0) + ($$2114$i<<1)|0);
      $289 = HEAP16[$288>>1]|0;
      $290 = ($289<<16>>16)==(0);
      if ($290) {
       $$2114$in$i = $$2114$i;
      } else {
       break;
      }
     }
     $291 = (($289) + -1)<<16>>16;
     HEAP16[$288>>1] = $291;
     $292 = (((($0)) + 2876|0) + ($$2114$in$i<<1)|0);
     $293 = HEAP16[$292>>1]|0;
     $294 = $293&65535;
     $295 = (($294) + 2)|0;
     $296 = $295&65535;
     HEAP16[$292>>1] = $296;
     $297 = HEAP16[$287>>1]|0;
     $298 = (($297) + -1)<<16>>16;
     HEAP16[$287>>1] = $298;
     $299 = (($$2$i) + -2)|0;
     $300 = ($$2$i|0)>(2);
     if ($300) {
      $$2$i = $299;
     } else {
      break;
     }
    }
    $301 = ($214|0)==(0);
    if (!($301)) {
     $$11099$i = 573;$$37$i = $214;$303 = $298;
     while(1) {
      $302 = $$37$i&65535;
      $304 = ($303<<16>>16)==(0);
      if ($304) {
       $$2110$ph$i$lcssa = $$11099$i;
      } else {
       $305 = $303&65535;
       $$0115$ph$i131 = $305;$$2110$ph$i132 = $$11099$i;
       while(1) {
        $$2110$i = $$2110$ph$i132;
        while(1) {
         $306 = (($$2110$i) + -1)|0;
         $307 = (((($0)) + 2908|0) + ($306<<2)|0);
         $308 = HEAP32[$307>>2]|0;
         $309 = ($308|0)>($$idx101$val|0);
         if ($309) {
          $$2110$i = $306;
         } else {
          break;
         }
        }
        $310 = (((($$idx$val) + ($308<<2)|0)) + 2|0);
        $311 = HEAP16[$310>>1]|0;
        $312 = $311&65535;
        $313 = ($$37$i|0)==($312|0);
        if (!($313)) {
         $314 = (($$37$i) - ($312))|0;
         $315 = (($$idx$val) + ($308<<2)|0);
         $316 = HEAP16[$315>>1]|0;
         $317 = $316&65535;
         $318 = Math_imul($317, $314)|0;
         $319 = HEAP32[$220>>2]|0;
         $320 = (($318) + ($319))|0;
         HEAP32[$220>>2] = $320;
         HEAP16[$310>>1] = $302;
        }
        $321 = (($$0115$ph$i131) + -1)|0;
        $322 = ($321|0)==(0);
        if ($322) {
         $$2110$ph$i$lcssa = $306;
         break;
        } else {
         $$0115$ph$i131 = $321;$$2110$ph$i132 = $306;
        }
       }
      }
      $323 = (($$37$i) + -1)|0;
      $324 = ($323|0)==(0);
      if ($324) {
       break L71;
      }
      $$phi$trans$insert$i = (((($0)) + 2876|0) + ($323<<1)|0);
      $$pre$i = HEAP16[$$phi$trans$insert$i>>1]|0;
      $$11099$i = $$2110$ph$i$lcssa;$$37$i = $323;$303 = $$pre$i;
     }
    }
   }
  }
 } while(0);
 $$02430$i = 0;$$02629$i = 1;
 while(1) {
  $326 = (($$02629$i) + -1)|0;
  $327 = (((($0)) + 2876|0) + ($326<<1)|0);
  $328 = HEAP16[$327>>1]|0;
  $329 = $328&65535;
  $330 = (($329) + ($$02430$i))|0;
  $331 = $330 << 1;
  $332 = $331&65535;
  $333 = (($2) + ($$02629$i<<1)|0);
  HEAP16[$333>>1] = $332;
  $334 = (($$02629$i) + 1)|0;
  $exitcond31$i = ($334|0)==(16);
  if ($exitcond31$i) {
   break;
  } else {
   $$02430$i = $331;$$02629$i = $334;
  }
 }
 $325 = ($$2$lcssa|0)<(0);
 if ($325) {
  STACKTOP = sp;return;
 } else {
  $$02527$i = 0;
 }
 while(1) {
  $335 = (((($3) + ($$02527$i<<2)|0)) + 2|0);
  $336 = HEAP16[$335>>1]|0;
  $337 = $336&65535;
  $338 = ($336<<16>>16)==(0);
  if (!($338)) {
   $339 = (($2) + ($337<<1)|0);
   $340 = HEAP16[$339>>1]|0;
   $341 = (($340) + 1)<<16>>16;
   HEAP16[$339>>1] = $341;
   $342 = $340&65535;
   $$0$i$i = 0;$$07$i$i = $337;$$08$i$i = $342;
   while(1) {
    $343 = $$08$i$i & 1;
    $344 = $$0$i$i | $343;
    $345 = $$08$i$i >>> 1;
    $346 = $344 << 1;
    $347 = (($$07$i$i) + -1)|0;
    $348 = ($$07$i$i|0)>(1);
    if ($348) {
     $$0$i$i = $346;$$07$i$i = $347;$$08$i$i = $345;
    } else {
     break;
    }
   }
   $349 = $344&65535;
   $350 = (($3) + ($$02527$i<<2)|0);
   HEAP16[$350>>1] = $349;
  }
  $351 = (($$02527$i) + 1)|0;
  $exitcond$i = ($$02527$i|0)==($$2$lcssa|0);
  if ($exitcond$i) {
   break;
  } else {
   $$02527$i = $351;
  }
 }
 STACKTOP = sp;return;
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert204 = 0, $$pn = 0, $$pre = 0, $$pre$phi206Z2D = 0, $$pre$phiZ2D = 0, $$pre205 = 0, $$sink = 0, $$sink$in = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge201 = 0, $storemerge202 = 0, $storemerge203 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5792|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert204 = ((($0)) + 5816|0);
  $$pre205 = HEAP16[$$phi$trans$insert204>>1]|0;
  $$pre$phi206Z2D = $$phi$trans$insert204;$$pre$phiZ2D = $$phi$trans$insert;$207 = $$pre;$214 = $$pre205;
 } else {
  $6 = ((($0)) + 5796|0);
  $7 = ((($0)) + 5784|0);
  $8 = ((($0)) + 5820|0);
  $9 = ((($0)) + 5816|0);
  $10 = ((($0)) + 20|0);
  $11 = ((($0)) + 8|0);
  $$0 = 0;
  while(1) {
   $12 = HEAP32[$6>>2]|0;
   $13 = (($12) + ($$0<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = (($$0) + 1)|0;
   $17 = HEAP32[$7>>2]|0;
   $18 = (($17) + ($$0)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($14<<16>>16)==(0);
   if ($21) {
    $22 = (((($1) + ($20<<2)|0)) + 2|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = HEAP32[$8>>2]|0;
    $26 = (16 - ($24))|0;
    $27 = ($25|0)>($26|0);
    $28 = (($1) + ($20<<2)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = $30 << $25;
    $32 = HEAP16[$9>>1]|0;
    $33 = $32&65535;
    $34 = $33 | $31;
    $35 = $34&65535;
    HEAP16[$9>>1] = $35;
    if ($27) {
     $36 = $34&255;
     $37 = HEAP32[$10>>2]|0;
     $38 = (($37) + 1)|0;
     HEAP32[$10>>2] = $38;
     $39 = HEAP32[$11>>2]|0;
     $40 = (($39) + ($37)|0);
     HEAP8[$40>>0] = $36;
     $41 = HEAP16[$9>>1]|0;
     $42 = ($41&65535) >>> 8;
     $43 = $42&255;
     $44 = HEAP32[$10>>2]|0;
     $45 = (($44) + 1)|0;
     HEAP32[$10>>2] = $45;
     $46 = HEAP32[$11>>2]|0;
     $47 = (($46) + ($44)|0);
     HEAP8[$47>>0] = $43;
     $48 = HEAP32[$8>>2]|0;
     $49 = (16 - ($48))|0;
     $50 = $30 >>> $49;
     $51 = $50&65535;
     HEAP16[$9>>1] = $51;
     $52 = (($24) + -16)|0;
     $53 = (($52) + ($48))|0;
     $238 = $51;$storemerge203 = $53;
    } else {
     $54 = (($25) + ($24))|0;
     $238 = $35;$storemerge203 = $54;
    }
    HEAP32[$8>>2] = $storemerge203;
    $239 = $238;$240 = $storemerge203;
   } else {
    $55 = (13073 + ($20)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 | 256;
    $59 = (($58) + 1)|0;
    $60 = (((($1) + ($59<<2)|0)) + 2|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = HEAP32[$8>>2]|0;
    $64 = (16 - ($62))|0;
    $65 = ($63|0)>($64|0);
    $66 = (($1) + ($59<<2)|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67&65535;
    $69 = $68 << $63;
    $70 = HEAP16[$9>>1]|0;
    $71 = $70&65535;
    $72 = $71 | $69;
    $73 = $72&65535;
    HEAP16[$9>>1] = $73;
    if ($65) {
     $74 = $72&255;
     $75 = HEAP32[$10>>2]|0;
     $76 = (($75) + 1)|0;
     HEAP32[$10>>2] = $76;
     $77 = HEAP32[$11>>2]|0;
     $78 = (($77) + ($75)|0);
     HEAP8[$78>>0] = $74;
     $79 = HEAP16[$9>>1]|0;
     $80 = ($79&65535) >>> 8;
     $81 = $80&255;
     $82 = HEAP32[$10>>2]|0;
     $83 = (($82) + 1)|0;
     HEAP32[$10>>2] = $83;
     $84 = HEAP32[$11>>2]|0;
     $85 = (($84) + ($82)|0);
     HEAP8[$85>>0] = $81;
     $86 = HEAP32[$8>>2]|0;
     $87 = (16 - ($86))|0;
     $88 = $68 >>> $87;
     $89 = $88&65535;
     HEAP16[$9>>1] = $89;
     $90 = (($62) + -16)|0;
     $91 = (($90) + ($86))|0;
     $106 = $89;$93 = $91;
    } else {
     $92 = (($63) + ($62))|0;
     $106 = $73;$93 = $92;
    }
    HEAP32[$8>>2] = $93;
    $94 = (1240 + ($57<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($57) + -8)|0;
    $97 = ($96>>>0)<(20);
    if ($97) {
     $98 = (1356 + ($57<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($20) - ($99))|0;
     $101 = (16 - ($95))|0;
     $102 = ($93|0)>($101|0);
     $103 = $100 & 65535;
     $104 = $103 << $93;
     $105 = $106&65535;
     $107 = $104 | $105;
     $108 = $107&65535;
     HEAP16[$9>>1] = $108;
     if ($102) {
      $109 = $107&255;
      $110 = HEAP32[$10>>2]|0;
      $111 = (($110) + 1)|0;
      HEAP32[$10>>2] = $111;
      $112 = HEAP32[$11>>2]|0;
      $113 = (($112) + ($110)|0);
      HEAP8[$113>>0] = $109;
      $114 = HEAP16[$9>>1]|0;
      $115 = ($114&65535) >>> 8;
      $116 = $115&255;
      $117 = HEAP32[$10>>2]|0;
      $118 = (($117) + 1)|0;
      HEAP32[$10>>2] = $118;
      $119 = HEAP32[$11>>2]|0;
      $120 = (($119) + ($117)|0);
      HEAP8[$120>>0] = $116;
      $121 = HEAP32[$8>>2]|0;
      $122 = (16 - ($121))|0;
      $123 = $103 >>> $122;
      $124 = $123&65535;
      HEAP16[$9>>1] = $124;
      $125 = (($95) + -16)|0;
      $126 = (($125) + ($121))|0;
      $241 = $124;$storemerge202 = $126;
     } else {
      $127 = (($93) + ($95))|0;
      $241 = $108;$storemerge202 = $127;
     }
     HEAP32[$8>>2] = $storemerge202;
     $137 = $storemerge202;$144 = $241;
    } else {
     $137 = $93;$144 = $106;
    }
    $128 = (($15) + -1)|0;
    $129 = ($128>>>0)<(256);
    $130 = $128 >>> 7;
    $131 = (($130) + 256)|0;
    $$pn = $129 ? $128 : $131;
    $$sink$in = (12561 + ($$pn)|0);
    $$sink = HEAP8[$$sink$in>>0]|0;
    $132 = $$sink&255;
    $133 = (((($2) + ($132<<2)|0)) + 2|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $136 = (16 - ($135))|0;
    $138 = ($137|0)>($136|0);
    $139 = (($2) + ($132<<2)|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = $140&65535;
    $142 = $141 << $137;
    $143 = $144&65535;
    $145 = $143 | $142;
    $146 = $145&65535;
    HEAP16[$9>>1] = $146;
    if ($138) {
     $147 = $145&255;
     $148 = HEAP32[$10>>2]|0;
     $149 = (($148) + 1)|0;
     HEAP32[$10>>2] = $149;
     $150 = HEAP32[$11>>2]|0;
     $151 = (($150) + ($148)|0);
     HEAP8[$151>>0] = $147;
     $152 = HEAP16[$9>>1]|0;
     $153 = ($152&65535) >>> 8;
     $154 = $153&255;
     $155 = HEAP32[$10>>2]|0;
     $156 = (($155) + 1)|0;
     HEAP32[$10>>2] = $156;
     $157 = HEAP32[$11>>2]|0;
     $158 = (($157) + ($155)|0);
     HEAP8[$158>>0] = $154;
     $159 = HEAP32[$8>>2]|0;
     $160 = (16 - ($159))|0;
     $161 = $141 >>> $160;
     $162 = $161&65535;
     HEAP16[$9>>1] = $162;
     $163 = (($135) + -16)|0;
     $164 = (($163) + ($159))|0;
     $166 = $164;$179 = $162;
    } else {
     $165 = (($137) + ($135))|0;
     $166 = $165;$179 = $146;
    }
    HEAP32[$8>>2] = $166;
    $167 = (1120 + ($132<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($132) + -4)|0;
    $170 = ($169>>>0)<(26);
    if ($170) {
     $171 = (1472 + ($132<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($128) - ($172))|0;
     $174 = (16 - ($168))|0;
     $175 = ($166|0)>($174|0);
     $176 = $173 & 65535;
     $177 = $176 << $166;
     $178 = $179&65535;
     $180 = $177 | $178;
     $181 = $180&65535;
     HEAP16[$9>>1] = $181;
     if ($175) {
      $182 = $180&255;
      $183 = HEAP32[$10>>2]|0;
      $184 = (($183) + 1)|0;
      HEAP32[$10>>2] = $184;
      $185 = HEAP32[$11>>2]|0;
      $186 = (($185) + ($183)|0);
      HEAP8[$186>>0] = $182;
      $187 = HEAP16[$9>>1]|0;
      $188 = ($187&65535) >>> 8;
      $189 = $188&255;
      $190 = HEAP32[$10>>2]|0;
      $191 = (($190) + 1)|0;
      HEAP32[$10>>2] = $191;
      $192 = HEAP32[$11>>2]|0;
      $193 = (($192) + ($190)|0);
      HEAP8[$193>>0] = $189;
      $194 = HEAP32[$8>>2]|0;
      $195 = (16 - ($194))|0;
      $196 = $176 >>> $195;
      $197 = $196&65535;
      HEAP16[$9>>1] = $197;
      $198 = (($168) + -16)|0;
      $199 = (($198) + ($194))|0;
      $242 = $197;$storemerge201 = $199;
     } else {
      $200 = (($166) + ($168))|0;
      $242 = $181;$storemerge201 = $200;
     }
     HEAP32[$8>>2] = $storemerge201;
     $239 = $242;$240 = $storemerge201;
    } else {
     $239 = $179;$240 = $166;
    }
   }
   $201 = HEAP32[$3>>2]|0;
   $202 = ($16>>>0)<($201>>>0);
   if ($202) {
    $$0 = $16;
   } else {
    $$pre$phi206Z2D = $9;$$pre$phiZ2D = $8;$207 = $240;$214 = $239;
    break;
   }
  }
 }
 $203 = ((($1)) + 1026|0);
 $204 = HEAP16[$203>>1]|0;
 $205 = $204&65535;
 $206 = (16 - ($205))|0;
 $208 = ($207|0)>($206|0);
 $209 = ((($1)) + 1024|0);
 $210 = HEAP16[$209>>1]|0;
 $211 = $210&65535;
 $212 = $211 << $207;
 $213 = $214&65535;
 $215 = $213 | $212;
 $216 = $215&65535;
 HEAP16[$$pre$phi206Z2D>>1] = $216;
 if ($208) {
  $217 = $215&255;
  $218 = ((($0)) + 20|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[$218>>2] = $220;
  $221 = ((($0)) + 8|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + ($219)|0);
  HEAP8[$223>>0] = $217;
  $224 = HEAP16[$$pre$phi206Z2D>>1]|0;
  $225 = ($224&65535) >>> 8;
  $226 = $225&255;
  $227 = HEAP32[$218>>2]|0;
  $228 = (($227) + 1)|0;
  HEAP32[$218>>2] = $228;
  $229 = HEAP32[$221>>2]|0;
  $230 = (($229) + ($227)|0);
  HEAP8[$230>>0] = $226;
  $231 = HEAP32[$$pre$phiZ2D>>2]|0;
  $232 = (16 - ($231))|0;
  $233 = $211 >>> $232;
  $234 = $233&65535;
  HEAP16[$$pre$phi206Z2D>>1] = $234;
  $235 = (($205) + -16)|0;
  $236 = (($235) + ($231))|0;
  $storemerge = $236;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 } else {
  $237 = (($207) + ($205))|0;
  $storemerge = $237;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 }
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$273 = 0, $$$274 = 0, $$0 = 0, $$0$ph = 0, $$0255$ph = 0, $$0255$ph$phi = 0, $$0256$ph = 0, $$0257 = 0, $$1258 = 0, $$1260$ph = 0, $$1263$ph = 0, $$2 = 0, $$272 = 0, $$274 = 0, $$pre = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge265 = 0, $storemerge267 = 0, $storemerge269 = 0, $storemerge270 = 0, $storemerge271 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($4<<16>>16)==(0);
 $$ = $6 ? 3 : 4;
 $$272 = $6 ? 138 : 7;
 $7 = ((($0)) + 2754|0);
 $8 = ((($0)) + 5820|0);
 $9 = ((($0)) + 2752|0);
 $10 = ((($0)) + 5816|0);
 $11 = ((($0)) + 20|0);
 $12 = ((($0)) + 8|0);
 $13 = ((($0)) + 2758|0);
 $14 = ((($0)) + 2756|0);
 $15 = ((($0)) + 2750|0);
 $16 = ((($0)) + 2748|0);
 $$0$ph = 0;$$0255$ph = -1;$$0256$ph = $5;$$1260$ph = $$272;$$1263$ph = $$;
 L1: while(1) {
  $$0 = $$0$ph;$$0257 = 0;
  while(1) {
   $17 = ($$0|0)>($2|0);
   if ($17) {
    break L1;
   }
   $18 = (($$0) + 1)|0;
   $19 = (((($1) + ($18<<2)|0)) + 2|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($$0257) + 1)|0;
   $23 = ($22|0)<($$1260$ph|0);
   $24 = ($$0256$ph|0)==($21|0);
   $or$cond = $23 & $24;
   if ($or$cond) {
    $$0 = $18;$$0257 = $22;
   } else {
    break;
   }
  }
  $25 = ($22|0)<($$1263$ph|0);
  do {
   if ($25) {
    $26 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
    $27 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
    $$pre288 = HEAP32[$8>>2]|0;
    $$pre289 = HEAP16[$10>>1]|0;
    $$1258 = $22;$31 = $$pre288;$37 = $$pre289;
    while(1) {
     $28 = HEAP16[$26>>1]|0;
     $29 = $28&65535;
     $30 = (16 - ($29))|0;
     $32 = ($31|0)>($30|0);
     $33 = HEAP16[$27>>1]|0;
     $34 = $33&65535;
     $35 = $34 << $31;
     $36 = $37&65535;
     $38 = $36 | $35;
     $39 = $38&65535;
     HEAP16[$10>>1] = $39;
     if ($32) {
      $40 = $38&255;
      $41 = HEAP32[$11>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$11>>2] = $42;
      $43 = HEAP32[$12>>2]|0;
      $44 = (($43) + ($41)|0);
      HEAP8[$44>>0] = $40;
      $45 = HEAP16[$10>>1]|0;
      $46 = ($45&65535) >>> 8;
      $47 = $46&255;
      $48 = HEAP32[$11>>2]|0;
      $49 = (($48) + 1)|0;
      HEAP32[$11>>2] = $49;
      $50 = HEAP32[$12>>2]|0;
      $51 = (($50) + ($48)|0);
      HEAP8[$51>>0] = $47;
      $52 = HEAP32[$8>>2]|0;
      $53 = (16 - ($52))|0;
      $54 = $34 >>> $53;
      $55 = $54&65535;
      HEAP16[$10>>1] = $55;
      $56 = (($29) + -16)|0;
      $57 = (($56) + ($52))|0;
      $273 = $55;$storemerge271 = $57;
     } else {
      $58 = (($31) + ($29))|0;
      $273 = $39;$storemerge271 = $58;
     }
     HEAP32[$8>>2] = $storemerge271;
     $59 = (($$1258) + -1)|0;
     $60 = ($59|0)==(0);
     if ($60) {
      break;
     } else {
      $$1258 = $59;$31 = $storemerge271;$37 = $273;
     }
    }
   } else {
    $61 = ($$0256$ph|0)==(0);
    if (!($61)) {
     $62 = ($$0256$ph|0)==($$0255$ph|0);
     if ($62) {
      $$pre = HEAP32[$8>>2]|0;
      $$pre287 = HEAP16[$10>>1]|0;
      $$2 = $22;$105 = $$pre287;$99 = $$pre;
     } else {
      $63 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = HEAP32[$8>>2]|0;
      $67 = (16 - ($65))|0;
      $68 = ($66|0)>($67|0);
      $69 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 << $66;
      $73 = HEAP16[$10>>1]|0;
      $74 = $73&65535;
      $75 = $74 | $72;
      $76 = $75&65535;
      HEAP16[$10>>1] = $76;
      if ($68) {
       $77 = $75&255;
       $78 = HEAP32[$11>>2]|0;
       $79 = (($78) + 1)|0;
       HEAP32[$11>>2] = $79;
       $80 = HEAP32[$12>>2]|0;
       $81 = (($80) + ($78)|0);
       HEAP8[$81>>0] = $77;
       $82 = HEAP16[$10>>1]|0;
       $83 = ($82&65535) >>> 8;
       $84 = $83&255;
       $85 = HEAP32[$11>>2]|0;
       $86 = (($85) + 1)|0;
       HEAP32[$11>>2] = $86;
       $87 = HEAP32[$12>>2]|0;
       $88 = (($87) + ($85)|0);
       HEAP8[$88>>0] = $84;
       $89 = HEAP32[$8>>2]|0;
       $90 = (16 - ($89))|0;
       $91 = $71 >>> $90;
       $92 = $91&65535;
       HEAP16[$10>>1] = $92;
       $93 = (($65) + -16)|0;
       $94 = (($93) + ($89))|0;
       $274 = $92;$storemerge270 = $94;
      } else {
       $95 = (($66) + ($65))|0;
       $274 = $76;$storemerge270 = $95;
      }
      HEAP32[$8>>2] = $storemerge270;
      $$2 = $$0257;$105 = $274;$99 = $storemerge270;
     }
     $96 = HEAP16[$15>>1]|0;
     $97 = $96&65535;
     $98 = (16 - ($97))|0;
     $100 = ($99|0)>($98|0);
     $101 = HEAP16[$16>>1]|0;
     $102 = $101&65535;
     $103 = $102 << $99;
     $104 = $105&65535;
     $106 = $104 | $103;
     $107 = $106&65535;
     HEAP16[$10>>1] = $107;
     if ($100) {
      $108 = $106&255;
      $109 = HEAP32[$11>>2]|0;
      $110 = (($109) + 1)|0;
      HEAP32[$11>>2] = $110;
      $111 = HEAP32[$12>>2]|0;
      $112 = (($111) + ($109)|0);
      HEAP8[$112>>0] = $108;
      $113 = HEAP16[$10>>1]|0;
      $114 = ($113&65535) >>> 8;
      $115 = $114&255;
      $116 = HEAP32[$11>>2]|0;
      $117 = (($116) + 1)|0;
      HEAP32[$11>>2] = $117;
      $118 = HEAP32[$12>>2]|0;
      $119 = (($118) + ($116)|0);
      HEAP8[$119>>0] = $115;
      $120 = HEAP32[$8>>2]|0;
      $121 = (16 - ($120))|0;
      $122 = $102 >>> $121;
      $123 = $122&65535;
      HEAP16[$10>>1] = $123;
      $124 = (($97) + -16)|0;
      $125 = (($124) + ($120))|0;
      $127 = $125;$133 = $122;
     } else {
      $126 = (($99) + ($97))|0;
      $127 = $126;$133 = $106;
     }
     HEAP32[$8>>2] = $127;
     $128 = ($127|0)>(14);
     $129 = (($$2) + 65533)|0;
     $130 = $129 & 65535;
     $131 = $130 << $127;
     $132 = $133 & 65535;
     $134 = $132 | $131;
     $135 = $134&65535;
     HEAP16[$10>>1] = $135;
     if ($128) {
      $136 = $134&255;
      $137 = HEAP32[$11>>2]|0;
      $138 = (($137) + 1)|0;
      HEAP32[$11>>2] = $138;
      $139 = HEAP32[$12>>2]|0;
      $140 = (($139) + ($137)|0);
      HEAP8[$140>>0] = $136;
      $141 = HEAP16[$10>>1]|0;
      $142 = ($141&65535) >>> 8;
      $143 = $142&255;
      $144 = HEAP32[$11>>2]|0;
      $145 = (($144) + 1)|0;
      HEAP32[$11>>2] = $145;
      $146 = HEAP32[$12>>2]|0;
      $147 = (($146) + ($144)|0);
      HEAP8[$147>>0] = $143;
      $148 = HEAP32[$8>>2]|0;
      $149 = (16 - ($148))|0;
      $150 = $130 >>> $149;
      $151 = $150&65535;
      HEAP16[$10>>1] = $151;
      $152 = (($148) + -14)|0;
      $storemerge269 = $152;
     } else {
      $153 = (($127) + 2)|0;
      $storemerge269 = $153;
     }
     HEAP32[$8>>2] = $storemerge269;
     break;
    }
    $154 = ($22|0)<(11);
    if ($154) {
     $155 = HEAP16[$7>>1]|0;
     $156 = $155&65535;
     $157 = HEAP32[$8>>2]|0;
     $158 = (16 - ($156))|0;
     $159 = ($157|0)>($158|0);
     $160 = HEAP16[$9>>1]|0;
     $161 = $160&65535;
     $162 = $161 << $157;
     $163 = HEAP16[$10>>1]|0;
     $164 = $163&65535;
     $165 = $164 | $162;
     $166 = $165&65535;
     HEAP16[$10>>1] = $166;
     if ($159) {
      $167 = $165&255;
      $168 = HEAP32[$11>>2]|0;
      $169 = (($168) + 1)|0;
      HEAP32[$11>>2] = $169;
      $170 = HEAP32[$12>>2]|0;
      $171 = (($170) + ($168)|0);
      HEAP8[$171>>0] = $167;
      $172 = HEAP16[$10>>1]|0;
      $173 = ($172&65535) >>> 8;
      $174 = $173&255;
      $175 = HEAP32[$11>>2]|0;
      $176 = (($175) + 1)|0;
      HEAP32[$11>>2] = $176;
      $177 = HEAP32[$12>>2]|0;
      $178 = (($177) + ($175)|0);
      HEAP8[$178>>0] = $174;
      $179 = HEAP32[$8>>2]|0;
      $180 = (16 - ($179))|0;
      $181 = $161 >>> $180;
      $182 = $181&65535;
      HEAP16[$10>>1] = $182;
      $183 = (($156) + -16)|0;
      $184 = (($183) + ($179))|0;
      $186 = $184;$192 = $181;
     } else {
      $185 = (($157) + ($156))|0;
      $186 = $185;$192 = $165;
     }
     HEAP32[$8>>2] = $186;
     $187 = ($186|0)>(13);
     $188 = (($$0257) + 65534)|0;
     $189 = $188 & 65535;
     $190 = $189 << $186;
     $191 = $192 & 65535;
     $193 = $191 | $190;
     $194 = $193&65535;
     HEAP16[$10>>1] = $194;
     if ($187) {
      $195 = $193&255;
      $196 = HEAP32[$11>>2]|0;
      $197 = (($196) + 1)|0;
      HEAP32[$11>>2] = $197;
      $198 = HEAP32[$12>>2]|0;
      $199 = (($198) + ($196)|0);
      HEAP8[$199>>0] = $195;
      $200 = HEAP16[$10>>1]|0;
      $201 = ($200&65535) >>> 8;
      $202 = $201&255;
      $203 = HEAP32[$11>>2]|0;
      $204 = (($203) + 1)|0;
      HEAP32[$11>>2] = $204;
      $205 = HEAP32[$12>>2]|0;
      $206 = (($205) + ($203)|0);
      HEAP8[$206>>0] = $202;
      $207 = HEAP32[$8>>2]|0;
      $208 = (16 - ($207))|0;
      $209 = $189 >>> $208;
      $210 = $209&65535;
      HEAP16[$10>>1] = $210;
      $211 = (($207) + -13)|0;
      $storemerge267 = $211;
     } else {
      $212 = (($186) + 3)|0;
      $storemerge267 = $212;
     }
     HEAP32[$8>>2] = $storemerge267;
     break;
    } else {
     $213 = HEAP16[$13>>1]|0;
     $214 = $213&65535;
     $215 = HEAP32[$8>>2]|0;
     $216 = (16 - ($214))|0;
     $217 = ($215|0)>($216|0);
     $218 = HEAP16[$14>>1]|0;
     $219 = $218&65535;
     $220 = $219 << $215;
     $221 = HEAP16[$10>>1]|0;
     $222 = $221&65535;
     $223 = $222 | $220;
     $224 = $223&65535;
     HEAP16[$10>>1] = $224;
     if ($217) {
      $225 = $223&255;
      $226 = HEAP32[$11>>2]|0;
      $227 = (($226) + 1)|0;
      HEAP32[$11>>2] = $227;
      $228 = HEAP32[$12>>2]|0;
      $229 = (($228) + ($226)|0);
      HEAP8[$229>>0] = $225;
      $230 = HEAP16[$10>>1]|0;
      $231 = ($230&65535) >>> 8;
      $232 = $231&255;
      $233 = HEAP32[$11>>2]|0;
      $234 = (($233) + 1)|0;
      HEAP32[$11>>2] = $234;
      $235 = HEAP32[$12>>2]|0;
      $236 = (($235) + ($233)|0);
      HEAP8[$236>>0] = $232;
      $237 = HEAP32[$8>>2]|0;
      $238 = (16 - ($237))|0;
      $239 = $219 >>> $238;
      $240 = $239&65535;
      HEAP16[$10>>1] = $240;
      $241 = (($214) + -16)|0;
      $242 = (($241) + ($237))|0;
      $244 = $242;$250 = $239;
     } else {
      $243 = (($215) + ($214))|0;
      $244 = $243;$250 = $223;
     }
     HEAP32[$8>>2] = $244;
     $245 = ($244|0)>(9);
     $246 = (($$0257) + 65526)|0;
     $247 = $246 & 65535;
     $248 = $247 << $244;
     $249 = $250 & 65535;
     $251 = $249 | $248;
     $252 = $251&65535;
     HEAP16[$10>>1] = $252;
     if ($245) {
      $253 = $251&255;
      $254 = HEAP32[$11>>2]|0;
      $255 = (($254) + 1)|0;
      HEAP32[$11>>2] = $255;
      $256 = HEAP32[$12>>2]|0;
      $257 = (($256) + ($254)|0);
      HEAP8[$257>>0] = $253;
      $258 = HEAP16[$10>>1]|0;
      $259 = ($258&65535) >>> 8;
      $260 = $259&255;
      $261 = HEAP32[$11>>2]|0;
      $262 = (($261) + 1)|0;
      HEAP32[$11>>2] = $262;
      $263 = HEAP32[$12>>2]|0;
      $264 = (($263) + ($261)|0);
      HEAP8[$264>>0] = $260;
      $265 = HEAP32[$8>>2]|0;
      $266 = (16 - ($265))|0;
      $267 = $247 >>> $266;
      $268 = $267&65535;
      HEAP16[$10>>1] = $268;
      $269 = (($265) + -9)|0;
      $storemerge265 = $269;
     } else {
      $270 = (($244) + 7)|0;
      $storemerge265 = $270;
     }
     HEAP32[$8>>2] = $storemerge265;
     break;
    }
   }
  } while(0);
  $271 = ($20<<16>>16)==(0);
  $$274 = $24 ? 6 : 7;
  $272 = $271 | $24;
  $$$273 = $272 ? 3 : 4;
  $$$274 = $271 ? 138 : $$274;
  $$0255$ph$phi = $$0256$ph;$$0$ph = $18;$$0256$ph = $21;$$1260$ph = $$$274;$$1263$ph = $$$273;$$0255$ph = $$0255$ph$phi;
 }
 return;
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = (_malloc($3)|0);
 return ($4|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _adler32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$1184 = 0, $$0 = 0, $$0173 = 0, $$0174198 = 0, $$0178197 = 0, $$0190 = 0, $$1$lcssa = 0, $$1175$lcssa245248 = 0, $$1175220 = 0, $$1179$lcssa244249 = 0, $$1179219 = 0, $$1184$lcssa = 0, $$1184196 = 0, $$1199 = 0, $$2$lcssa246247 = 0, $$2176211 = 0, $$2180 = 0, $$2221 = 0, $$3 = 0;
 var $$3177203 = 0, $$3181210 = 0, $$3186$lcssa243250 = 0, $$3186218 = 0, $$4182202 = 0, $$4187 = 0, $$4212 = 0, $$5$lcssa = 0, $$5188209 = 0, $$5204 = 0, $$6 = 0, $$6189$lcssa = 0, $$6189201 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep241 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 >>> 16;
 $4 = $0 & 65535;
 $5 = ($2|0)==(1);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $8 = (($7) + ($4))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + -65521)|0;
  $$ = $9 ? $10 : $8;
  $11 = (($$) + ($3))|0;
  $12 = ($11>>>0)>(65520);
  $13 = (($11) + 15)|0;
  $$0173 = $12 ? $13 : $11;
  $14 = $$0173 << 16;
  $15 = $14 | $$;
  $$0190 = $15;
  return ($$0190|0);
 }
 $16 = ($1|0)==(0|0);
 if ($16) {
  $$0190 = 1;
  return ($$0190|0);
 }
 $17 = ($2>>>0)<(16);
 if ($17) {
  $19 = ($2|0)==(0);
  if ($19) {
   $$1$lcssa = $3;$$1184$lcssa = $4;
  } else {
   $$0174198 = $2;$$0178197 = $1;$$1184196 = $4;$$1199 = $3;
   while(1) {
    $20 = (($$0174198) + -1)|0;
    $21 = ((($$0178197)) + 1|0);
    $22 = HEAP8[$$0178197>>0]|0;
    $23 = $22&255;
    $24 = (($23) + ($$1184196))|0;
    $25 = (($24) + ($$1199))|0;
    $26 = ($20|0)==(0);
    if ($26) {
     $$1$lcssa = $25;$$1184$lcssa = $24;
     break;
    } else {
     $$0174198 = $20;$$0178197 = $21;$$1184196 = $24;$$1199 = $25;
    }
   }
  }
  $27 = ($$1184$lcssa>>>0)>(65520);
  $28 = (($$1184$lcssa) + -65521)|0;
  $$$1184 = $27 ? $28 : $$1184$lcssa;
  $29 = (($$1$lcssa>>>0) % 65521)&-1;
  $30 = $29 << 16;
  $31 = $30 | $$$1184;
  $$0190 = $31;
  return ($$0190|0);
 }
 $18 = ($2>>>0)>(5551);
 if ($18) {
  $$1175220 = $2;$$1179219 = $1;$$2221 = $3;$$3186218 = $4;
  while(1) {
   $32 = (($$1175220) + -5552)|0;
   $$0 = 347;$$2180 = $$1179219;$$3 = $$2221;$$4187 = $$3186218;
   while(1) {
    $33 = HEAP8[$$2180>>0]|0;
    $34 = $33&255;
    $35 = (($34) + ($$4187))|0;
    $36 = (($35) + ($$3))|0;
    $37 = ((($$2180)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($35) + ($39))|0;
    $41 = (($36) + ($40))|0;
    $42 = ((($$2180)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($40) + ($44))|0;
    $46 = (($41) + ($45))|0;
    $47 = ((($$2180)) + 3|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($45) + ($49))|0;
    $51 = (($46) + ($50))|0;
    $52 = ((($$2180)) + 4|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($50) + ($54))|0;
    $56 = (($51) + ($55))|0;
    $57 = ((($$2180)) + 5|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = (($55) + ($59))|0;
    $61 = (($56) + ($60))|0;
    $62 = ((($$2180)) + 6|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($60) + ($64))|0;
    $66 = (($61) + ($65))|0;
    $67 = ((($$2180)) + 7|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = (($65) + ($69))|0;
    $71 = (($66) + ($70))|0;
    $72 = ((($$2180)) + 8|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($70) + ($74))|0;
    $76 = (($71) + ($75))|0;
    $77 = ((($$2180)) + 9|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = (($75) + ($79))|0;
    $81 = (($76) + ($80))|0;
    $82 = ((($$2180)) + 10|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($80) + ($84))|0;
    $86 = (($81) + ($85))|0;
    $87 = ((($$2180)) + 11|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = (($85) + ($89))|0;
    $91 = (($86) + ($90))|0;
    $92 = ((($$2180)) + 12|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = (($90) + ($94))|0;
    $96 = (($91) + ($95))|0;
    $97 = ((($$2180)) + 13|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = (($95) + ($99))|0;
    $101 = (($96) + ($100))|0;
    $102 = ((($$2180)) + 14|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($100) + ($104))|0;
    $106 = (($101) + ($105))|0;
    $107 = ((($$2180)) + 15|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (($105) + ($109))|0;
    $111 = (($106) + ($110))|0;
    $112 = ((($$2180)) + 16|0);
    $113 = (($$0) + -1)|0;
    $114 = ($113|0)==(0);
    if ($114) {
     break;
    } else {
     $$0 = $113;$$2180 = $112;$$3 = $111;$$4187 = $110;
    }
   }
   $scevgep241 = ((($$1179219)) + 5552|0);
   $115 = (($110>>>0) % 65521)&-1;
   $116 = (($111>>>0) % 65521)&-1;
   $117 = ($32>>>0)>(5551);
   if ($117) {
    $$1175220 = $32;$$1179219 = $scevgep241;$$2221 = $116;$$3186218 = $115;
   } else {
    break;
   }
  }
  $118 = ($32|0)==(0);
  if ($118) {
   $$6 = $116;$$7 = $115;
  } else {
   $119 = ($32>>>0)>(15);
   if ($119) {
    $$1175$lcssa245248 = $32;$$1179$lcssa244249 = $scevgep241;$$2$lcssa246247 = $116;$$3186$lcssa243250 = $115;
    label = 14;
   } else {
    $$3177203 = $32;$$4182202 = $scevgep241;$$5204 = $116;$$6189201 = $115;
    label = 17;
   }
  }
 } else {
  $$1175$lcssa245248 = $2;$$1179$lcssa244249 = $1;$$2$lcssa246247 = $3;$$3186$lcssa243250 = $4;
  label = 14;
 }
 if ((label|0) == 14) {
  $120 = (($$1175$lcssa245248) + -16)|0;
  $121 = $120 & -16;
  $122 = (($121) + 16)|0;
  $$2176211 = $$1175$lcssa245248;$$3181210 = $$1179$lcssa244249;$$4212 = $$2$lcssa246247;$$5188209 = $$3186$lcssa243250;
  while(1) {
   $125 = (($$2176211) + -16)|0;
   $126 = HEAP8[$$3181210>>0]|0;
   $127 = $126&255;
   $128 = (($127) + ($$5188209))|0;
   $129 = (($128) + ($$4212))|0;
   $130 = ((($$3181210)) + 1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($128) + ($132))|0;
   $134 = (($129) + ($133))|0;
   $135 = ((($$3181210)) + 2|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($133) + ($137))|0;
   $139 = (($134) + ($138))|0;
   $140 = ((($$3181210)) + 3|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($138) + ($142))|0;
   $144 = (($139) + ($143))|0;
   $145 = ((($$3181210)) + 4|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($143) + ($147))|0;
   $149 = (($144) + ($148))|0;
   $150 = ((($$3181210)) + 5|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = (($148) + ($152))|0;
   $154 = (($149) + ($153))|0;
   $155 = ((($$3181210)) + 6|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = (($153) + ($157))|0;
   $159 = (($154) + ($158))|0;
   $160 = ((($$3181210)) + 7|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($158) + ($162))|0;
   $164 = (($159) + ($163))|0;
   $165 = ((($$3181210)) + 8|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = (($163) + ($167))|0;
   $169 = (($164) + ($168))|0;
   $170 = ((($$3181210)) + 9|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = (($168) + ($172))|0;
   $174 = (($169) + ($173))|0;
   $175 = ((($$3181210)) + 10|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($173) + ($177))|0;
   $179 = (($174) + ($178))|0;
   $180 = ((($$3181210)) + 11|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($178) + ($182))|0;
   $184 = (($179) + ($183))|0;
   $185 = ((($$3181210)) + 12|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = (($184) + ($188))|0;
   $190 = ((($$3181210)) + 13|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = (($189) + ($193))|0;
   $195 = ((($$3181210)) + 14|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = (($193) + ($197))|0;
   $199 = (($194) + ($198))|0;
   $200 = ((($$3181210)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($198) + ($202))|0;
   $204 = (($199) + ($203))|0;
   $205 = ((($$3181210)) + 16|0);
   $206 = ($125>>>0)>(15);
   if ($206) {
    $$2176211 = $125;$$3181210 = $205;$$4212 = $204;$$5188209 = $203;
   } else {
    break;
   }
  }
  $123 = (($120) - ($121))|0;
  $scevgep = (($$1179$lcssa244249) + ($122)|0);
  $124 = ($123|0)==(0);
  if ($124) {
   $$5$lcssa = $204;$$6189$lcssa = $203;
   label = 18;
  } else {
   $$3177203 = $123;$$4182202 = $scevgep;$$5204 = $204;$$6189201 = $203;
   label = 17;
  }
 }
 if ((label|0) == 17) {
  while(1) {
   label = 0;
   $207 = (($$3177203) + -1)|0;
   $208 = ((($$4182202)) + 1|0);
   $209 = HEAP8[$$4182202>>0]|0;
   $210 = $209&255;
   $211 = (($210) + ($$6189201))|0;
   $212 = (($211) + ($$5204))|0;
   $213 = ($207|0)==(0);
   if ($213) {
    $$5$lcssa = $212;$$6189$lcssa = $211;
    label = 18;
    break;
   } else {
    $$3177203 = $207;$$4182202 = $208;$$5204 = $212;$$6189201 = $211;
    label = 17;
   }
  }
 }
 if ((label|0) == 18) {
  $214 = (($$6189$lcssa>>>0) % 65521)&-1;
  $215 = (($$5$lcssa>>>0) % 65521)&-1;
  $$6 = $215;$$7 = $214;
 }
 $216 = $$6 << 16;
 $217 = $216 | $$7;
 $$0190 = $217;
 return ($$0190|0);
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_adler32_z($0,$1,$2)|0);
 return ($3|0);
}
function _crc32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$076$masked$i = 0, $$07699$i = 0, $$07898$i = 0, $$08297$i = 0, $$092$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$177$lcssa$i = 0, $$17791$i = 0, $$179$lcssa$i = 0, $$17990$i = 0, $$183$i = 0, $$187$i = 0, $$2$lcssa$i = 0, $$280$lcssa$i = 0, $$28085$i = 0, $$286$i = 0, $$3$i = 0, $$3$masked$i = 0;
 var $$381$i = 0, $$4$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep115$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = $0 ^ -1;
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$4$i = $4;
  } else {
   $$07699$i = $4;$$07898$i = $2;$$08297$i = $1;
   while(1) {
    $6 = $$08297$i;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
    $9 = ((($$08297$i)) + 1|0);
    $10 = HEAP8[$$08297$i>>0]|0;
    $11 = $10&255;
    $$076$masked$i = $$07699$i & 255;
    $12 = $11 ^ $$076$masked$i;
    $13 = (1632 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $$07699$i >>> 8;
    $16 = $14 ^ $15;
    $17 = (($$07898$i) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$4$i = $16;
     break L4;
    } else {
     $$07699$i = $16;$$07898$i = $17;$$08297$i = $9;
    }
   }
   $19 = ($$07898$i>>>0)>(31);
   if ($19) {
    $20 = (($$07898$i) + -32)|0;
    $21 = $20 & -32;
    $22 = (($21) + 32)|0;
    $scevgep115$i = (($$08297$i) + ($22)|0);
    $$092$i = $$08297$i;$$17791$i = $$07699$i;$$17990$i = $$07898$i;
    while(1) {
     $28 = ((($$092$i)) + 4|0);
     $29 = HEAP32[$$092$i>>2]|0;
     $30 = $29 ^ $$17791$i;
     $31 = $30 & 255;
     $32 = (4704 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $30 >>> 8;
     $35 = $34 & 255;
     $36 = (3680 + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 ^ $33;
     $39 = $30 >>> 16;
     $40 = $39 & 255;
     $41 = (2656 + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $38 ^ $42;
     $44 = $30 >>> 24;
     $45 = (1632 + ($44<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43 ^ $46;
     $48 = ((($$092$i)) + 8|0);
     $49 = HEAP32[$28>>2]|0;
     $50 = $47 ^ $49;
     $51 = $50 & 255;
     $52 = (4704 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $50 >>> 8;
     $55 = $54 & 255;
     $56 = (3680 + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 ^ $53;
     $59 = $50 >>> 16;
     $60 = $59 & 255;
     $61 = (2656 + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $58 ^ $62;
     $64 = $50 >>> 24;
     $65 = (1632 + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $63 ^ $66;
     $68 = ((($$092$i)) + 12|0);
     $69 = HEAP32[$48>>2]|0;
     $70 = $67 ^ $69;
     $71 = $70 & 255;
     $72 = (4704 + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $70 >>> 8;
     $75 = $74 & 255;
     $76 = (3680 + ($75<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 ^ $73;
     $79 = $70 >>> 16;
     $80 = $79 & 255;
     $81 = (2656 + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $78 ^ $82;
     $84 = $70 >>> 24;
     $85 = (1632 + ($84<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $83 ^ $86;
     $88 = ((($$092$i)) + 16|0);
     $89 = HEAP32[$68>>2]|0;
     $90 = $87 ^ $89;
     $91 = $90 & 255;
     $92 = (4704 + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $90 >>> 8;
     $95 = $94 & 255;
     $96 = (3680 + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $97 ^ $93;
     $99 = $90 >>> 16;
     $100 = $99 & 255;
     $101 = (2656 + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $98 ^ $102;
     $104 = $90 >>> 24;
     $105 = (1632 + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $103 ^ $106;
     $108 = ((($$092$i)) + 20|0);
     $109 = HEAP32[$88>>2]|0;
     $110 = $107 ^ $109;
     $111 = $110 & 255;
     $112 = (4704 + ($111<<2)|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $110 >>> 8;
     $115 = $114 & 255;
     $116 = (3680 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 ^ $113;
     $119 = $110 >>> 16;
     $120 = $119 & 255;
     $121 = (2656 + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $118 ^ $122;
     $124 = $110 >>> 24;
     $125 = (1632 + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $123 ^ $126;
     $128 = ((($$092$i)) + 24|0);
     $129 = HEAP32[$108>>2]|0;
     $130 = $127 ^ $129;
     $131 = $130 & 255;
     $132 = (4704 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $130 >>> 8;
     $135 = $134 & 255;
     $136 = (3680 + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $137 ^ $133;
     $139 = $130 >>> 16;
     $140 = $139 & 255;
     $141 = (2656 + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $138 ^ $142;
     $144 = $130 >>> 24;
     $145 = (1632 + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $143 ^ $146;
     $148 = ((($$092$i)) + 28|0);
     $149 = HEAP32[$128>>2]|0;
     $150 = $147 ^ $149;
     $151 = $150 & 255;
     $152 = (4704 + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $150 >>> 8;
     $155 = $154 & 255;
     $156 = (3680 + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $157 ^ $153;
     $159 = $150 >>> 16;
     $160 = $159 & 255;
     $161 = (2656 + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $158 ^ $162;
     $164 = $150 >>> 24;
     $165 = (1632 + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $163 ^ $166;
     $168 = ((($$092$i)) + 32|0);
     $169 = HEAP32[$148>>2]|0;
     $170 = $167 ^ $169;
     $171 = $170 & 255;
     $172 = (4704 + ($171<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $170 >>> 8;
     $175 = $174 & 255;
     $176 = (3680 + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 ^ $173;
     $179 = $170 >>> 16;
     $180 = $179 & 255;
     $181 = (2656 + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $178 ^ $182;
     $184 = $170 >>> 24;
     $185 = (1632 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $183 ^ $186;
     $188 = (($$17990$i) + -32)|0;
     $189 = ($188>>>0)>(31);
     if ($189) {
      $$092$i = $168;$$17791$i = $187;$$17990$i = $188;
     } else {
      break;
     }
    }
    $23 = (($20) - ($21))|0;
    $$0$lcssa$i = $scevgep115$i;$$177$lcssa$i = $187;$$179$lcssa$i = $23;
   } else {
    $$0$lcssa$i = $$08297$i;$$177$lcssa$i = $$07699$i;$$179$lcssa$i = $$07898$i;
   }
   $24 = ($$179$lcssa$i>>>0)>(3);
   if ($24) {
    $25 = (($$179$lcssa$i) + -4)|0;
    $26 = $25 >>> 2;
    $27 = (($26) + 1)|0;
    $$187$i = $$0$lcssa$i;$$28085$i = $$179$lcssa$i;$$286$i = $$177$lcssa$i;
    while(1) {
     $190 = ((($$187$i)) + 4|0);
     $191 = HEAP32[$$187$i>>2]|0;
     $192 = $191 ^ $$286$i;
     $193 = $192 & 255;
     $194 = (4704 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $192 >>> 8;
     $197 = $196 & 255;
     $198 = (3680 + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $199 ^ $195;
     $201 = $192 >>> 16;
     $202 = $201 & 255;
     $203 = (2656 + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $200 ^ $204;
     $206 = $192 >>> 24;
     $207 = (1632 + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $205 ^ $208;
     $210 = (($$28085$i) + -4)|0;
     $211 = ($210>>>0)>(3);
     if ($211) {
      $$187$i = $190;$$28085$i = $210;$$286$i = $209;
     } else {
      break;
     }
    }
    $212 = $26 << 2;
    $scevgep$i = (($$0$lcssa$i) + ($27<<2)|0);
    $213 = (($25) - ($212))|0;
    $$1$lcssa$i = $scevgep$i;$$2$lcssa$i = $209;$$280$lcssa$i = $213;
   } else {
    $$1$lcssa$i = $$0$lcssa$i;$$2$lcssa$i = $$177$lcssa$i;$$280$lcssa$i = $$179$lcssa$i;
   }
   $214 = ($$280$lcssa$i|0)==(0);
   if ($214) {
    $$4$i = $$2$lcssa$i;
   } else {
    $$183$i = $$1$lcssa$i;$$3$i = $$2$lcssa$i;$$381$i = $$280$lcssa$i;
    while(1) {
     $215 = ((($$183$i)) + 1|0);
     $216 = HEAP8[$$183$i>>0]|0;
     $217 = $216&255;
     $$3$masked$i = $$3$i & 255;
     $218 = $217 ^ $$3$masked$i;
     $219 = (1632 + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $$3$i >>> 8;
     $222 = $220 ^ $221;
     $223 = (($$381$i) + -1)|0;
     $224 = ($223|0)==(0);
     if ($224) {
      $$4$i = $222;
      break;
     } else {
      $$183$i = $215;$$3$i = $222;$$381$i = $223;
     }
    }
   }
  }
 } while(0);
 $225 = $$4$i ^ -1;
 $$1 = $225;
 return ($$1|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_crc32_z($0,$1,$2)|0);
 return ($3|0);
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_96();
 return;
}
function ___cxx_global_var_init_96() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(18659); //@line 95 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 return; //@line 95 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0); //@line 98 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_void(($2|0),(13464|0)); //@line 98 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0); //@line 100 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_bool(($3|0),(13469|0),1,1,0); //@line 100 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(13474); //@line 102 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(13479); //@line 103 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(13491); //@line 104 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(13505); //@line 105 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(13511); //@line 106 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(13526); //@line 107 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(13530); //@line 108 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(13543); //@line 109 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(13548); //@line 110 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(13562); //@line 112 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(13568); //@line 113 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 115 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_string(($4|0),(13575|0)); //@line 115 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0); //@line 116 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_string(($5|0),(13587|0)); //@line 116 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0); //@line 117 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_wstring(($6|0),4,(13620|0)); //@line 117 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0); //@line 118 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_emval(($7|0),(13633|0)); //@line 118 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(13649); //@line 126 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(13679); //@line 127 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(13716); //@line 128 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(13755); //@line 130 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(13786); //@line 131 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(13826); //@line 132 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(13855); //@line 133 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(13893); //@line 134 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(13923); //@line 135 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(13962); //@line 137 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(13994); //@line 138 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(14027); //@line 139 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(14060); //@line 140 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(14094); //@line 141 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(14127); //@line 142 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(14161); //@line 144 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(14192); //@line 145 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(14224); //@line 147 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 149 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -128 << 24 >> 24; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 127 << 24 >> 24; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -128 << 24 >> 24; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 127 << 24 >> 24; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = 0; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 255; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -32768 << 16 >> 16; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 32767 << 16 >> 16; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0)); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = 0; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 65535; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0)); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,0,-1); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,0,-1); //@line 51 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 52 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0); //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(($2|0),($3|0),4); //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 58 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0); //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(($2|0),($3|0),8); //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 58 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 91 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 92 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (184|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (192|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (208|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (216|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (232|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (240|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (256|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (264|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 77 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (176|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (280|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (312|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (640|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (632|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (624|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (616|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (608|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (600|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (592|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (584|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 77 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (560|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (552|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (536|0); //@line 60 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 37 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $1 = $3; //@line 37 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 37 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = ((($4)) + 4|0); //@line 98 "/usr/lib/emscripten/system/include/libcxx/typeinfo"
 $6 = HEAP32[$5>>2]|0; //@line 98 "/usr/lib/emscripten/system/include/libcxx/typeinfo"
 $7 = (___strdup($6)|0); //@line 37 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return ($7|0); //@line 37 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18072|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_515($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($40) + ($$04756))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9952|0);
}
function _dummy_515($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484704$i = 0, $$$3484705$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463593$i = 0, $$0464602$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487651$i = 0, $$0488$i = 0, $$0488662$i = 0, $$0488664$i = 0, $$0496$$9$i = 0, $$0497663$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509591$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514646$i = 0, $$0520$i = 0, $$0521$$i = 0, $$0521$i = 0, $$0523$i = 0;
 var $$0525$i = 0, $$0527$i = 0, $$0527638$i = 0, $$0527640$i = 0, $$0530645$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482670$i = 0, $$1489650$i = 0, $$1499$lcssa$i = 0, $$1499669$i = 0, $$1508592$i = 0, $$1512$lcssa$i = 0, $$1512616$i = 0, $$1515$i = 0, $$1524$i = 0, $$1526$i = 0;
 var $$1528623$i = 0, $$1531$lcssa$i = 0, $$1531639$i = 0, $$1606$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$544$i = 0, $$2476$$546$i = 0;
 var $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490631$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516627$i = 0, $$2529$i = 0, $$2532626$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0, $$3484657$i = 0;
 var $$3501$lcssa$i = 0, $$3501656$i = 0, $$3533622$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478599$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$536$i = 0, $$537$$i = 0, $$537$i = 0, $$540$i = 0.0, $$543$i = 0, $$545$i = 0;
 var $$5486$lcssa$i = 0, $$5486632$i = 0, $$5493605$i = 0, $$5519$ph$i = 0, $$552$i = 0, $$553$i = 0, $$556$i = 0.0, $$5610$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494598$i = 0, $$7 = 0, $$7495609$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0, $$lcssa682$i = 0;
 var $$neg$i = 0, $$neg571$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr570$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi703$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre696$i = 0, $$pre699$i = 0, $$pre702$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0, $isdigit277 = 0;
 var $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $or$cond3$not$i = 0;
 var $or$cond412 = 0, $or$cond539$i = 0, $or$cond542$i = 0, $or$cond551$i = 0, $or$cond6$i = 0, $scevgep693$i = 0, $scevgep693694$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((14860 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_588($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 15340;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 15340;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 15340;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 15340 : (15342);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (15341);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 15340;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 15340;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 15350;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0521$i = 15357;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (15358) : (15363);
      $$0471$i = $371;$$0520$i = $378;$$0521$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0521$i = (15360);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0521$i)) + 9|0);
       $$0521$$i = $411 ? $$0521$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509591$i = 8.0;$$1508592$i = $415;
         while(1) {
          $418 = (($$1508592$i) + -1)|0;
          $419 = $$0509591$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509591$i = $419;$$1508592$i = $418;
          }
         }
         $421 = HEAP8[$$0521$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0523$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (15324 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0523$i)) + 1|0);
        HEAP8[$$0523$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1524$i = $453;
           break;
          }
          $460 = ((($$0523$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1524$i = $460;
         } else {
          $$1524$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0523$i = $$1524$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre699$i = $$1524$i;
       $463 = (($24) + ($$pre699$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre699$i))|0;
       $$0525$i = $or$cond412 ? $467 : $469;
       $470 = (($$0525$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0521$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre699$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0525$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$536$i = $485 ? $$1260 : $470;
       $$0470$i = $$536$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$537$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre696$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre696$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$553$i = $490 ? $5 : $26;
      $$0498$i = $$553$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482670$i = $$553$i;$$1499669$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488662$i = ((($$1499669$i)) + -4|0);
        $501 = ($$0488662$i>>>0)<($$1482670$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482670$i;
         } else {
          $$0488664$i = $$0488662$i;$$0497663$i = 0;
          while(1) {
           $502 = HEAP32[$$0488664$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497663$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488664$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488664$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482670$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488664$i = $$0488$i;$$0497663$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482670$i;
           break;
          }
          $513 = ((($$1482670$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499669$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482670$i = $$2483$ph$i;$$1499669$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr570$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$553$i;$$1499$lcssa$i = $492;$$pr570$i = $$pr$i;
      }
      $521 = ($$pr570$i|0)<(0);
      if ($521) {
       $522 = (($$537$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484657$i = $$1482$lcssa$i;$$3501656$i = $$1499$lcssa$i;$527 = $$pr570$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484657$i>>>0)<($$3501656$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487651$i = 0;$$1489650$i = $$3484657$i;
          while(1) {
           $537 = HEAP32[$$1489650$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487651$i))|0;
           HEAP32[$$1489650$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489650$i)) + 4|0);
           $543 = ($542>>>0)<($$3501656$i>>>0);
           if ($543) {
            $$0487651$i = $541;$$1489650$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484657$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484657$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484657$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484705$i = $$$3484$i;$$4502$i = $$3501656$i;
           break;
          }
          $548 = ((($$3501656$i)) + 4|0);
          HEAP32[$$3501656$i>>2] = $541;
          $$$3484705$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484657$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484657$i)) + 4|0);
          $$$3484704$i = $532 ? $533 : $$3484657$i;
          $$$3484705$i = $$$3484704$i;$$4502$i = $$3501656$i;
         }
        } while(0);
        $549 = $525 ? $$553$i : $$$3484705$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484657$i = $$$3484705$i;$$3501656$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484705$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$553$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514646$i = $564;$$0530645$i = 10;
        }
        while(1) {
         $567 = ($$0530645$i*10)|0;
         $568 = (($$0514646$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514646$i = $568;$$0530645$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$537$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$537$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$553$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0527638$i = (($588) + 1)|0;
       $589 = ($$0527638$i|0)<(9);
       if ($589) {
        $$0527640$i = $$0527638$i;$$1531639$i = 10;
        while(1) {
         $590 = ($$1531639$i*10)|0;
         $$0527$i = (($$0527640$i) + 1)|0;
         $exitcond$i = ($$0527$i|0)==(9);
         if ($exitcond$i) {
          $$1531$lcssa$i = $590;
          break;
         } else {
          $$0527640$i = $$0527$i;$$1531639$i = $590;
         }
        }
       } else {
        $$1531$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1531$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond539$i = $595 & $593;
       do {
        if ($or$cond539$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1531$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$540$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1531$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond542$i = $595 & $601;
          $$556$i = $or$cond542$i ? 1.0 : 1.5;
          $$0466$i = $$556$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$540$i;
          } else {
           $603 = HEAP8[$$0521$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$540$i;
            break;
           }
           $605 = -$$540$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1531$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490631$i = $587;$$5486632$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490631$i)) + -4|0);
           HEAP32[$$2490631$i>>2] = 0;
           $613 = ($612>>>0)<($$5486632$i>>>0);
           if ($613) {
            $614 = ((($$5486632$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486632$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490631$i = $612;$$5486632$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516627$i = $621;$$2532626$i = 10;
         }
         while(1) {
          $624 = ($$2532626$i*10)|0;
          $625 = (($$2516627$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516627$i = $625;$$2532626$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa682$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa682$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$537$$i = (($635) + ($$537$i))|0;
        $636 = ($$537$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg571$i = (($$537$$i) + -1)|0;
         $639 = (($$neg571$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$537$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi703$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa682$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2529$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1528623$i = 0;$$3533622$i = 10;
          } else {
           $$2529$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3533622$i*10)|0;
           $650 = (($$1528623$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1528623$i = $650;$$3533622$i = $649;
           } else {
            $$2529$i = $650;
            break;
           }
          }
         } else {
          $$2529$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2529$i))|0;
         $661 = ($660|0)<(0);
         $$543$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$543$i|0);
         $$2476$$544$i = $662 ? $$2476$i : $$543$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$544$i;$$pre$phi703$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2529$i))|0;
         $665 = ($664|0)<(0);
         $$545$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$545$i|0);
         $$2476$$546$i = $666 ? $$2476$i : $$545$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$546$i;$$pre$phi703$iZ2D = 0;
         break;
        }
       } else {
        $$pre702$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$537$i;$$pre$phi703$iZ2D = $$pre702$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi703$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512616$i = $678;
        while(1) {
         $682 = ((($$1512616$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512616$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1526$i = (($696) + ($669))|0;
      $697 = (($$1526$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$553$i>>>0);
        $$0496$$9$i = $702 ? $$553$i : $$9$ph$i;
        $$5493605$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493605$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493605$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464602$i = $704;
           while(1) {
            $709 = ((($$0464602$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464602$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493605$i)) + 4|0);
         $718 = ($717>>>0)>($$553$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493605$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(15392,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478599$i = $$3477$i;$$6494598$i = $717;
         while(1) {
          $726 = HEAP32[$$6494598$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463593$i = $727;
           while(1) {
            $731 = ((($$0463593$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463593$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478599$i|0)>(9);
           $737 = $736 ? 9 : $$4478599$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494598$i)) + 4|0);
          $739 = (($$4478599$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478599$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478599$i = $739;$$6494598$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa682$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi703$iZ2D|0)==(0);
         $$5610$i = $$3477$i;$$7495609$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495609$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495609$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5610$i|0)<(1);
            $or$cond551$i = $746 & $758;
            if ($or$cond551$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(15392,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep693$i = (($$0$i) + ($19)|0);
            $scevgep693694$i = $scevgep693$i;
            _memset(($7|0),48,($scevgep693694$i|0))|0;
            $$1606$i = $$0$i;
            while(1) {
             $752 = ((($$1606$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1606$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5610$i|0)>($763|0);
           $768 = $767 ? $763 : $$5610$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5610$i) - ($763))|0;
          $770 = ((($$7495609$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5610$i = $769;$$7495609$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$552$i = $781 ? $$1260 : $697;
      $$0470$i = $$552$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 15376 : 15380;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 15384 : 15388;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$0520$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 15340;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (15324 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (15340 + ($255)|0);
    $$332 = $or$cond282 ? 15340 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 15340;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_588($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function _pop_arg_588($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (_pthread_self()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (15394 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 15482;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 15482;
  } else {
   $$01214 = 15482;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i = 0, $$$i105 = 0, $$$i106 = 0, $$$i107 = 0, $$$i108 = 0, $$$i109 = 0, $$$i110 = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==(-1794895138);
 $7 = (_llvm_bswap_i32(($5|0))|0);
 $$$i = $6 ? $5 : $7;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_llvm_bswap_i32(($9|0))|0);
 $$$i110 = $6 ? $9 : $10;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_llvm_bswap_i32(($12|0))|0);
 $$$i109 = $6 ? $12 : $13;
 $14 = $1 >>> 2;
 $15 = ($$$i>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $$$i << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($$$i110>>>0)<($17>>>0);
   $19 = ($$$i109>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $$$i109 | $$$i110;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $$$i110 >>> 2;
     $24 = $$$i109 >>> 2;
     $$090 = 0;$$094 = $$$i;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_llvm_bswap_i32(($30|0))|0);
      $$$i108 = $6 ? $30 : $31;
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_llvm_bswap_i32(($34|0))|0);
      $$$i107 = $6 ? $34 : $35;
      $36 = ($$$i107>>>0)<($1>>>0);
      $37 = (($1) - ($$$i107))|0;
      $38 = ($$$i108>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($$$i107) + ($$$i108))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($$$i107)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $63 = (($$094) - ($25))|0;
      $64 = ($44|0)<(0);
      $$195 = $64 ? $25 : $63;
      $$191 = $64 ? $$090 : $26;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_llvm_bswap_i32(($48|0))|0);
     $$$i106 = $6 ? $48 : $49;
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_llvm_bswap_i32(($52|0))|0);
     $$$i105 = $6 ? $52 : $53;
     $54 = ($$$i105>>>0)<($1>>>0);
     $55 = (($1) - ($$$i105))|0;
     $56 = ($$$i106>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($$$i105)|0);
      $58 = (($$$i105) + ($$$i106))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((18136|0));
 return (18144|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((18136|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2580]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2580]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 127]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4537]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18188 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4537] = $24;
     } else {
      $25 = HEAP32[(18164)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(18156)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (18188 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4537] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(18164)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(18168)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (18188 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4537] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(18164)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(18156)>>2] = $84;
     HEAP32[(18168)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(18152)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (18452 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(18164)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (18452 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(18152)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(18164)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(18164)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(18164)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(18168)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (18188 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[4537] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(18164)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(18156)>>2] = $$0191$i;
      HEAP32[(18168)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(18152)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (18452 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (18452 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(18156)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(18164)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (18452 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(18152)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(18164)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(18164)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(18164)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (18188 + ($425<<2)|0);
          $427 = HEAP32[4537]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4537] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(18164)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (18452 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(18152)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(18164)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(18164)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(18156)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(18168)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(18168)>>2] = $511;
   HEAP32[(18156)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(18156)>>2] = 0;
   HEAP32[(18168)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(18160)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(18160)>>2] = $526;
  $527 = HEAP32[(18172)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(18172)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[4655]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(18628)>>2] = 4096;
  HEAP32[(18624)>>2] = 4096;
  HEAP32[(18632)>>2] = -1;
  HEAP32[(18636)>>2] = -1;
  HEAP32[(18640)>>2] = 0;
  HEAP32[(18592)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[4655] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(18628)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(18588)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(18580)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(18592)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(18172)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (18596);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(18624)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(18580)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(18588)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(18628)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(18592)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(18592)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(18580)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(18580)>>2] = $624;
  $625 = HEAP32[(18584)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(18584)>>2] = $624;
  }
  $627 = HEAP32[(18172)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(18164)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(18164)>>2] = $$748$i;
    }
    HEAP32[(18596)>>2] = $$748$i;
    HEAP32[(18600)>>2] = $$723947$i;
    HEAP32[(18608)>>2] = 0;
    $632 = HEAP32[4655]|0;
    HEAP32[(18184)>>2] = $632;
    HEAP32[(18180)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (18188 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(18172)>>2] = $646;
    HEAP32[(18160)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(18636)>>2]|0;
    HEAP32[(18176)>>2] = $652;
   } else {
    $$024370$i = (18596);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(18160)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(18172)>>2] = $676;
       HEAP32[(18160)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(18636)>>2]|0;
       HEAP32[(18176)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(18164)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(18164)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (18596);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (18596);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(18160)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(18160)>>2] = $724;
        HEAP32[(18172)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(18168)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(18156)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(18156)>>2] = $730;
         HEAP32[(18168)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (18188 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[4537]|0;
            $757 = $756 & $755;
            HEAP32[4537] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (18452 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(18152)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(18152)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(18164)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(18164)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(18164)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (18188 + ($834<<2)|0);
         $836 = HEAP32[4537]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[4537] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(18164)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (18452 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(18152)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(18152)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(18164)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(18164)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (18596);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(18172)>>2] = $944;
    HEAP32[(18160)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(18636)>>2]|0;
    HEAP32[(18176)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(18596)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(18596)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(18596)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(18596)+12>>2]|0;
    HEAP32[(18596)>>2] = $$748$i;
    HEAP32[(18600)>>2] = $$723947$i;
    HEAP32[(18608)>>2] = 0;
    HEAP32[(18604)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (18188 + ($965<<2)|0);
      $967 = HEAP32[4537]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[4537] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(18164)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (18452 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(18152)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(18152)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(18164)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(18164)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(18160)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(18160)>>2] = $1047;
   $1048 = HEAP32[(18172)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(18172)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18164)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(18168)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(18156)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (18188 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4537]|0;
     $38 = $37 & $36;
     HEAP32[4537] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (18452 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(18152)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(18152)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(18164)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(18164)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(18164)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(18172)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(18160)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(18160)>>2] = $123;
   HEAP32[(18172)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(18168)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(18168)>>2] = 0;
   HEAP32[(18156)>>2] = 0;
   return;
  }
  $128 = HEAP32[(18168)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(18156)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(18156)>>2] = $131;
   HEAP32[(18168)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (18188 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(18164)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[4537]|0;
     $155 = $154 & $153;
     HEAP32[4537] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(18164)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(18164)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(18164)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (18452 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(18152)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(18152)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(18164)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(18164)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(18164)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(18168)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(18156)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (18188 + ($236<<2)|0);
  $238 = HEAP32[4537]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4537] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(18164)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (18452 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(18152)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(18152)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(18164)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(18164)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(18180)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(18180)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (18604);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(18180)>>2] = -1;
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(129,($1|0),(17286|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (10480);
  ___cxa_throw(($1|0),(472|0),(24|0));
  // unreachable;
 }
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 255]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(424|0),(21|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 12|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10440);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(130,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10460);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(130,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $37 = HEAP32[2582]|0;
    HEAP32[$vararg_buffer7>>2] = $37;
    _abort_message(17379,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[90]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 127](360,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[2582]|0;
    $32 = HEAP32[$30>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = $31;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(17293,$vararg_buffer);
    // unreachable;
   } else {
    $36 = HEAP32[2582]|0;
    HEAP32[$vararg_buffer3>>2] = $36;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(17338,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(17417,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((18644|0),(131|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[4662]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(17568,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2456]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,384,368,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 127]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 63]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 63]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 63]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 63]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 63]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 127]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((18648|0),(132|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17617,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[4662]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17667,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(133)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(134,(17720|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(134,(17760|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(135);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2581]|0;HEAP32[2581] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (17810|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10440);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + -12|0);
  __ZdlPv($7);
 }
 return;
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10460);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = ($0|0)==($1|0);
 $7 = ($1|0)==(544|0);
 $$$i = $6 | $7;
 if ($$$i) {
  $$4 = 1;
 } else {
  $8 = ($1|0)==(0|0);
  if ($8) {
   $$4 = 0;
  } else {
   $9 = (___dynamic_cast($1,384,504,0)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$4 = 0;
   } else {
    $11 = ((($9)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($0)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 ^ -1;
    $16 = $12 & $15;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = ((($0)) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($9)) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     $23 = ($19|0)==(536|0);
     $or$cond = $23 | $22;
     if ($or$cond) {
      $$4 = 1;
     } else {
      $24 = ($19|0)==(0|0);
      if ($24) {
       $$4 = 0;
      } else {
       $25 = (___dynamic_cast($19,384,368,0)|0);
       $26 = ($25|0)==(0|0);
       if ($26) {
        $$4 = 0;
       } else {
        $27 = HEAP32[$20>>2]|0;
        $28 = ($27|0)==(0|0);
        if ($28) {
         $$4 = 0;
        } else {
         $29 = (___dynamic_cast($27,384,368,0)|0);
         $30 = ($29|0)==(0|0);
         if ($30) {
          $$4 = 0;
         } else {
          $31 = ((($3)) + 4|0);
          dest=$31; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$3>>2] = $29;
          $32 = ((($3)) + 8|0);
          HEAP32[$32>>2] = $25;
          $33 = ((($3)) + 12|0);
          HEAP32[$33>>2] = -1;
          $34 = ((($3)) + 48|0);
          HEAP32[$34>>2] = 1;
          $35 = HEAP32[$29>>2]|0;
          $36 = ((($35)) + 28|0);
          $37 = HEAP32[$36>>2]|0;
          $38 = HEAP32[$2>>2]|0;
          FUNCTION_TABLE_viiii[$37 & 127]($29,$3,$38,1);
          $39 = ((($3)) + 24|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ($40|0)==(1);
          if ($41) {
           $42 = ((($3)) + 16|0);
           $43 = HEAP32[$42>>2]|0;
           HEAP32[$2>>2] = $43;
           $$0 = 1;
          } else {
           $$0 = 0;
          }
          $$4 = $$0;
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&255;
  $12 = ((($1)) + 53|0);
  $13 = ($10&65535) >>> 8;
  $14 = $13&255;
  $15 = ((($0)) + 16|0);
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($0)) + 16|0) + ($17<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$12>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($15,$1,$2,$3,$4,$5);
  $19 = ($17|0)>(1);
  L4: do {
   if ($19) {
    $20 = ((($0)) + 24|0);
    $21 = ((($1)) + 24|0);
    $22 = ((($0)) + 8|0);
    $23 = ((($1)) + 54|0);
    $$0 = $20;
    while(1) {
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      break L4;
     }
     $26 = HEAP16[$9>>1]|0;
     $27 = $26&255;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $34 = ($26&65535)<(256);
      if (!($34)) {
       $35 = HEAP32[$22>>2]|0;
       $36 = $35 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        break L4;
       }
      }
     } else {
      $29 = HEAP32[$21>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       break L4;
      }
      $31 = HEAP32[$22>>2]|0;
      $32 = $31 & 2;
      $33 = ($32|0)==(0);
      if ($33) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$12>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $38 = ((($$0)) + 8|0);
     $39 = ($38>>>0)<($18>>>0);
     if ($39) {
      $$0 = $38;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $11;
  HEAP8[$12>>0] = $14;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 L1: do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $62 = ((($0)) + 16|0);
    $63 = ((($0)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (((($0)) + 16|0) + ($64<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($62,$1,$2,$3,$4);
    $66 = ((($0)) + 24|0);
    $67 = ($64|0)>(1);
    if (!($67)) {
     break;
    }
    $68 = ((($0)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 2;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = ((($1)) + 36|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(1);
     if (!($74)) {
      $80 = $69 & 1;
      $81 = ($80|0)==(0);
      if ($81) {
       $84 = ((($1)) + 54|0);
       $$2 = $66;
       while(1) {
        $93 = HEAP8[$84>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if (!($94)) {
         break L1;
        }
        $95 = HEAP32[$72>>2]|0;
        $96 = ($95|0)==(1);
        if ($96) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $97 = ((($$2)) + 8|0);
        $98 = ($97>>>0)<($65>>>0);
        if ($98) {
         $$2 = $97;
        } else {
         break L1;
        }
       }
      }
      $82 = ((($1)) + 24|0);
      $83 = ((($1)) + 54|0);
      $$1 = $66;
      while(1) {
       $85 = HEAP8[$83>>0]|0;
       $86 = ($85<<24>>24)==(0);
       if (!($86)) {
        break L1;
       }
       $87 = HEAP32[$72>>2]|0;
       $88 = ($87|0)==(1);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $91 = ((($$1)) + 8|0);
       $92 = ($91>>>0)<($65>>>0);
       if ($92) {
        $$1 = $91;
       } else {
        break L1;
       }
      }
     }
    }
    $75 = ((($1)) + 54|0);
    $$0 = $66;
    while(1) {
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)==(0);
     if (!($77)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $78 = ((($$0)) + 8|0);
     $79 = ($78>>>0)<($65>>>0);
     if ($79) {
      $$0 = $78;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($0)) + 16|0);
     $29 = ((($0)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (((($0)) + 16|0) + ($30<<3)|0);
     $32 = ((($1)) + 52|0);
     $33 = ((($1)) + 53|0);
     $34 = ((($1)) + 54|0);
     $35 = ((($0)) + 8|0);
     $36 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $28;$$085$off0 = 0;
     L34: while(1) {
      $37 = ($$084>>>0)<($31>>>0);
      if (!($37)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      HEAP8[$32>>0] = 0;
      HEAP8[$33>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $38 = HEAP8[$34>>0]|0;
      $39 = ($38<<24>>24)==(0);
      if (!($39)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      $40 = HEAP8[$33>>0]|0;
      $41 = ($40<<24>>24)==(0);
      do {
       if ($41) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $42 = HEAP8[$32>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if ($43) {
         $49 = HEAP32[$35>>2]|0;
         $50 = $49 & 1;
         $51 = ($50|0)==(0);
         if ($51) {
          $$283$off0 = 1;
          label = 20;
          break L34;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $44 = HEAP32[$36>>2]|0;
        $45 = ($44|0)==(1);
        if ($45) {
         label = 25;
         break L34;
        }
        $46 = HEAP32[$35>>2]|0;
        $47 = $46 & 2;
        $48 = ($47|0)==(0);
        if ($48) {
         label = 25;
         break L34;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $52 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $52;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 20) {
       if (!($$085$off0)) {
        HEAP32[$19>>2] = $2;
        $53 = ((($1)) + 40|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$53>>2] = $55;
        $56 = ((($1)) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(1);
        if ($58) {
         $59 = HEAP32[$36>>2]|0;
         $60 = ($59|0)==(2);
         if ($60) {
          HEAP8[$34>>0] = 1;
          if ($$283$off0) {
           label = 25;
           break;
          } else {
           $61 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 25;
       } else {
        $61 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $61 = 3;
     }
     HEAP32[$25>>2] = $61;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 127]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 63]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 63]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10420);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4663]|0;HEAP32[4663] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 127]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,384,504,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,___stdout_write,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIsNS3_9allocatorIsEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIsNS2_9allocatorIsEEEEE3setERS6_jRKs,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3setERS6_jRKh,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z11encodeImagejjRNSt3__26vectorIhNS_9allocatorIhEEEE,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z11decodeImageNSt3__210unique_ptrINS_6vectorIsNS_9allocatorIsEEEENS_14default_deleteIS4_EEEEPjS8_,b0,b0,__ZN10emscripten8internal7InvokerIbJRNSt3__26vectorIsNS2_9allocatorIsEEEEiEE6invokeEPFbS7_iEPS6_i,b0,__ZN10emscripten8internal7InvokerIlJRNSt3__26vectorIsNS2_9allocatorIsEEEEiEE6invokeEPFlS7_iEPS6_i,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,_zcalloc];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12operator_newINSt3__26vectorIsNS2_9allocatorIsEEEEJEEEPT_DpOT0_,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12operator_newINSt3__26vectorIhNS2_9allocatorIhEEEEJEEEPT_DpOT0_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev
,b3,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIsNS2_9allocatorIsEEEEEEvPT_,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIhNS2_9allocatorIhEEEEEEvPT_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__emval_decref__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_,b4,b4,b4,b4,b4,__ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE,__ZNSt3__26vectorIbNS_9allocatorIbEEE8allocateEj,b4,__ZNSt3__26vectorIsNS_9allocatorIsEEE9push_backERKs,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__26vectorIhNS_9allocatorIhEEE9push_backERKh,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj,b4,b4,b4,__ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj,b4,__ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2Ej,__ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_,__ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_,b4,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2ERKS5_,__ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj,b4,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE,__ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEj,b4,__ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEEC2Ej,__ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej,b4,b4,__ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_,__ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE8allocateEj
,__ZNSt3__26vectorINS0_INS0_IsNS_9allocatorIsEEEENS1_IS3_EEEENS1_IS5_EEE18__construct_at_endEj,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE8allocateEj,__ZNKSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE17__annotate_shrinkEj,b4,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endEj,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,_zcfree,__ZNSt11logic_errorC2EPKc,__ZNSt3__218__libcpp_refstringC2EPKc,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5
,__ZNKSt13runtime_error4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_compressBound,_malloc,b5,__Znwj,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIsNS2_9allocatorIsEEEEEEPKvPT_,b5,b5,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIsNS2_9allocatorIsEEEEJEE6invokeEPFS7_vE,b5,b5,__ZNKSt3__26vectorIsNS_9allocatorIsEEE4sizeEv,b5,b5
,b5,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvPT_,b5,b5,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIhNS2_9allocatorIhEEEEJEE6invokeEPFS7_vE,b5,b5,__ZNKSt3__26vectorIhNS_9allocatorIhEEE4sizeEv,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_,b5,b5,b5,b5,b5,__Z8compressRNSt3__26vectorIsNS_9allocatorIsEEEE,b5,__Z12decodeImageWNSt3__210unique_ptrINS_6vectorIsNS_9allocatorIsEEEENS_14default_deleteIS4_EEEE,__Z13haarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE,__Z14ihaarTransformRNSt3__26vectorIsNS_9allocatorIsEEEE,b5
,b5,b5,b5,__Z11compressVecRNSt3__26vectorIbNS_9allocatorIbEEEE,b5,b5,b5,b5,b5,__Z15haarTransform2DRNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEE,b5,b5,b5,b5,b5,b5,b5,__Z16ihaarTransform2DRNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEE,b5,b5,b5,b5,b5,__ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEE10toWireTypeESA_,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN10emscripten8internal18GenericBindingTypeINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEE10toWireTypeESA_,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_,b6,__ZNSt3__26vectorIsNS_9allocatorIsEEE6resizeEjRKs,b6,b6,b6,b6,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvRKsEvPS6_JS8_EE6invokeERKSA_SB_s,b6,b6,b6,b6
,b6,b6,b6,b6,__ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEjRKh,b6,b6,b6,b6,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEvPS6_JS8_EE6invokeERKSA_SB_h,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh,b6,__ZNSt3__214__split_bufferIsRNS_9allocatorIsEEE18__construct_at_endEjRKs,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEEC2EjRKS3_,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,__ZL25default_terminate_handlerv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b7,b7,b7,___cxa_end_catch__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_compress,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIsNS2_9allocatorIsEEEEjRKsEbS7_JjS9_EE6invokeEPSB_PS6_js,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEjRKhEbS7_JjS9_EE6invokeEPSB_PS6_jh,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIsNS2_9allocatorIsEEEENS2_14default_deleteIS7_EEEEJjjRNS4_IhNS5_IhEEEEEE6invokeEPFSA_jjSD_EjjPSC_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iii = [b10,_deflate_stored,_deflate_fast,_deflate_slow,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIsNS2_9allocatorIsEEEEE3getERKS6_j
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3getERKS6_j,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z19haarTransform2DFlatRNSt3__26vectorIsNS_9allocatorIsEEEEi
,__Z20ihaarTransform2DFlatRNSt3__26vectorIsNS_9allocatorIsEEEEi,__Z9thresholdRNSt3__26vectorIsNS_9allocatorIsEEEEi,__Z10threshold2RNSt3__26vectorIsNS_9allocatorIsEEEEi,b10,__ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEJRNS4_IsNS5_IsEEEEEE6invokeEPFSA_SD_EPSC_,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal7InvokerINSt3__210unique_ptrINS2_6vectorIhNS2_9allocatorIhEEEENS2_14default_deleteIS7_EEEEJNS3_INS4_IsNS5_IsEEEENS8_ISC_EEEEEE6invokeEPFSA_SE_EPSC_,__ZN10emscripten8internal7InvokerIbJRNSt3__26vectorIsNS2_9allocatorIsEEEEEE6invokeEPFbS7_EPS6_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__Z11encodeShortRNSt3__26vectorIbNS_9allocatorIbEEEEs,b10];
var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIsNS2_9allocatorIsEEEEFvjRKsEvPS6_JjS8_EE6invokeERKSA_SB_js,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvjRKhEvPS6_JjS8_EE6invokeERKSA_SB_jh,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__ZNSt3__26vectorINS0_IsNS_9allocatorIsEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j,b11,b11,b11];

  return { _llvm_cttz_i32: _llvm_cttz_i32, ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___udivmoddi4: ___udivmoddi4, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _emscripten_get_global_libc: _emscripten_get_global_libc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _llvm_bswap_i32: _llvm_bswap_i32, _sbrk: _sbrk, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_haar_cpp: __GLOBAL__sub_I_haar_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real___GLOBAL__sub_I_haar_cpp = asm["__GLOBAL__sub_I_haar_cpp"]; asm["__GLOBAL__sub_I_haar_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_haar_cpp.apply(null, arguments);
};
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _memset = Module["_memset"] = asm["_memset"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __GLOBAL__sub_I_haar_cpp = Module["__GLOBAL__sub_I_haar_cpp"] = asm["__GLOBAL__sub_I_haar_cpp"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



//# sourceMappingURL=haar.js.map